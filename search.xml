<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Datagrip 提示 No database select</title>
      <link href="/posts/7c2d.html"/>
      <url>/posts/7c2d.html</url>
      
        <content type="html"><![CDATA[<h4 id="环境">环境</h4><blockquote><p>Datagrip 2023.1.2</p><p>MySQL 8.0.32</p></blockquote><h4 id="问题">问题</h4><p>打开 Datagrip 执行 SELECT 语句时，Datagrip 提示 <code>No database select</code> ，这很奇怪，因为我已经使用了当前查询控制台（console）好多天。</p><h4 id="解决">解决</h4><p>执行 <code>USE XXX;</code> 语句， <code>XXX</code> 即为用户所用架构（Schema）的名字。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 通过shell 脚本切换目录</title>
      <link href="/posts/7d41.html"/>
      <url>/posts/7d41.html</url>
      
        <content type="html"><![CDATA[<h4 id="环境">环境</h4><blockquote><p>Linux CentOS7</p></blockquote><h4 id="问题">问题</h4><p>每次切换所处的目录时，总是要输入很多字符，非常繁琐，希望通过脚本之类的方式快速切换到指定目录。</p><h4 id="方案">方案</h4><p><strong>失败方案</strong></p><p>思路：希望通过 shell 脚本实现，代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token function">sudo</span> <span class="token builtin class-name">cd</span> ~/XXX/YYY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果：实践发现这样无法解决，为脚本添加可执行权限并执行脚本后发现，当前所处的目录没有任何变化。</p><p>原因：在 shell 脚本中，不能直接更改用户所处的文件夹，因为 shell 脚本是在子进程中运行的，该子进程无法影响父进程（即启动该脚本的 shell 环境）的状态。在 shell 脚本中更改所处的文件夹只对该脚本程序有效，对于启动该脚本程序的 shell 环境并没有影响。</p><ul><li>例如，如果在 脚本的 cd 命令后添加 <code>mkdir CCC</code> 命令，会发现在 <code>~/XXX/YYY</code> 目录下出现了 CCC 文件夹。</li></ul><p><strong>成功方案</strong></p><p>在 <code>~/.bashrc</code> 中定义一个名为 cduser 的函数，代码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">cduser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">cd</span> ~/XXX/YYY<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>执行 <code>source ~/.bashrc</code> 命令，之后直接输入 cduser 就可以跳转到 <code>~/XXX/YYY</code> 目录下。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模板】Linux编程常用命令</title>
      <link href="/posts/15e3.html"/>
      <url>/posts/15e3.html</url>
      
        <content type="html"><![CDATA[<h4 id="TMUX">TMUX</h4><p>​<code>tmux</code> 是一款终端复用工具，可以在一个终端窗口中创建多个“窗格”（ <code>pane</code> ）或“窗口”（ <code>window</code> ），从而使用户可以在同一个终端界面中同时运行多个命令行程序或窗口管理器等。</p><ul><li><p><code>tmux</code> 打开一个新的会话。</p><ul><li><code>tmux new -s session_name</code> 打开一个新的会话并为这个会话命令。</li></ul></li><li><p><code>tmux a</code> 打开上次关闭的会话。</p></li><li><p><code>tmux ls</code> 列出所有会话。</p></li><li><p><code>Ctrl + a</code> <code>d</code> 直接退出当前会话。</p><ul><li>后续可以恢复会话。</li></ul></li><li><p><code>tmux kill-session [-a] [-t target-session]</code> 杀死会话。<code>-a</code>选项表示删除所有会话；<code>-t</code>选项后跟要删除的目标会话名称或会话ID。</p><ul><li>后续不可恢复会话。</li></ul></li><li><p><code>Ctrl + a</code> <code>Shift + %</code> 将当前窗格切割为左右两个。</p></li><li><p><code>Ctrl + a</code> <code>Shift + "</code> 将当前窗格切割为上下两个。</p></li><li><p><code>Ctrl + d</code> 关闭当前窗格。</p><ul><li>当关闭最后一个窗格时，退出会话。</li></ul></li><li><p>按下 <code>Ctrl + a</code> ，通过方向键可以移动到相邻的窗格。</p></li><li><p><code>Ctrl + a</code> <code>z</code> 可以使得当前窗格最大化，重复操作可以取消最大化。</p></li></ul><hr><h4 id="VIM">VIM</h4><p>​<code>vim</code> 是一种文本编辑器，是Vi编辑器的加强版，常用于在 <code>Linux</code> 和 <code>Unix</code> 系统中编辑多种类型的文本文件。由于 <code>vim</code> 可以通过终端或远程 <code>SSH</code> 连接使用，因此非常适合在服务器上编辑文本文件。</p><ul><li><code>vim filename</code> 如果已有该文件，则打开它。如果没有该文件，则打开个一个新的文件，并命名为 <code>filename</code> 。</li></ul><p><strong>常用</strong> 的 <code>vim</code> <strong>命令</strong> 分为三类：</p><ol><li>命令模式（Command mode）：在这个模式下，用户可以执行各种编辑命令，如移动光标、删除文本、复制粘贴等。常用的命令包括：<ul><li><code>i</code> 进入插入模式，在当前光标位置之前插入文本。</li><li><code>a</code> 进入插入模式，在当前光标位置之后插入文本。</li><li><code>x</code> 删除当前光标所在位置的字符。</li><li><code>dd</code> 删除整行。</li><li><code>yy</code> 复制整行。</li><li><code>v</code> 选中文本，通过键盘方向键控制要选中的内容。</li><li><code>y</code> 复制选中的内容。</li><li><code>p</code> 粘贴被复制的内容。</li><li><code>Ctrl + q</code> 当 <code>vim</code> 卡死时，可以取消当前正在执行的命令。</li><li><code>u</code> 撤回上一步操作。</li></ul></li><li>插入模式（ <code>Insert mode</code> ）：在这个模式下，用户可以直接输入文本，并且可以通过向左或向右移动光标来编辑已经输入的文本。可以通过按 <code>Esc</code> 键返回到命令模式。</li><li>末行模式（ <code>Last line mode</code> ）：在这个模式下，用户可以执行一些高级的命令，如保存文件、退出 <code>vim</code> 编辑器等。常用的命令包括：<ul><li><code>:w</code> 保存当前文件。</li><li><code>:wq</code> 保存当前文件并退出 <code>vim</code> 编辑器。</li><li><code>:q</code> 退出 <code>vim</code> 编辑器。</li><li><code>:q!</code> 强制退出 <code>vim</code> 编辑器并放弃所有更改。</li></ul></li></ol><p><strong>异常处理</strong> ：</p><p>​每次用vim编辑文件时，会自动创建一个 <code>.filename.swp</code> 的临时文件。<br>​    如果打开某个文件时，该文件的 <code>swp</code> 文件已存在，则会报错。此时解决办法有两种：</p><ol><li>找到正在打开该文件的程序，并退出。</li><li>直接删掉该 <code>swp</code> 文件即可。</li></ol><hr><h4 id="G-编译器">G++ 编译器</h4><p>​在 <code>Linux</code> 操作系统中， <code>G++</code> 是一个常用的 <code>C++</code> 编译器，被广泛使用来编译、链接和生成可执行程序。</p><ul><li><p><code>g++ source_file.cpp -o executable_file</code> 其中 <code>source_file</code> 代表你的源代码文件名， <code>executable_file</code> 代表可执行程序的文件名。</p><ul><li>将编译和链接分开：编译： <code>g++ -c xxx.cpp yyy.cpp</code> 。链接： <code>g++ *.o -o main</code> 。</li></ul></li><li><p><code>./executable_file</code> 在终端中运行可执行文件，其中 <code>executable_file</code> 代表可执行程序的文件名。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++服务器】day03笔记</title>
      <link href="/posts/1a7c.html"/>
      <url>/posts/1a7c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++服务器】day02笔记</title>
      <link href="/posts/da6c.html"/>
      <url>/posts/da6c.html</url>
      
        <content type="html"><![CDATA[<h3 id="server-cpp">server.cpp</h3><p>客户端与服务器建立连接之后，如何实现数据的读写操作？</p><ul><li>read 和 write 函数：这是标准的文件 I/O 函数，在网络编程中也可以用来进行数据的读写操作。read 函数从文件描述符中读取指定字节数的数据，而 write 函数向文件描述符中写入指定字节数的数据。这些函数适用于面向流（Stream）的协议，如 TCP，但不适用于面向消息（Message）的协议，如 UDP。</li><li>通过下图可以非常清晰的看到，服务器与客户端通过 read 函数读对方发送的数据，通过 write 函数向对方发送数据。</li></ul><img src="https://s2.loli.net/2023/05/22/3K5qEIzJF4npu6l.png" alt="图 1" style="zoom:80%;"><p>为什么要创建套接字 clnt_sockfd，而不是继续使用 sockfd？</p><ul><li>服务器端接受到一个客户端的连接请求时，会创建一个新的套接字（clnt_sockfd）来处理这个连接，而原先的监听套接字（sockfd）仍然在阻塞模式下监听其他客户端的连接请求。新的套接字可以独立地进行数据传输，不影响服务器端对其他客户端的连接请求的处理，从而实现了并发处理多个客户端的连接请求和数据传输。</li></ul><p>read 函数和 write 函数是用于在 socket 通信中进行数据读写的函数，具体的作用和用法如下：</p><ul><li>read函数的作用是从已连接的套接字中读取数据，其函数原型为：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ssize_t <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​其中，fd表示需要读取数据的文件描述符，buf表示接收数据的缓冲区，count表示需要读取的数据长度。</p><p>​read 函数的返回值表示实际读取到的数据长度，如果返回值为 0，则表示连接已关闭；如果返回值为 -1，则表示出现错误，错误码存储在 errno 变量中。</p><ul><li>write函数的作用是向已连接的套接字中写入数据，其函数原型为：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ssize_t <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> size_t count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​其中，fd 表示写入数据的文件描述符，buf 表示待写入数据的缓冲区，count 表示需要写入的数据长度。</p><p>​write 函数的返回值表示实际成功写入的数据长度，如果返回值为 -1，则表示出现错误，错误码存储在 errno 变量中。</p><p>read 函数和 write 函数是否会阻塞？</p><ul><li><p>在默认情况下，read 函数和 write 函数都是阻塞函数，当调用它们时，如果没有数据可读或无法写入数据，系统将自动阻塞等待，直到有数据可读或者可以写入数据为止。例如，当接收缓冲区没有数据可供读取时，read 函数会一直阻塞等待，直到有数据可读或者对端关闭连接为止。</p></li><li><p>如果需要使用非阻塞 IO 模式，可以使用 fcntl 函数的 F_SETFL 命令将文件描述符设置为非阻塞模式。此时，read 函数和 write 函数将不再阻塞，如果没有数据可读或无法写入数据，read 函数和 write 函数将立即返回，并设置 errno 变量为 EAGAIN（操作继续进行的条件不满足）。</p></li><li><p>另外，也可以使用 <strong>多路复用技术</strong> （如select、poll、epoll等）来避免 read 函数和 write 函数的阻塞问题，这样可以 <strong>同时监视多个文件描述符</strong> ，以便在任何一个文件描述符就绪时进行操作。</p></li></ul><h4 id="代码：">代码：</h4><p>注释版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span> <span class="token comment">// 自定义的错误处理函数 util</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span> <span class="token comment">// read 和 write 函数</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// fd 是 file descriptor 文件描述符。更多关于 socket fd ：https://zhuanlan.zhihu.com/p/399651675。</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// socket返回的值是一个文件描述符，0、1、2 分别表示标准输入、标准输出、标准错误，所以其他打开的文件描述符都会大于 2, 错误时就返回 -1。</span>    <span class="token function">errif</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket create error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 除 sin_family 参数外，sockaddr_in 内容以网络字节顺序表示。</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// bind 函数返回 0 表示绑定成功，-1 表示绑定失败。</span>    <span class="token keyword">int</span> rebid <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>rebid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// listen 函数返回 0 表示调用成功，-1 表示调用失败。</span>    <span class="token keyword">int</span> reltn <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> SOMAXCONN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>reltn <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"sockfd listen error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clnt_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// accept 函数要求第三个参数是 socklen_t 类型。</span>    socklen_t clnt_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// accept 函数接受一个客户端请求后，若连接成功会返回一个新的非负 SOCKFD 值，若连接失败返回 -1。</span>    <span class="token keyword">int</span> clnt_sockfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>clnt_sockfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket accept error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new client fd %d! IP: %s Port: %d\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 建立一个socket连接后，使用 &lt;unistd.h&gt; 头文件中 read 和 write 函数来进行网络接口的数据读写操作。</span>    <span class="token comment">// 这两个函数用于 TCP 连接。如果是 UDP，需要使用 sendto 和 recvfrom。</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 定义缓冲区，存放从客户端读到的数据。</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 清空缓冲区。</span>        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 write() 可以向套接字中写入数据，使用 read() 可以从套接字中读取数据。</span>        <span class="token comment">// size_t 是通过 typedef 声明的 unsigned int 类型；ssize_t 在 "size_t" 前面加了一个"s"，代表 signed，即 ssize_t 是通过 typedef 声明的 signed int 类型。</span>        <span class="token comment">// read() 的原型：ssize_t read(int fd, void *buf, size_t nbytes);</span>        <span class="token comment">// fd 为要读取的文件的描述符，buf 为要接收数据的缓冲区地址，nbytes 为要读取的数据的字节数。</span>        ssize_t read_bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// read() 函数会从 fd 文件中读取 nbytes 个字节并保存到缓冲区 buf，成功则返回读取到的字节数。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"message from client fd %d: %s\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将相同数据写回客户端。</span>            <span class="token comment">// write() 的原型：ssize_t write(int fd, const void *buf, size_t nbytes);</span>            <span class="token comment">// fd：要写入的文件的描述符。buf：要写入的数据的缓冲区地址。nbytes：要写入的数据的字节数。</span>            <span class="token function">write</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// read() 返回 0 表示 EOF ，规定如此。通常是对端关闭了连接。</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client fd %d disconnect\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 小细节：Linux 系统的文件描述符理论上是有限的，在使用完一个 fd 之后，需要使用头文件 &lt;unistd.h&gt; 中的 close 函数关闭。</span>            <span class="token function">close</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// read() 返回 -1，表示发生错误。</span>            <span class="token function">close</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">errif</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"socket read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 使用完一个 fd 后应该及时关闭。</span>    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无注释版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket create error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rebid <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>rebid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket bind error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> reltn <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> SOMAXCONN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>reltn <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"sockfd listen error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clnt_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socklen_t clnt_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> clnt_sockfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>clnt_sockfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket accept error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new client fd %d! IP: %s Port: %d\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssize_t read_bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"message from client fd %d: %s\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">write</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"client fd %d disconnect\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">close</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token function">close</span><span class="token punctuation">(</span>clnt_sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">errif</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"socket read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="client-cpp">client.cpp</h3><p>客户端的逻辑与服务器端相同，想要读取对方发来的数据时，用 read 函数，想要向对方发送数据时，用 write 函数。这里的发送与读取都是使用 <strong>系统调用</strong> 在套接字上完成的。简单说套接字就是 IP 地址和端口号；准确说套接字是一种用于网络通信的编程接口和抽象概念。</p><p>套接字是一种 <strong>特殊类型的文件描述符</strong> 。在 Linux/Unix 系统中，所有的 I/O（包括文件、套接字、管道等）都用文件描述符来进行表示和操作，因此套接字实际上也属于文件描述符的一种。但是套接字并不是一个真正的文件，而是一个通信端点，并提供了专门的系统调用用于在程序和远程主机之间进行数据传输。</p><h4 id="代码：-2">代码：</h4><p>注释版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket create error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// connect 函数参数包括一个套接字描述符，一个指向目标主机地址和端口号的结构体指针，和该结构体的大小。</span>    <span class="token comment">// connect函数要进行TCP三次握手，如果成功则返回0，如果失败则返回-1。connect函数的失败是通过超时来控制的，它会在规定的时间内发起多次连接。</span>    <span class="token keyword">int</span> recnt <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>recnt <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket connect error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 定义缓冲区，存放从键盘输入到服务器的数据。</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 清空缓冲区。</span>        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数据：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 发送缓冲区中的数据到服务器socket，返回已发送数据大小。</span>        ssize_t write_bytes <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// write() 函数会将缓冲区 buf 中的 sizeof(buf) 个字节写入文件 sockfd，成功则返回写入的字节数，失败则返回 -1。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>write_bytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket already disconncted, can't write any more!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 清空缓冲区。</span>        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从服务器 socket 读到缓冲区，返回已读数据大小。</span>        ssize_t read_bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在 read() 中，&lt;0 代表出错（实际上只用到了 -1），==0 代表 EOF，&gt;0 才是读取成功，此时代表字节数。关于 read() 返回 0：https://www.zhihu.com/question/355020251</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"message from server: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// read 返回 0，表示 EOF，通常是服务器断开连接，等会儿可以通过人为终止服务器连接进行测试</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"server socket disconnected!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// read 返回 -1，表示发生错误，按照上文方法进行错误处理。</span>            <span class="token comment">// 发生错误，等下调用错误处理函数后会自动退出程序，所以需要提前关闭 sockfd。</span>            <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">errif</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"socket read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 两台计算机之间的通信相当于两个套接字之间的通信.</span><span class="token comment">// 在服务器端用 write() 向套接字写入数据，客户端就能收到，然后再使用 read() 从套接字中读取出来，就完成了一次通信。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无注释版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>sockfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket create error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> recnt <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">errif</span><span class="token punctuation">(</span>recnt <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"socket connect error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数据：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        ssize_t write_bytes <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>write_bytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket already disconncted, can't write any more!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ssize_t read_bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"message from server: %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"server socket disconnected!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>read_bytes <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">errif</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"socket read error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">close</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="util-cpp">util.cpp</h3><p>网络编程中的错误处理非常重要，可以帮助我们快速诊断和解决网络问题，保证程序的高可靠性和稳定性。</p><p>常见的错误处理方法：</p><ul><li>检查函数返回值：在网络编程中，绝大多数的函数都会返回一个整数值，通常为 -1 表示出错，而其他值则表示成功执行。</li><li>程序退出处理：当程序遇到严重的错误时，可能无法通过修复进行恢复，此时应该尽早退出程序，以避免程序导致更严重的后果。在退出程序之前，应尽量释放程序占用的资源， <strong>关闭已经打开的文件</strong> 、 <strong>套接字</strong> 等资源。</li><li>异常处理：网络编程中可能会遇到各种意外情况，如断网、超时等异常。在遇到这些异常时，应该采取相应的措施，如重试、重新连接或优雅退出等。</li></ul><h4 id="代码">代码</h4><p>注释版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">// perror 函数</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span> <span class="token comment">// exit 函数和 宏 EXIT_FAILURE</span></span><span class="token keyword">void</span> <span class="token function">errif</span><span class="token punctuation">(</span><span class="token keyword">bool</span> condition<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">// void  preeor(const char*) 把一个描述性错误消息输出到标准错误 stderr。</span>        <span class="token function">perror</span><span class="token punctuation">(</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// void exit(int) 使程序在 main 以外的函数中终止。实参是程序返回到计算机操作系统的退出代码。</span>        <span class="token comment">// 参数为 0 或 EXIT_SUCCESS 表示程序正常终止，否则表示因异常程序终止。EXIT_FAILURE 是 &lt;stdilb.h&gt; 中定义的宏，值为 1。表示程序不成功执行。</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无注释版</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span> </span><span class="token keyword">void</span> <span class="token function">errif</span><span class="token punctuation">(</span><span class="token keyword">bool</span> condition<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">perror</span><span class="token punctuation">(</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="util-h">util.h</h3><h4 id="代码-2">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">UTIL_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">UTIL_H</span></span><span class="token keyword">void</span> <span class="token function">errif</span><span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Makefile">Makefile</h3><p>Makefile 是一个文本文件，用于描述一个或多个源代码文件之间的依赖关系以及如何编译和链接这些源代码文件。Makefile 的主要作用是用于自动化地构建和管理源代码文件的编译和部署，可以极大地提高程序员的工作效率。</p><h4 id="代码-3">代码</h4><p>注释版</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">server</span><span class="token punctuation">:</span><span class="token comment"># 反斜线表示换行，便于阅读</span>g++ util.cpp client.cpp -o client &amp;&amp; \g++ util.cpp server.cpp -o server<span class="token comment"># clean 清除上次的 make 命令产生的目标文件。为了避免称为 make 的默认目标，不成文的规矩是 clean 放在文件最后。</span><span class="token target symbol">clean</span><span class="token punctuation">:</span>rm server &amp;&amp; rm client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无注释版</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">server</span><span class="token punctuation">:</span>g++ util.cpp client.cpp -o client &amp;&amp; \g++ util.cpp server.cpp -o server<span class="token target symbol">clean</span><span class="token punctuation">:</span>rm server &amp;&amp; rm client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++服务器】day01笔记</title>
      <link href="/posts/da5f.html"/>
      <url>/posts/da5f.html</url>
      
        <content type="html"><![CDATA[<h3 id="server-cpp">server.cpp</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第一个参数：地址族（Address Family），也就是 IP 地址类型。地址族的作用就是 <strong>指明使用哪一种地址类型</strong> ，AF_LOCAL 表示使用本地地址规则来生成地址，而 AF_INET 表示使用IP地址规则来生成地址。</li></ul><p>为什么套接字要用文件描述符来表示？</p><ul><li>根据 Unix/Linux 的设计哲学，“一切皆文件”，为了实现套接字和其他文件一样的可统一管理，设计者们选择使用文件描述符来表示套接字。使用文件描述符可以把套接字“伪装”成一个普通文件，从而使得用户能够使用熟悉的文件I/O操作来读写套接字。此外，套接字也可以通过文件描述符来进行传递，从而方便不同进程之间的数据交换。</li></ul><p>为什么服务器端需要调用 bind 函数将套接字与服务器指定的 IP 地址和端口号绑定？</p><ul><li>服务器端需要 bind 操作是因为在建立 TCP 连接时，服务器端需要 <strong>监听指定的</strong> <strong>IP</strong> <strong>地址和端口号</strong> ，从而能够接收客户端的请求并返回相应的数据。</li></ul><p>listen 函数和 accept 函数会阻塞程序吗？</p><ul><li>listen 函数本身不会阻塞程序，它通常在服务器程序中作为一个被动套接字使用。一旦调用了 listen 函数，服务器套接字就可以接受客户端连接请求。调用 listen 函数之前必须首先调用 bind 函数将服务器套接字与指定的地址和端口绑定，在 bind 函数返回成功后才能调用 listen 函数。否则，listen 函数将会返回一个错误。</li><li>当客户端发起连接请求时，accept 函数会阻塞等待，直到收到客户端的连接请求后才返回一个新的套接字用于和客户端进行通信。因此，如果没有客户端连接请求到来，accept 函数会一直阻塞等待，这可能导致程序阻塞。但是，可以通过设置套接字为非阻塞模式来避免 accept 函数一直阻塞等待，同时可以通过 select、poll、epoll 等系统调用来实现多路复用，使得程序可以同时监听多个文件描述符的状态，从而更加高效地处理客户端连接请求。</li></ul><h4 id="代码：">代码：</h4><h4 id="注释版：">注释版：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span>  <span class="token comment">// 该头文件包含另一个头文件 &lt;netinet/in.h&gt;。</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// sockfd 是 socket 套接字，对外提供网络通信接口。也就是文件描述符，UNIX/Linux 中的一切都是文件，甚至网络连接也是一个文件。</span>    <span class="token comment">// 第一个参数是 IP 地址类型，现在表示使用 IPv4，AF_INET6 表示使用 IPv6 。</span>    <span class="token comment">// 第二个参数是数据传输方式，SOCK_STREAM 多用于 TCP，SOCK_DGRAM 多用于 UDP。</span>    <span class="token comment">// 第三个参数是协议，0 表示根据前面的两个参数自动推导协议类型。</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// sockaddr_in 存网络通信地址，在头文件 &lt;netinet/in.h&gt; 中定义，把 port 和 addr 分开储存在两个变量中。</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token comment">// bzero 函数将对应地址的前 n 个字节清零，在头文件 &lt;cstring&gt; 或 &lt;string.h&gt; 中定义，因为此处是写 C ，所以用后者。</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 指代协议族，在 socket 编程中只能是 AF_INET 。</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    <span class="token comment">// 存储 IP 地址，使用 in_addr 这个数据结构，实际上在 in_addr 中只有 s_addr 这一个成员。</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 存储端口号。htons 负责将主机字节顺序转换为网络字节顺序，host to net，s 表示针对两个字节（16位），还有 l，表示针对四个字节（32位）。</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// P.s. socket_in 除以上三者之外还有第四个成员，只是为了让 sockaddr 与 sockaddr_in 两个数据结构保持大小相同而保留的空字节，不使用。</span>    <span class="token comment">// 将 socket 地址与文件描述符 sockfd 绑定。定义时使用专用 socket 地址；为了便于绑定时转为通用 socket。</span>    <span class="token comment">// 专用 socket 地址表示特定的通信协议、IP 地址和端口号，而通用 socket 地址可以接收任何类型（AF_INET、AF_UNIX等）的 socket 地址。</span>    <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用 listen 函数监听这个 socket 端口 sockfd。listen 函数使用主动连接套接字变为被连接套接口，使得一个进程可以接受其它进程的请求，从而成为一个服务器进程。</span>    <span class="token comment">// SOMAXCONN 定义了系统中每一个端口最大的监听队列的长度，这是个全局的参数，默认值为 128。</span>    <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> SOMAXCONN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clnt_addr<span class="token punctuation">;</span>    <span class="token comment">// socklen_t 是一种数据类型，在 32 位机下，size_t 和 int 的长度相同，都是32 bits。socket 编程中的 accept 函数的第三个参数的长度必须和 int 的长度相同。</span>    socklen_t clnt_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 要接受一个客户端连接，需要使用 accept 函数，accept 需要写入客户端 socket 长度，所以需要定义一个类型为 socklen_t 的变量，并传入这个变量的地址。</span>    <span class="token comment">// accept 函数会阻塞当前程序，直到有一个客户端 socket 接受后程序才会往下运行。</span>    <span class="token keyword">int</span> clnt_sockfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// clnt_sockfd 是通过 accept() 接受的客户端连接的文件描述符。</span>    <span class="token comment">// inet_ntoa函数将 (Ipv4) Internet 网络地址转换为采用 Internet 标准点十进制格式的 ASCII 字符串。成功则 inet_ntoa 返回指向静态缓冲区的字符指针，否则返回 NULL。</span>    <span class="token comment">// 将一个无符号短整形数从网络字节顺序转换为主机字节顺序。网络字节顺序 NBO ：按从高到低的顺序存储，在网络上使用同一的网络字节顺序，可避免兼容性问题。</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new client fd %d! IP: %s Port: %d\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 关于listen()和accept()这一段，可以想象有人从很远的地方通过一个你在侦听 (listen()) 的端口连接 (connect()) 到你的机器。它的连接将加入到等待接受 (accept()) 的队列 中。</span><span class="token comment">// 调用 accept() 告诉它你有空闲的连接。它将返回一个新的套接字文件描述符，这样你就有两个套接字了。</span><span class="token comment">// 原来的一个还在侦听你的那个端口， 新的在准备发送 (send()) 和接收 ( recv()) 数据。这就是这个过程！</span><span class="token comment">//</span><span class="token comment">// 服务器端：</span><span class="token comment">// socket()--&gt;bind( )--&gt;listen()--&gt;accept()--&gt;read()/write()---&gt;close()</span><span class="token comment">// socket()//创建套接字</span><span class="token comment">// bind()//分配套接字地址</span><span class="token comment">// listen()//等待连接请求状态</span><span class="token comment">// accept()//允许连接</span><span class="token comment">// read()/write()//进行数据交换</span><span class="token comment">// close()//断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无注释版：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bind</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">listen</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> SOMAXCONN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> clnt_addr<span class="token punctuation">;</span>    socklen_t clnt_addr_len <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> clnt_sockfd <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new client fd %d! IP: %s Port: %d\n"</span><span class="token punctuation">,</span> clnt_sockfd<span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ntohs</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">.</span>sin_port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="client-cpp">client.cpp</h3><p>关于客户端不需要 bind 函数来为创建的 sockfd 绑定特定 IP 地址和端口号。</p><ul><li>客户端调用 socket 函数创建套接字，然后调用 connect 函数连接到远程服务器的IP地址和端口号。<strong>在执行</strong> <strong>connect</strong> <strong>函数时</strong> ，<strong>操作系统会自动分配</strong> 一个 <strong>临时的本地</strong> <strong>IP</strong> <strong>地址和本地端口号</strong> ，并将该套接字绑定到这个地址和端口上。这个本地 IP 地址通常是操作系统中可用的任意IP地址，而本地端口号是操作系统中未被占用的任意端口号。此时，客户端就可以使用这个新创建的套接字与服务器进行数据传输了。</li></ul><p>connect 函数作用和用法？</p><ul><li><p>作用：connect 函数是用于向远程服务器建立连接的函数，它的作用是在客户端套接字中建立与服务端的连接。需要注意的是，connect 函数会 <strong>阻塞等待</strong> 直到连接建立完成或出错。因此，在客户端程序中，通常需要将套接字设置为非阻塞模式或者使用多路复用技术来提高程序的效率。connect 函数还可以用于非阻塞套接字，当套接字设置为非阻塞模式时，connect 函数会立即返回，而不会阻塞等待。此时需要使用 select、poll、epoll 等函数来等待套接字变为可写状态，表示连接建立完成或出错。</p></li><li><p>用法： <code>int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</code> sockfd 表示 <strong>客户端</strong> 套接字的文件描述符，addr 和 addrlen 参数表示指向 <strong>服务端</strong> 地址信息结构体（struct sockaddr）和长度的指针。</p></li></ul><h4 id="代码：-2">代码：</h4><p>注释版：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建 socket 文件描述符</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 专用 socket 地址</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token comment">// 清空</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 设置地址族，IP 地址和端口</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 与 server.cpp 监听的端口建立连接。注意将专用 socket 地址转为通用 socket 地址。</span>    <span class="token comment">// connect 函数建立与指定套接字的连接。如果未发生错误，连接将返回零，否则返回 SOCKET_ERROR。</span>    <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 客户端:</span><span class="token comment">// socket()--&gt;connect()--&gt;read()/write()--&gt;close()</span><span class="token comment">// socket()//创建套接字</span><span class="token comment">// connect()//请求连接</span><span class="token comment">// read()/write()//进行数据交换</span><span class="token comment">// close()//断开连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无注释版：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sockfd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv_addr<span class="token punctuation">;</span>    <span class="token function">bzero</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">connect</span><span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园网认证时显示”网络连接代理服务器出现问题“的解决办法</title>
      <link href="/posts/75d8.html"/>
      <url>/posts/75d8.html</url>
      
        <content type="html"><![CDATA[<h4 id="问题：">问题：</h4><p>连接校园网后去浏览器认证时显示“网络连接代理服务器出现问题”。</p><p><img src="https://s2.loli.net/2023/04/26/EnStYiA5rJosjle.png" alt="图1"></p><h4 id="解决方法：">解决方法：</h4><ul><li><p>打开 <code>设置</code> 。找到 <code>网络和 Internet</code> 。</p><ul><li><img src="https://s2.loli.net/2023/04/26/N7kHKpo89dMQsYf.png" alt="图2"></li></ul></li><li><p>找到 <code>手动设置代理</code> 。</p><ul><li><img src="https://s2.loli.net/2023/04/26/jar7M4VIG2dcE1F.png" alt="图3"></li></ul></li><li><p>点击 <code>编辑</code> ，关闭 <code>使用代理服务器</code></p><ul><li><img src="https://s2.loli.net/2023/04/26/nuFjblotkUJ7gwc.png" alt="图4"></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】等差数列</title>
      <link href="/posts/bb9e.html"/>
      <url>/posts/bb9e.html</url>
      
        <content type="html"><![CDATA[<h4 id="欧几里得算法-——-辗转相除法">欧几里得算法 —— 辗转相除法</h4><ol><li>a 和 b 的最大公约数等于 a 和 a % b 的最大公约数。</li><li><strong>证明</strong> ：设 a = k * b + r ，则 a % b = r ；设 d 是 (a, a % b) 的公约数。那么有 d | b 和 d | r 均为 0 ，又因为 a = k * b + r ，所以 d | a 也为 0 ，可得对于 (a, a % b) 的任意公约数 d ，都有 d 是 (a, b) 的公约数。反之同样可以证明对于 (a, b) 的任意公约数 d 也是 (a, a % b) 的公约数。</li><li>求 a 和 b 的最大公约数：<code>int gcd(int a, int b) { return b ? gcd(b, a % b) : a; }</code> 。</li></ol><h4 id="最大公约数">最大公约数</h4><ol><li>若等差数列所有项均相同，则最少需要的整数就是给出的整数。</li><li>若差值不为 0 ，则项数为 <code>(Amax - Amin)/Dmax + 1</code> 。Amax 为序列中的最大项，Amin 为序列最小项。Dmax 为所有项与第一项的差值的最大公约数。</li></ol><h4 id="GCD-C-531ms">GCD C++ 531ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;using namespace std;typedef long long LL;const int N = 1e5 + 10;int n;int e[N];int gcd(int a, int b){    return b ? gcd(b, a % b) : a;}int main(){    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i ++ ) cin &gt;&gt; e[i];    sort(e + 1, e + n + 1);    int res = 0;    for (int i = 2; i &lt;= n; i ++ )     {        // 0 和任何数的最大公约数都是那个数本身        res = gcd(res, e[i] - e[1]);    }    if (res == 0) cout &lt;&lt; n;    else cout &lt;&lt; (e[n] - e[1]) / res + 1;    system("pause");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 最大公约数 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】灵能传输</title>
      <link href="/posts/196d.html"/>
      <url>/posts/196d.html</url>
      
        <content type="html"><![CDATA[<h4 id="前缀和">前缀和</h4><ol><li>对于序列 a，计算其前缀和序列 s。对序列 a 进行如下操作时，a[i−1] += a[i]，a[i+1] += a[i]，a[i] −= 2a[i]，我们可以发现对于其前缀和序列 s 而言，等价于 s[i-1] 和 s[i] 位置交换，s[i+1] 则没有变化。</li></ol><h4 id="首尾的位置不能改变">首尾的位置不能改变</h4><ol><li>在发现前缀和的性质后，我们似乎只需要将其前缀和升序排序，维护相邻两数差值绝对值的最大值即可，但是题目中要求第一个圣堂武士和最后一个圣堂武士不能被选择，这就意味着 s[0] 和 s[n] 无法被交换位置（选择 a[i]，交换的是 s[i-1] 和 s[i]）。</li><li>那么问题变为如何在不改变首尾位置的前提下，使得圣堂武士的不稳定性最小，我们可以想到前缀和序列画到坐标轴上应该是有一个波峰和一个波谷的（假如 s[0] 和 s[n] 均不为极值），为了使得前缀和每个数之间的间隙（也就是序列 a 的值）尽可能小，应当使得波谷和波峰两侧的数均匀分布。</li><li>先从 s[0] 开始，每跳一个数后取出一个数，作为从 s[0] 到极小值的跳板，s[n] 到极大值也需要依法找到合适的跳板（每隔一个数取出一个数）。</li></ol><h4 id="细节问题">细节问题</h4><ol><li>如果 s[0] &lt; s[n] ，可以直接交换两者的位置，这相当于将图形左右颠倒，不影响实际的值。</li></ol><h4 id="贪心-C-2077ms">贪心 C++ 2077ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;using namespace std;typedef long long LL;const int N = 3e5 + 10;int n;LL a[N];LL s[N];bool st[N];int main(){    int T;    cin &gt;&gt; T;    while (T -- )    {        s[0] = 0;        memset(st, false, sizeof st);        cin &gt;&gt; n;        for (int i = 1; i &lt;= n; i ++ )        {            cin &gt;&gt; a[i];            s[i] = s[i - 1] + a[i];        }                // 先记录后排序        LL s0 = s[0], sn = s[n];        if (s0 &gt; sn) swap(s0, sn);        sort(s, s + n + 1);                for (int i = 0; i &lt;= n; i ++ )        {            if (s0 == s[i])            {                s0 = i;                break;            }        }        for (int i = n; i &gt;= 0; i -- )         {            if (sn == s[i])            {                sn = i;                break;            }        }        int l = 0, r = n;        for (int i = s0; i &gt;= 0; i -= 2)         {            a[l ++ ] = s[i];            st[i] = true;        }        for (int i = sn; i &lt;= n; i += 2)        {            a[r -- ] = s[i];            st[i] = true;         }        for (int i = 0; i &lt;= n; i ++ )         {            if (!st[i]) a[l ++ ] = s[i];        }        LL res = 0;        for (int i = 1; i &lt;= n; i ++ )         {            res = max(res, abs(a[i] - a[i - 1]));        }        cout &lt;&lt; res &lt;&lt; endl;    }    system("pause");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】后缀表达式</title>
      <link href="/posts/892d.html"/>
      <url>/posts/892d.html</url>
      
        <content type="html"><![CDATA[<h4 id="关于后缀表达式（逆波兰表达式）">关于后缀表达式（逆波兰表达式）</h4><ol><li>后缀表达式计算过程：不断取出数字并压入栈中，遇到操作符时取出栈顶两个数字计算，并将结果压入栈中。</li><li>每个后缀表达式都对应一棵二叉树。树的叶子全部都是数字，中间的节点全部都是操作符。按照后续遍历的方式可以得到后缀表达式的计算过程。</li></ol><h4 id="关于贪心细节">关于贪心细节</h4><ol><li>如果 m = 0，那么所有数字只能相加。</li><li>如果 m &gt; 0，那么可以通过构造后缀表达式反转负号，使得负号的数量在 1 ~ m 之间（至少有一个负号用于反转其它负号而导致其自身无法反转）。而此时如果 n &gt; 0，也可以用同样的方式反转正号（可以将所有正号反转为负号）。第一个数前面没有操作符，所以第一个数只能加到结果中。</li></ol><h4 id="为什么可以改变符号的正负？">为什么可以改变符号的正负？</h4><ol><li>例如 <code>3 5 + 4 - 2 -</code> ，计算结果是 <code>3 + 5 - 4 - 2 = 2</code> ，而 <code>3 5 + 4 2 - -</code> 的结果是 <code>3 + 5 - (4 - 2) = 6</code> 。</li></ol><h4 id="贪心-c-639ms">贪心 c++ 639ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;using namespace std;typedef long long LL;const int N = 2e5 + 10;int n, m;int a[N];LL res;int main(){    cin &gt;&gt; n &gt;&gt; m;    int r = n + m;    for (int i = 0; i &lt;= r; ++ i)         cin &gt;&gt; a[i];        sort(a, a + n + m + 1);        if (m)     {        res -= a[0];        res += a[r];        for (int i = 1; i &lt; r; ++ i)            res += abs(a[i]);    }    else     {        for (int i = 0; i &lt;= r; i ++ ) res += a[i];    }    cout &lt;&lt; res &lt;&lt; endl;    system("pause");    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】乘积最大</title>
      <link href="/posts/664c.html"/>
      <url>/posts/664c.html</url>
      
        <content type="html"><![CDATA[<h4 id="贪心">贪心</h4><ol><li>如果 k == n ，只需要给出所有元素的乘积并取模。</li><li>如果 k &lt; n ，需要考虑 k 为奇数还是偶数。如果 k 为偶数，那么结果必然为非负。如果 k 为奇数，则存在结果为负的情况。</li><li>如果结果必然为负，那么结果的绝对值越小，结果越大。如果结果为非负数，那么结果的绝对值越大，结果越大。</li></ol><h4 id="特殊情况">特殊情况</h4><ol><li>k &lt; n 时，什么情况下结果必然为负？当 k 为奇数且所有元素均为负数时，结果必然为负数。否则只要存在一个数非负，就可以先选择该非负数，然后选择 k - 1 个负数。偶数个负数的结果为正数。</li><li>这时问题统一转化为：取出偶数个元素，并使得乘积最大（注意区分结果为正数和负数的情况）。</li></ol><h4 id="双指针">双指针</h4><ol><li>将所有元素排序。</li><li>用两个指针指向序列首尾两端，每次从首尾两端各取出两个数，比较两个数的大小，取更大的那一端的两个数。这里的更大要区分正数和负数，正数是乘积绝对值最大，负数是乘积绝对值最小。</li></ol><h4 id="贪心-双指针-261ms">贪心 + 双指针 261ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;string&gt;#include &lt;map&gt;using namespace std;typedef long long LL;const int N = 1e5 + 10, mod = 1000000009;int n, k;int a[N];int main(){    cin &gt;&gt; n &gt;&gt; k;    for (int i = 0; i &lt; n; i ++ ) cin &gt;&gt; a[i];    sort(a, a + n);    // 双指针，l 和 r 分别表示两端选择的位置。    // sign 用于区分结果最终为负数的情况（k为奇数，且 a 数组全部为负）。    int l = 0, r = n - 1, sign = 1;    // // k 为奇数    int res = 1;    if (k % 2)     {        res = a[r --];        k --;        if (res &lt; 0) sign = -1;    }    while (k)    {        // 注意，x 和 y 的值可以超过 int         LL x = (LL)a[l] * a[l + 1], y = (LL)a[r] * a[r - 1];        if (x * sign &gt; y * sign)         {            res = (LL)x % mod * res % mod;            l += 2;        }        else         {            res = (LL)y % mod * res % mod;            r -= 2;        }        k -= 2;    }    cout &lt;&lt; res;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】付账问题</title>
      <link href="/posts/92f1.html"/>
      <url>/posts/92f1.html</url>
      
        <content type="html"><![CDATA[<h4 id="账单计算">账单计算</h4><ol><li>初始时总账单除以人数即为每人应付钱数。</li><li>但由于有人没有带够钱，无法支付自己应付的钱数，所以需要后续的人为其额外支付一部分钱。</li></ol><h4 id="计算过程">计算过程</h4><ol><li>将所有人所带钱数升序排序。</li><li>计算每人 <strong>实付钱数</strong> 。如果所带钱数高于应付钱数，则实付钱数就是应付钱数。如果所带钱数不足以支付，则需要后续有人为其支付，为了使得标准差尽可能小，需要让更多的人分担这笔钱。</li></ol><h4 id="贪心-C-607ms">贪心 C++ 607ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;map&gt;#include &lt;unordered_map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 500010, M = N * 2;int n;LL sum;// 带的钱int a[N];// 实付钱long double b[N];int main(){    cin &gt;&gt; n &gt;&gt; sum;    for (int i = 1; i &lt;= n; i ++ ) scanf("%d", &amp;a[i]);    sort(a + 1, a + n + 1);        // t 表示每人应付钱数，但由于有人带不够，所以后面的人应付钱数会随之上升    long double t = (long double)sum / n;    for (int i = 1; i &lt;= n; i ++ )    {        if (a[i] &gt;= t) b[i] = t;        else         {            b[i] = a[i];            // 由于第 i 个人带的钱不够支付应付钱数，所以需要后面的人来为其分担            t += (t - a[i]) / (n - i);        }    }        long double u = 0, avg = (long double)sum / n;    for (int i = 1; i &lt;= n; i ++ ) u += (b[i] - avg) * (b[i] - avg);    printf("%.4Lf", sqrt(u / n));    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 均值不等式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】雷达设备</title>
      <link href="/posts/da85.html"/>
      <url>/posts/da85.html</url>
      
        <content type="html"><![CDATA[<h4 id="贪心思路">贪心思路</h4><ol><li>本题模型：<a href="https://www.acwing.com/problem/content/907/">区间选点</a> 。</li><li>以小岛为圆心，雷达扫描范围为半径，为每个小岛画一个圆。</li><li>如果有小岛的圆与陆地没有交集，说明无法被扫描到。否则小岛 T 与陆地的交集所形成的区间 <code>[l, r]</code> 就是雷达可安置区间，将任意一枚雷达安置在区间 <code>[l, r]</code> 内，都可以扫描到小岛 T 。</li><li>于是问题转化为求出每个小岛的雷达可安置区间，然后寻找最少需要多少个雷达可以覆盖所有区间。</li></ol><h4 id="关于实数">关于实数</h4><ol><li>由于本题计算区间涉及开方，所以雷达可安置区间的端点需要用实数。</li><li>实数一般可以直接比较大小，但比较是否相等时最好用差值的形式比较（经测试本题直接比较是否相等也是可以的AC）。</li></ol><h4 id="c-贪心-16ms">c++ 贪心 16ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;map&gt;#include &lt;unordered_map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 100010, M = N * 2;int n, d;pair&lt;double, double&gt; p[N];double get_c(int x, double y){    return sqrt(x * x - y * y);}bool cmp(pair&lt;double, double&gt; a, pair&lt;double, double&gt; b){    // 写成 if(a.y == b.y) 也可以过，但是由于实数自身存在误差，    // 所以最好用差值的方式比较是否相等    if (a.y - b.y &lt; -1e6) return a.x &lt; b.x;    return a.y &lt; b.y;}int main(){    cin &gt;&gt; n &gt;&gt; d;        bool flag = true;    for (int i = 1; i &lt;= n; i ++ )    {        int x, y;        cin &gt;&gt; x &gt;&gt; y;        if (y &gt; d)        {            flag = false;        }        double c = get_c(d, y);        p[i].x = x - c;        p[i].y = x + c;    }        if (!flag)    {        cout &lt;&lt; -1 &lt;&lt; endl;        return 0;    }    sort(p + 1, p + n + 1, cmp);    double l = -1e20;    int ans = 0;    for (int i = 1; i &lt;= n; i ++ )    {        if (p[i].x &gt; l)        {            ans ++ ;            l = p[i].y;        }    }    cout &lt;&lt; ans;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】糖果传递</title>
      <link href="/posts/5355.html"/>
      <url>/posts/5355.html</url>
      
        <content type="html"><![CDATA[<h4 id="关于本题">关于本题</h4><ol><li><p>本题前身：<a href="https://www.acwing.com/problem/content/106/">仓库选址</a> 。</p></li><li><p>如何将该题转化到仓库选址是难点。首先设未知数 <code>x[i]</code> 表示第 i 名小朋友分出的糖果数（x 可以为负数）。根据糖果的分出的方向建立一个单向无环链表。可以证明是一定无环的，因为如果有环说明一定可以让每个小朋友都少分出一部分糖果使得环消失。但是为了便于计算我们可以补上一条为零的边，使得整个链表形成一个环。</p></li><li><p>根据图示可以发现我们的目标是使得<br>$$<br>\sum_{i=1}^n |x_i|<br>$$<br>值最小。</p></li><li><p>通过推到公式可以发现第三步的求值方式与 <strong>仓库选址</strong> 相同。</p></li></ol><h4 id="图解">图解</h4><img src="https://cdn.acwing.com/media/article/image/2023/02/14/111921_948ef950ac-QQ图片20230214155926.jpg" alt="图1" style="zoom: 33%;"> <img src="https://cdn.acwing.com/media/article/image/2023/02/14/111921_989ca3e5ac-QQ图片20230214155939.jpg" alt="图2" style="zoom: 25%;"> <h4 id="贪心-C-2306ms">贪心 C++ 2306ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1000010, M = N * 2;int n;int a[N];// c[i] = avg - ∑(a1~ai) LL c[N];int main(){    cin &gt;&gt; n;    LL sum = 0;    for (int i = 1; i &lt;= n; i ++ )     {        scanf("%d", &amp;a[i]);        sum += a[i];    }    LL avg = sum / n;    for (int i = 1; i &lt; n; i ++ )    {        c[i] = c[i - 1] + (avg - a[i]);    }    // c[n] = 0;    sort(c + 1, c + n + 1);    int x = n + 1 &gt;&gt; 1;    sum = 0;    for (int i = 1; i &lt;= n; i ++ ) sum += abs(c[i] - c[x]);    cout &lt;&lt; sum;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 推公式 </tag>
            
            <tag> 中位数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】大臣的旅费</title>
      <link href="/posts/cdec.html"/>
      <url>/posts/cdec.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：大臣的旅费">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1751/">大臣的旅费</a></h4><h4 id="树的直径两种求法">树的直径两种求法</h4><ol><li><strong>贪心</strong> 。任取一点 a 作为根节点并找到树上距离点 a 最远的点 b ，然后再以点 b 为根节点，找到树上距离点 b 最远的点 c 。则点 b 与点 c 之间的距离就是树的直径。</li><li><strong>树形DP</strong> 。任取一点作为根节点，找到每个节点向下最深和次深的两条路径，对于每个点的两个路径之和维护最大值 <code>smax</code> ，最终树的直径就是 <code>smax</code> 。</li><li><strong>时间复杂度</strong> ：两种做法都是 $O(n)$ 。</li></ol><hr><h4 id="法一：树形DP">法一：树形DP</h4><h4 id="C-112ms">C++ 112ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 100010, M = N * 2;int n;LL ans;int h[N], ne[M], e[M], w[M], idx;void add(int a, int b, int c){    w[idx] = c, e[idx] = b, ne[idx] = h[a], h[a] = idx ++;}LL get_post(LL u){    return u * 10 + (1 + u) * u / 2;}LL dfs(int s, int f){    LL d1 = 0, d2 = 0;// 最大深度，次大深度    for (int i = h[s]; ~i; i = ne[i])    {        int j = e[i];        if (j == f) continue; // 遇到父节点则跳过        LL d = dfs(j, s) + w[i];        if (d &gt; d1)         {            swap(d1, d2);            swap(d1, d);        }        else d2 = max(d2, d);    }    ans = max(ans, d1 + d2);    return d1;}int main(){    cin &gt;&gt; n;    memset(h, -1, sizeof h);//    for (int i = 1; i &lt;= n; i ++ )    {        int a, b, c;        scanf("%d%d%d", &amp;a, &amp;b, &amp;c);        add(a, b, c), add(b, a, c);    }    dfs(1, -1);    cout &lt;&lt; get_post(ans) &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="法二：BFS">法二：BFS</h4><h4 id="C-177ms-如果用数组模拟-queue-用时会更少">C++ 177ms 如果用数组模拟 <code>queue</code> 用时会更少</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 100010, M = N * 2;int n, ans;int h[N], ne[M], e[M], w[M], idx;LL dist[N];bool st[N];void add(int a, int b, int c){    w[idx] = c, e[idx] = b, ne[idx] = h[a], h[a] = idx ++;}void bfs(int u){    queue&lt;int&gt; q;    q.push(u);    memset(st, false, sizeof st);    st[u] = true;    dist[u] = 0;    while (q.size())    {        int v = q.front();        q.pop();        for (int i = h[v]; ~i; i = ne[i])        {            int j = e[i];            if (st[j]) continue;                        st[j] = true;            dist[j] = dist[v] + w[i];            q.push(j);        }    }    return ;}LL get_post(LL u){    return u * 10 + (1 + u) * u / 2;}int main(){    cin &gt;&gt; n;        memset(h, -1, sizeof h);    for (int i = 1; i &lt; n; i ++ )    {        int a, b, c;        scanf("%d%d%d", &amp;a, &amp;b, &amp;c);        add(a, b, c), add(b, a, c);    }    bfs(1);    LL st = 1;    for (int i = 2; i &lt;= n; i ++ )    {        if (dist[i] &gt; dist[st]) st = i;    }        bfs(st);    st = 0;    for (int i = 1; i &lt;= n; i ++ )     {        st = max(st, dist[i]);    }    cout &lt;&lt; get_post(st);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="法三：DFS">法三：DFS</h4><h4 id="C-119ms">C++ 119ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 100010, M = N * 2;int n, ans;int h[N], ne[M], e[M], w[M], idx;LL dist[N];void add(int a, int b, int c){    w[idx] = c, e[idx] = b, ne[idx] = h[a], h[a] = idx ++;}void dfs(int s, int f, LL distance){    dist[s] = distance;    for (int i = h[s]; ~i; i = ne[i])    {        int j = e[i];        if (j == f) continue;        dfs(j, s, dist[s] + w[i]);    }    return ; }LL get_post(LL u){    return u * 10 + (1 + u) * u / 2;}int main(){    cin &gt;&gt; n;        memset(h, -1, sizeof h);    for (int i = 1; i &lt; n; i ++ )    {        int a, b, c;        scanf("%d%d%d", &amp;a, &amp;b, &amp;c);        add(a, b, c), add(b, a, c);    }    dfs(1, -1, 0);    LL st = 1;    for (int i = 2; i &lt;= n; i ++ )    {        if (dist[i] &gt; dist[st]) st = i;    }        dfs(st, -1, 0);    st = 0;    for (int i = 1; i &lt;= n; i ++ )     {        st = max(st, dist[i]);    }    cout &lt;&lt; get_post(st);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
            <tag> 树的直径 </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】单链表</title>
      <link href="/posts/6766.html"/>
      <url>/posts/6766.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：单链表">题目链接：<a href="https://www.acwing.com/problem/content/828/">单链表</a></h4><h4 id="链表">链表</h4><ol><li>h 表示头结点的位置，<code>ne[i]</code> 表示第 i 个插入的数字所处的位置， <code>e[i]</code> 表示第 i 个插入的数字的值， <code>idx</code> 表示当前链表内节点个数。</li><li>一般将 h 初始化为 -1，便于判断链表内是否为空。</li></ol><h4 id="关于-string">关于 string</h4><ol><li>由于 <code>string</code> 并非是 C 的原生类型，所以无法像直接输入整数那样方便的使用 <code>scanf</code> 函数输入  <code>string</code> 变量。</li><li>但是是可以做到让scanf输入string类型的数据。如下代码。如果输入 <code>hello</code> ，则输出 <code>he</code> ，因为只给 a 分配了两个字符的空间。</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;cstdio&gt;#include &lt;string&gt;#include&lt;iostream&gt;using namespace std;int main(){string a;a.resize(2); //需要预先分配空间scanf("%s", &amp;a[0]);cout &lt;&lt; a;return 0;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组模拟-c-158ms">数组模拟 c++ 158ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1e6 + 10;int n;int h = -1, ne[N], e[N], idx;void add_head(int x){    idx ++;    ne[idx] = h, e[idx] = x, h = idx;}void add(int k, int x){    idx ++;    ne[idx] = ne[k], ne[k] = idx, e[idx] = x;}void Delete(int k){    if (k == 0)        h = ne[h];    else ne[k] = ne[ne[k]];}int main(){    cin &gt;&gt; n;    while (n -- )    {        char op;        cin &gt;&gt; op;        // string op; // 由于 string 并非 c 的原生类型，所以不能直接输入        //scanf("%s", op);        if (op == 'H')        {            int x;             scanf("%d", &amp;x);            add_head(x);        }        else if (op == 'D')        {            int k;            scanf("%d", &amp;k);            Delete(k);        }        else         {            int k, x;            scanf("%d%d", &amp;k, &amp;x);            add(k, x);        }    }    while (h != -1)    {        printf("%d ", e[h]);        h = ne[h];    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】全球变暖</title>
      <link href="/posts/de7c.html"/>
      <url>/posts/de7c.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：全球变暖">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1750/">全球变暖</a></h4><h4 id="判断淹没">判断淹没</h4><ol><li>题目要求最后输出剩多少岛屿未被淹没，只需要统计总共多少岛屿和被淹没多少岛屿，两者之差就是答案。</li><li>如何统计岛屿总数和有多少岛屿被淹没？用 cnt 表示岛屿总数，用 ans 表示有多少岛屿 被淹没。遍历整个海域，每遇到新的岛屿就让 cnt 加 1 ，同时做 <code>BFS</code> 操作，标记该点所在岛屿的所有点，如果在标记的过程中发现有一点上下左右全部为陆地，说明该岛屿不会被完全淹没，让 ans 加 1 。</li></ol><h4 id="BFS-C-615ms">BFS C++ 615ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1e3 + 10;int n;string g[N];bool st[N][N];int dx[] = {1, 0, -1, 0}, dy[] = {0, -1, 0, 1};bool bfs(int sx, int sy){    queue&lt;PII&gt; q;    q.push({sx, sy});    st[sx][sy] = true;        bool Flag = false;    while (q.size())    {        int x = q.front().x, y = q.front().y;        q.pop();                bool flag = true;        for (int i = 0; i &lt; 4; i ++ )        {            int a = x + dx[i], b = y + dy[i];            if (a &gt;= n || b &gt;= n || a &lt; 0 || b &lt; 0 || g[a][b] == '.')             {                flag = false;                continue;            }            if (st[a][b]) continue;                        st[a][b] = true;            q.push({a, b});        }        if (flag) Flag = true;    }    return Flag;}int main(){    cin &gt;&gt; n;    for (int i = 0; i &lt; n; i ++ ) cin &gt;&gt; g[i];    int sum = 0, ans = 0;    for (int i = 0; i &lt; n; i ++ )    {        for (int j = 0; j &lt; n; j ++ )        {            if (!st[i][j] &amp;&amp; g[i][j] == '#')            {                sum ++ ;                if (bfs(i, j)) ans ++ ;            }        }    }        cout &lt;&lt; sum - ans &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
            <tag> Flood fill </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】地牢大师</title>
      <link href="/posts/2336.html"/>
      <url>/posts/2336.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：地牢大师">题目链接：<a href="https://www.acwing.com/problem/content/1098/">地牢大师</a></h4><h4 id="三维bfs">三维bfs</h4><ol><li>通常这种棋盘类的题目都是二维，虽然变为三维其实做法也一样。队列，标记数组，距离数组三大件先准备好（距离数组可以与标记数组合并，但我比较喜欢分开），然后修改一下偏移量数组即可。</li><li>改为三维后，在原来前后左右四个方向的基础上增加了上下两个方向，当在平面上移动时，第一维偏移量为 0 ；当在同一层移动时，第二、三维的偏移量为 0 。</li></ol><h3 id="bfs-c-1619ms">bfs c++ 1619ms</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1e2 + 10;int L, R, C;string g[N][N];int d[N][N][N];bool st[N][N][N];int dx[] = {0, 1, -1}, dy[] = {0, 1, 0, -1, 0}, dz[] = {0, 0, -1, 0, 1};int bfs(int sx, int sy, int sz){    memset(st, false, sizeof st);    queue&lt;pair&lt;PII, int&gt;&gt; q;    q.push({{sx, sy}, sz});    d[sx][sy][sz] = 0;    st[sx][sy][sz] = true;    while (q.size())    {        int x = q.front().x.x, y = q.front().x.y, z = q.front().y;        q.pop();        for (int i = 0; i &lt; 3; i ++ )        {            for (int j = 0; j &lt; 5; j ++ )            {                if (i == 0 &amp;&amp; j == 0) j ++ ;                if (i &amp;&amp; j) continue;                int a = x + dx[i], b = y + dy[j], c = z + dz[j];                if (a &lt; 0 || a &gt;= L || b &lt; 0 || b &gt;= R || c &lt; 0 || c &gt;= C) continue;                if (st[a][b][c] || g[a][b][c] == '#') continue;                if (g[a][b][c] == 'E') return d[x][y][z] + 1;                d[a][b][c] = d[x][y][z] + 1;                st[a][b][c] = true;                q.push({{a, b}, c});            }        }    }    return -1;}int main(){    while (cin &gt;&gt; L &gt;&gt; R &gt;&gt; C, L &amp;&amp; R &amp;&amp; C)    {        for (int i = 0; i &lt; L; i ++ )            for (int j = 0; j &lt; R; j ++ ) cin &gt;&gt; g[i][j];        bool flag = false;        for (int i = 0; i &lt; L; i ++ )        {            for (int j = 0; j &lt; R; j ++ )            {                for (int k = 0; k &lt; C; k ++ )                {                    if (g[i][j][k] == 'S')                    {                        int t = bfs(i, j, k);                        t == -1 ? printf("Trapped!\n") : printf("Escaped in %d minute(s).\n", t);                        flag = true;                        break;                     }                }                if (flag) break;            }            if (flag) break;        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】完全二叉树的权值</title>
      <link href="/posts/acf9.html"/>
      <url>/posts/acf9.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：完全二叉树的权值">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1748/">完全二叉树的权值</a></h4><h4 id="双指针">双指针</h4><ol><li>用两个指针分别指向每一层的起点和终点，枚举每一层之和，找到总和最大的最小层数。</li></ol><h4 id="前缀和">前缀和</h4><ol><li>设给定二叉树共 depth 层，前 d - 1 层（第 d 层可以为 0 ，也可以为满）满足：2<sup>0</sup> + 2<sup>1</sup> + 2<sup>2</sup> + … + 2<sup>d-1</sup> =  (2<sup>d</sup>) - 1 ，也即 2<sup>d</sup> -1 &lt;= n，可得 d &lt;= log<sub>2</sub><sup>n+1</sup> ，将底数换成 e 可得 d &lt;= (log<sub>e</sub><sup>n+1</sup>) / (log<sub>e</sub><sup>2</sup>) ， 由于这是通过前 d - 1 层得到的，所以层数depth = d + 1 。</li><li>换句话说就是计算所得层数要向上取整，因为最后一层可能不满，此时计算 $\log_2 n+1$ 会比实际层数少一层，所以要加 1 。</li><li>第 d 层的区间是 [1 &lt;&lt; (d - 1), min((1 &lt;&lt; d) - 1, n)] 。</li></ol><h4 id="本题细节">本题细节</h4><ol><li><code>log</code> 函数默认以 e 为底。</li><li>本题需要 <code>long long</code> 。 <code>int</code> 最多存大小在正负 20 亿之间的数据，也即 -2e9 ~ 2e9 之间。</li></ol><h3 id="法一：双指针">法一：双指针</h3><h4 id="c-71ms">c++ 71ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1e5 + 10;int n;int a[N];int main(){    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i ++ ) scanf("%d", &amp;a[i]);    pair&lt;LL, LL&gt; p = {0, -0x3f3f3f3f};    for (int i = 1, u = 1; i &lt;= n; i *= 2, u ++ )    {        LL sum = 0;        for (int j = i; j &lt;= i * 2 - 1 &amp;&amp; j &lt;= n; j ++ )            sum += (LL)a[j];        if (sum &gt; p.second)         {            p.second = sum;            p.first = u;        }    }    cout &lt;&lt; p.first &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="法二：前缀和">法二：前缀和</h3><h4 id="c-77ms">c++ 77ms</h4><h4 id=""></h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1e5 + 10;int n;LL s[N];int main(){    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i ++ )     {        scanf("%lld", &amp;s[i]);        s[i] += s[i - 1];    }    PII p = {0, -1e18};    int depth = log(n + 1) / log(2) + 1;    for (int d = 1; d &lt;= depth; d ++ )    {        // 第 d 层的区间是 [1 &lt;&lt; (d - 1), min((1 &lt;&lt; d) - 1, n)]        int u = (1 &lt;&lt; d) - 1;        int l = 1 &lt;&lt; (d - 1), r = min(u, n);        LL sum = s[r] - s[l - 1];        if (sum &gt; p.second)        {            p.second = sum;            p.first = d;        }    }    cout &lt;&lt; p.first;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】交换瓶子</title>
      <link href="/posts/bcd.html"/>
      <url>/posts/bcd.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：交换瓶子">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1747/">交换瓶子</a></h4><h4 id="关于题目">关于题目</h4><ol><li>相似题目： <a href="https://www.acwing.com/problem/content/1217/">小朋友排队 </a>。 由于小朋友排队这道题只能交换 <strong>相邻</strong> 的两个数字，所以交换次数最多是 $n^2$ ，具体数量等于序列逆序对的数量。</li><li>本题由于可以交换 <strong>任意两个位置</strong> 的数字，所以交换次数最多是 n - 1 。</li></ol><h4 id="置换群">置换群</h4><ol><li>将 每个点向其目标位置上的点连一条边，称这样的一个环为 <strong>置换</strong> ，序列中所有这样的置换称为一个 <strong>置换群</strong> 。</li><li>将置换中某个点与其目标位置上的点交换位置，原来的一个环将会分裂为两个新的环。如果将两个不同的置换上的点交换位置，则两个置换将合并为一个新的环。</li><li>如果所有数字都在自己的目标位置，则会得到 n 个置换，也即 n 个环。所以目标是得到 n 个环。</li><li>设所给序列初始的置换群中环的个数为 k ，由于每交换一个环中的两个位置，就会得到两个新的环，所以最少交换 n - k 次就可以得到 n 个环。</li></ol><h4 id="环的数量">环的数量</h4><ol><li>如何确定序列初始时环的数量？需要用一个标记数组，从前向后遍历序列，如果当前点没有被遍历过，说明找到一个新的环，标记该点并将该点所在环的所有点依次标记。</li></ol><h3 id="法一：暴力枚举">法一：暴力枚举</h3><h4 id="c-333ms">c++ 333ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1e4 + 10;int n;int a[N];int main(){    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i ++ ) scanf("%d", &amp;a[i]);    int sum = 0;    for (int i = 1; i &lt;= n; i ++ )    {        if (a[i] == i) continue;        for (int j = i + 1; j &lt;= n; j ++ )        {            if (a[j] == i)             {                swap(a[i], a[j]);                sum ++ ;                break;            }        }    }    cout &lt;&lt; sum &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="法二：置换群">法二：置换群</h3><h4 id="c-线性-20ms">c++ 线性 20ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 1e4 + 10;int n;int b[N];bool st[N];int main(){    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i ++ ) scanf("%d", &amp;b[i]);    int cnt = 0;    for (int i = 1; i &lt;= n; i ++ )    {        if (!st[i])         {            cnt ++ ;            for (int j = i; !st[j]; j = b[j]) st[j] = true;        }    }    cout &lt;&lt; n - cnt &lt;&lt; endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 图论 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 环 </tag>
            
            <tag> 置换群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】红与黑</title>
      <link href="/posts/9fcb.html"/>
      <url>/posts/9fcb.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：红与黑">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1746/">红与黑</a></h4><h4 id="DFS-关键点">DFS 关键点</h4><ol><li>在 <code>dfs</code> 问题中， <code>st</code> 标记数组是不可缺少的。<code>st</code> 数组的用法取决于所处理的 <code>dfs</code> 问题属于哪种模型。例如：如果是基于连通性的模型，由于我们在棋盘的内部进行搜索，每个点视为一个状态，遍历的是所有点的集合，所以需要用 <code>st</code> 数组标记遍历到的点，并且不再取消标记，防止重复遍历到同一点；如果是其它 <code>DFS</code> 问题，我们将整个棋盘所有点的集合视为一个状态，搜索当前状态能否转移到目标状态，在搜索当前状态的一个分支前需要先将当前状态标记，搜索完该分支后，需要将当前状态标记取消再搜索当前状态的下一个分支。<code>st</code> 标记的取消与否影响到我们是否可以回溯。</li><li><strong>是否需要恢复现场本质上取决我们搜索下一个状态时，当前状态是否相同</strong> 。如果当前状态相同，就不用恢复现场。例如从棋盘上的某个点走到相邻点，无论走哪个相邻点，当前点都必须走到，所以不用恢复现场。如果当前状态不同，就需要恢复现场。例如搜索棋盘染色的不同状态时，起始状态棋盘是没有染过色的，我们搜索完将第一个格子染色的分支后，就需要先将第一个格子的标记取消，再搜索第一个格子不染色第二个格子染色的分支。</li></ol><h4 id="法一：dfs-32ms">法一：dfs 32ms</h4><h3 id="c">c++</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 20 + 10;string g[N];int r, c, ans;int dx[] = {1, 0, -1, 0}, dy[] = {0, -1, 0, 1};bool st[N][N];int dfs(int x, int y){    //if (g[x][y] == '#') return 0;    int sum = 1;    for (int i = 0; i &lt; 4; i ++ )    {        int a = x + dx[i], b = y + dy[i];        if (a &lt; 0 || a &gt;= r || b &lt; 0 || b &gt;= c) continue;        if (st[a][b] || g[a][b] == '#') continue;        st[a][b] = true;        sum += dfs(a, b);    }    return sum;}int main(){    while (scanf("%d%d", &amp;c, &amp;r), r &amp;&amp; c)    {        for (int i = 0; i &lt; r; i ++ ) cin &gt;&gt; g[i];        for (int i = 0; i &lt; r; i ++ )        {            for (int j = 0; j &lt; c; j ++ )            {                if (g[i][j] == '@')                {                    st[i][j] = true;                    cout &lt;&lt; dfs(i, j) &lt;&lt; endl;                    break;                }            }        }        memset(st, false, sizeof st);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="法二：bfs-51ms">法二：bfs 51ms</h4><h3 id="c-2">c++</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 20 + 10;string g[N];int r, c, ans;int dx[] = {1, 0, -1, 0}, dy[] = {0, -1, 0, 1};bool st[N][N];int bfs(int sx, int sy){    memset(st, false, sizeof st);    queue&lt;PII&gt; q;    q.push({sx, sy});    st[sx][sy] = true;    int sum = 1;    while (q.size())    {        int x = q.front().x, y = q.front().y;        q.pop();        for (int i = 0; i &lt; 4; i ++ )        {            int a = x + dx[i], b = y + dy[i];            if (a &gt;= 0 &amp;&amp; a &lt; r &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; c &amp;&amp; g[a][b] != '#' &amp;&amp; !st[a][b])            {                sum ++ ;                q.push({a, b});                st[a][b] = true;            }        }    }    return sum;}int main(){    while (scanf("%d%d", &amp;c, &amp;r), r &amp;&amp; c)    {        for (int i = 0; i &lt; r; i ++ ) cin &gt;&gt; g[i];        for (int i = 0; i &lt; r; i ++ )        {            for (int j = 0; j &lt; c; j ++ )            {                if (g[i][j] == '@')                {                    cout &lt;&lt; bfs(i, j) &lt;&lt; endl;                    break;                }            }        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> DFS </tag>
            
            <tag> Flood Fill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】献给阿尔吉侬的花束</title>
      <link href="/posts/cd8a.html"/>
      <url>/posts/cd8a.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：献给阿尔吉侬的花束">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1745/">献给阿尔吉侬的花束</a></h4><h4 id="BFS">BFS</h4><ol><li>宽度优先遍历，适合有四个方向的棋盘类最短路问题，关键在于所有点之间的距离必须相同。</li><li>一般所需要的数据结构有：队列，标记数组，距离数据。通常标记数组可省略，看个人习惯。</li></ol><h4 id="BFS-C-117ms">BFS C++ 117ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;#include &lt;queue&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;#define x first#define y secondconst int N = 200 + 10;string g[N];int r, c;int dx[] = {1, 0, -1, 0}, dy[] = {0, -1, 0, 1};bool st[N][N];int d[N][N];int bfs(int sx, int sy){    int u = 1;    queue&lt;PII&gt; q;    q.push({sx, sy});    d[sx][sy] = 0;        while (q.size())    {        int x = q.front().x, y = q.front().y;        q.pop();        for (int i = 0; i &lt; 4; i ++ )        {            int a = x + dx[i], b = y + dy[i];            if (a &gt;= 0 &amp;&amp; a &lt; r &amp;&amp; b &gt;= 0 &amp;&amp; b &lt; c &amp;&amp; g[a][b] != '#' &amp;&amp; !st[a][b])            {                st[a][b] = true;                if (g[a][b] == 'E')                {                    return d[x][y] + 1;                }                q.push({a, b});                d[a][b] = d[x][y] + 1;            }        }    }    return -1;}int main(){    int T;    cin &gt;&gt; T;    while (T -- )    {        cin &gt;&gt; r &gt;&gt; c;        memset(st, false, sizeof st);        bool flag = false;        int x, y;        for (int i = 0; i &lt; r; i ++ )        {            cin &gt;&gt; g[i];            if (flag == false)            {                for (int j = 0; j &lt; g[i].size(); j ++ )                {                    if (g[i][j] == 'S')                     {                        x = i, y = j;                        flag = true;                    }                }            }        }        int ans = bfs(x, y);        ans == -1 ? cout &lt;&lt; "oop!" &lt;&lt; endl : cout &lt;&lt; ans &lt;&lt; endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】日志统计</title>
      <link href="/posts/e63e.html"/>
      <url>/posts/e63e.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：日志统计">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1744/">日志统计</a></h4><h4 id="算法一">算法一</h4><h5 id="枚举-粗略估计-O-n2">(枚举)  粗略估计 O(n<sup>2</sup>)</h5><ol><li>首先这是偏暴力做法，如果出题人想卡也是可以卡掉的。由于第二层循环只在两篇相同文章点赞时刻之差大于等于 D 时，或者遇到两篇编号不同的文章时退出，所以只需要将 N K D 全部设为 1e5 并且所有的文章编号相同，那么该做法就退化到 $O(n^2)$ 了。</li><li>将文章编号作为第一关键字，点赞时刻作为第二关键字排序。对于每篇文章的点赞时刻，枚举后续相同文章中点赞时刻之差小于 D 的文章数，如果发现某篇文章符合条件且没有被记录过，则输出该文章编号并记录。</li></ol><h4 id="C-代码">C++ 代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;const int N = 1e5 + 10;// first编号，second时刻PII p[N];int n, d, k;int cnt[N];bool st[N];int main(){    cin &gt;&gt; n &gt;&gt; d &gt;&gt; k;    for (int i = 1; i &lt;= n; i ++ )    {        cin &gt;&gt; p[i].second &gt;&gt; p[i].first;    }    sort(p + 1, p + n + 1);    for (int i = 1; i &lt;= n;i ++ )    {        cnt[i] = 1;        for (int j = i + 1; j &lt;= n; j ++ )        {            if (p[j].first != p[j - 1].first)                break;            if (p[j].second - p[i].second &lt; d) cnt[i] ++;            else break;        }        if (cnt[i] &gt;= k &amp;&amp; !st[p[i].first])        {            st[p[i].first] = true;            cout &lt;&lt; p[i].first &lt;&lt; endl;        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="算法二">算法二</h3><h5 id="双指针-线性时间复杂度-O-n">双指针 线性时间复杂度 O(n)</h5><ol><li>双指针算法是一种思想，与指针没有关系。这里的双指针是指有两个指向变量指向同一个数组的下标。一般只有具有 <strong>单调性</strong> 的题目才能用双指针算法。</li><li>考虑枚举每一个长度为 D 的时间段，查看当前枚举的时间段内每篇帖子被点赞多少次，记录符合条件的热帖。我们可以发现，由于每个时间段的起点是依次递增的，所以相邻两个时间段只有起点和终点不同，中间有 D - 2 个时刻是重合的，我们可以用 i 指向当前枚举时间段的终点，j 指向当前枚举时间段的起点，每当发现两个时刻之差大于等于 D ，则让 j 向后移动一格。由于 i 和 j 都是单调递增的，所以最多只会遍历两遍，所以时间复杂度是线性的。</li></ol><h4 id="C-代码-2">C++ 代码</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;const int N = 1e5 + 10;// first编号，second时刻PII p[N];int n, d, k;int cnt[N];bool st[N];int main(){    cin &gt;&gt; n &gt;&gt; d &gt;&gt; k;    for (int i = 1; i &lt;= n; i ++ )    {        cin &gt;&gt; p[i].second &gt;&gt; p[i].first;    }    sort(p + 1, p + n + 1);    for (int i = 1; i &lt;= n;i ++ )    {        cnt[i] = 1;        for (int j = i + 1; j &lt;= n; j ++ )        {            if (p[j].first != p[j - 1].first)                break;            if (p[j].second - p[i].second &lt; d) cnt[i] ++;            else break;        }        if (cnt[i] &gt;= k &amp;&amp; !st[p[i].first])        {            st[p[i].first] = true;            cout &lt;&lt; p[i].first &lt;&lt; endl;        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Visual Studio项目配置SDL库</title>
      <link href="/posts/377b.html"/>
      <url>/posts/377b.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>Visual Studio版本：2022</p><p>SDL版本：SDL2-2.24.0</p></blockquote><h3 id="一、下载SDL">一、下载SDL</h3><ul><li><p>下载地址:<a href="https://wwbo.lanzouo.com/iPYcY0n98wbe">我是链接</a>  密码:6h37</p></li><li><p>将压缩包解压，后续会用到。</p></li></ul><h3 id="二、配置环境">二、配置环境</h3><h4 id="1-新建空项目">1.新建空项目</h4><ul><li>打开VS并新建空项目。</li></ul><p><img src="https://s2.loli.net/2023/02/19/DsOGcC2vRl74w6k.png" alt="image-20230211175737788.png"></p><h4 id="2-项目名称与文件位置">2.项目名称与文件位置</h4><ul><li><p>项目名称可以任意，项目位置最好选择 <strong>默认</strong> 。项目位置后续会用到。</p><p><img src="https://s2.loli.net/2023/02/19/fUMaCHF1Z9pdA4t.png" alt="image-20230211180037542.png"></p></li></ul><h4 id="3-放入SDL库">3.放入SDL库</h4><ul><li>找到新创建的项目所在文件夹，放入解压缩后的SDL文件夹。</li></ul><p><img src="https://s2.loli.net/2023/02/19/DYh9gPWtbEiU4xZ.png" alt="image-20230211180509540.png"></p><h4 id="4-更改属性">4.更改属性</h4><ul><li>点击 <code>项目</code> -&gt; <code>属性</code> ，在 <code>配置属性</code> 中找到 <code>C/C++</code> ，在 <code>附加包含目录</code> 后填入解压缩后SDL文件内的include文件，点击右下角 <code>应用</code> -&gt; <code>确定</code>。</li></ul><p><img src="https://s2.loli.net/2023/02/19/2zustmoJWZSfQL9.png" alt="image-20230211181056294.png"></p><p><img src="https://s2.loli.net/2023/02/19/x7bTyqiEgtQaodB.png" alt="image-20230211181213883.png"></p><h4 id="五、引入lib文件">五、引入lib文件</h4><ul><li>在 <code>解决方案资源管理器</code> 中找到 <code>头文件</code> ，鼠标右键并选择 <code>添加</code> -&gt; <code>现有项</code> ，找到SDL解压缩后的文件夹，将lib文件夹下的三个lib文件引入。</li></ul><p><img src="https://s2.loli.net/2023/02/19/tOzvPDZN3Xlekmc.png" alt="image-20230211181759873.png"></p><p><img src="https://s2.loli.net/2023/02/19/zA8YrhygRE7Ho45.png" alt="image-20230211181838823.png"></p><h4 id="六、测试代码">六、测试代码</h4><ul><li><p>在 <code>源文件</code> 下添加新建项，后缀为 <code>.c</code> 。</p></li><li><p>运行如下代码。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"SDL.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">SDL_Init</span><span class="token punctuation">(</span>SDL_INIT_EVERYTHING<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SDL初始化失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"SDL初始化成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://s2.loli.net/2023/02/19/D2BMczZLmCn3SOX.png" alt="image-20230211182130729.png"></p><h4 id="七、添加dll文件">七、添加dll文件</h4><ul><li>将解压缩后的SDL库文件中，lib文件夹里后缀名为dll的文件移动到debug文件里。</li></ul><p><img src="https://s2.loli.net/2023/02/19/Aeh4P3ZtfLWrNF2.png" alt="image-20230211182625544.png"></p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SDL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】最大数</title>
      <link href="/posts/cb73.html"/>
      <url>/posts/cb73.html</url>
      
        <content type="html"><![CDATA[<h3 id="线段树"><code>线段树</code></h3><h4 id="线段树-2">线段树</h4><ol><li>线段树是在一维数组上，通过堆的方式实现的树状数据结构。主要支持区间修改、区间查询两大操作，其余的单点修改和单点查询等可以视为区间操作的简单化。</li></ol><h4 id="题目链接：最大数">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1607/">最大数</a></h4><h4 id="线段树-3">线段树</h4><ol><li>线段树是在一维数组上，通过堆的方式实现的树状数据结构。主要支持区间修改、区间查询两大操作，其余的单点修改和单点查询等可以视为区间操作的简单化。</li><li>为了实现上述操作，线段树有两个最基本的函数：<code>pushup</code> 和 <code>pushdow</code> ，前者通过子节点修改父节点的信息，后者通过父节点向下递归修改子节点的信息。通常 <code>pushup</code> 会用在建树函数或修改函数的回溯过程中用到。</li><li>通常情况下线段树会包含四个基本函数：①.<code>pushup</code> 函数：。②.<code>build</code> 函数：将一段区间初始化为线段树。③.<code>modify</code> 函数：修改单点或区间信息，如果是后者，则需要用到 <code>pushdown</code> 函数和懒标记（ <code>lazy</code> ）。④.<code>query</code> 函数：查询某段区间的信息。</li><li>线段树是一棵满二叉树，若某个节点的编号为 x ，则其父节点的编号为 <code>x &gt;&gt; 1</code>，其左右子节点的编号分别为 <code>x &lt;&lt; 1</code> 和 <code>x &lt;&lt; 1 | 1</code> 。在开辟空间时需要开 <code>4 * N</code> 的空间，以防溢出（实际所用的空间一定严格小于 <code>4 * N</code> ）。</li></ol><h4 id="本题细节">本题细节</h4><ol><li>由于最多有 m 个询问，所以线段树所维护的原序列长度最多为 m 。</li><li>在查询和修改函数中，<code>mid</code> 都是指当前节点所维护区间的中点，而不是询问的目标区间中点。</li><li>查询函数在递归是，目标区间的左右端点不能改变，必须一直是 <code>[l, r]</code> ，否则会导致查询的区间长度异常。原因：这里的 <code>mid</code> 是通过 <code>tr[u].l + tr[u].r &gt;&gt; 1</code> 算出来的，不能确定  <code>mid</code> 和 l、r 的大小关系，例如我要查询的目标区间是 <code>[3, 4]</code> ，从 <code>[1, 10]</code> 中找，由于不符合查询函数的第一个 <code>if</code> 条件，需要递归，如果 <code>else</code> 里的第一个 <code>if</code> 对应的区间改成 <code>[l,mid]</code> ，那查询的范围就成 <code>[3,5]</code> 了。</li><li>查询完后务必记得 <code>n ++ ;</code> 。</li><li>由于本题中 <code>build</code> 函数建立的是一棵空线段树，所以不需要 <code>pushup</code> 操作。</li><li>插入新的数据时，需要提前转为 <code>long long</code> 类型。</li></ol><h4 id="线段树-c-705ms">线段树 c++ 705ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;const int N = 2e5 + 5;int m, p;struct Node{    int l, r;    int v; // 区间[l, r]中的最大值}tr[N * 4];// 由子节点的信息，来计算父节点的信息void pushup(int u){    tr[u].v = max(tr[u &lt;&lt; 1].v, tr[u &lt;&lt; 1 | 1].v);}// u是线段树每个节点在一维数组中的映射// l和r表示该节点所包含原序列的区间左右端点void build(int u, int l, int r){    tr[u] = {l, r};    if (l == r) return ;    int mid = l + r &gt;&gt; 1;    build(u &lt;&lt; 1, l, mid), build(u &lt;&lt; 1 | 1, mid + 1, r);}// u是线段树每个节点在一维数组中的映射// l和r表示所要查询的目标区间int query(int u, int l, int r){    // 如果当前节点的左右端点在目标区间内部，则直接返回    if (l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r) return tr[u].v;    else     {        // 注意mid由tr[u].l和tr[u].r计算得到        int mid = tr[u].l + tr[u].r &gt;&gt; 1;        int v = 0;        if (l &lt;= mid) v = query(u &lt;&lt; 1, l, r);        if (r &gt; mid) v = max(v, query(u &lt;&lt; 1 | 1, l, r));        return v;    }}// 单点修改，将原序列下标为x的点的值修改为yvoid modify(int u, int x, int y){    // 首先确保遍历到叶节点，其次该叶节点要对应修改点的下标    if (tr[u].l == tr[u].r &amp;&amp; tr[u].l == x) tr[u].v = y;    else     {        int mid = tr[u].l + tr[u].r &gt;&gt; 1;        if (x &gt; mid) modify(u &lt;&lt; 1 | 1, x, y);        else modify(u &lt;&lt; 1, x, y);        // 修改完叶节点的值后要回溯修改父节点        pushup(u);    }}int main(){    cin &gt;&gt; m &gt;&gt; p;    build(1, 1, m);    int n = 0, a = 0;    while (m -- )    {        char op[2];        int t;        scanf("%s%d", op, &amp;t);        if (*op == 'Q')        {            a = query(1, n - t + 1, n);            printf("%d\n", a);        }        else         {            t = ((LL)a + t) % p;            modify(1, n + 1, t);            // 务必记得n+1            n ++ ;        }    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】航班时间</title>
      <link href="/posts/b619.html"/>
      <url>/posts/b619.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：航班时间">题目链接：<a href="https://www.acwing.com/activity/content/problem/content/1604/">航班时间</a></h4><h4 id="思路">思路</h4><ol><li>设 x 为时差， A 为第一次起降时间差， B 为第二次起降时间差，可得 <code>A + x = B - x</code> ，推出： <code>(A + B) / 2 = A + x</code> 。</li><li>为了便于计算，可以先将所有的时间统一单位为秒，计算出两个时间相差秒数后，再转为时分秒的格式。</li></ol><h4 id="输入问题">输入问题</h4><ol><li><code>scanf</code> 会自动忽略输入字符串的空白字符（空格、tab、回车等），直到下一个非空白字符。</li><li>若遇到的非空白字符与格式化字符串匹配，则读入（例如： <code>scanf("%d(+%d)", &amp;a, &amp;b);</code> ，若输入1(+2)则可以读入）。</li><li><strong>若遇到的非空白字符与格式化字符串不匹配，则结束此次读取</strong> ，并将该非空白字符回存到缓存中，在下一次读取函数被调用时读取（如 <code>scanf</code> 、 <code>getchar</code> 等）。</li></ol><h4 id="模拟24ms">模拟24ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;const int N = 1e5 + 5;// 返回第一次起降所用秒数int readtime(){    int a1, b1, c1, a2, b2, c2, d = 0;    // 如果读完c2后发现没有形如(+2)这样的字符串，则结束本次读入    scanf("%d:%d:%d %d:%d:%d (+%d)", &amp;a1, &amp;b1, &amp;c1, &amp;a2, &amp;b2, &amp;c2, &amp;d);        int sum = (a2 + d * 24) * 3600 + b2 * 60 + c2 - (a1 * 3600 + b1 * 60 + c1);    return sum;}void myprint(int a, int b){    int c = a + b &gt;&gt; 1;    int x = c /60 / 60, y = c / 60 % 60, z = c % 60;    printf("%02d:%02d:%02d\n", x, y, z);    return ;}int main(){    int T;    cin &gt;&gt; T;    while (T -- )    {        // 设x为时差，A为第一次起降时间差，B为第二次起降时间差        // A+x=B-x，可得 (A+B)/2=A+x        int a = readtime();        int b = readtime();        myprint(a, b);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Derby数据库安装与使用</title>
      <link href="/posts/9ae9.html"/>
      <url>/posts/9ae9.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>环境配置只是开始，代码上的创作才是灵魂。</p><p>JDK版本：1.8.0_341</p><p>Derby版本：10.14.2.0</p></blockquote><h3 id="一、Derby安装">一、Derby安装</h3><h4 id="1-打开-cmd">1. 打开 cmd</h4><ul><li>键盘按下 <code>Windows + R</code> 打开本地 <code>cmd</code> （命令提示符）或 <code>windows powershell</code> 。<img src="https://img-blog.csdnimg.cn/img_convert/2659f09b703e30591b02212d2e58454e.png" alt="1.1 运行"></li></ul><h4 id="2-查询-jdk-版本">2. 查询 jdk 版本</h4><ul><li>输入 <code>java -version</code> 命令查询本地 <code>jdk</code> 版本。<img src="https://img-blog.csdnimg.cn/img_convert/625f682075435a639d38c6ec9e52665d.png" alt="1.2 jdk"></li></ul><h4 id="3-下载压缩包">3. 下载压缩包</h4><ul><li>根据 <code>jdk</code> 版本下载对应 <code>Derby</code> 压缩包。如果你的 <code>jdk</code> 和我一样就下载 <code>10.14.2.0</code> 版本。</li><li>下载地址：<a href="https://db.apache.org/derby/derby_downloads.html">我是链接</a><img src="https://img-blog.csdnimg.cn/img_convert/6b1bc6b42ca256599f3014da250463fa.png" alt="1.3 Derby"></li></ul><h4 id="4-Derby-解压缩">4. Derby 解压缩</h4><ul><li>将 <code>Derby</code> 压缩包解压，推荐解压到 <code>jdk</code> 文件目录下。<img src="https://img-blog.csdnimg.cn/img_convert/de6617f02a32a7f028f76bb3e24b3ff8.png" alt="1.4 解压缩"></li></ul><h4 id="5-配置环境变量">5. 配置环境变量</h4><blockquote><p><strong>请提前将需要修改的变量备份！这不是演习，这不是演习！</strong> 。</p></blockquote><ol><li><p>鼠标右键<strong>我的电脑</strong> -&gt; 鼠标左键 <strong>属性</strong> -&gt; 找到 <strong>高级环境变量</strong> 。</p></li><li><p>在系统变量中添加变量 <code>DERBY_HOME</code> ，值为 <strong>你自己的derby压缩包的解压路径</strong> 。如果你不确定，那么就重新执行第4步，并按我的 <code>DERBY_HOME</code> 变量值解压，这样你可以直接填我的 <code>DERBY_HOME</code> 值。<img src="https://img-blog.csdnimg.cn/bb7aa3b547f7486987ac5122b0306fa9.png" alt="1.5.1 DERBY_HOME"></p></li><li><p>在系统变量中添加变量 <code>CLASSPATH</code> ，值为 <code>%DERBY_HOME%\lib\derby.jar;%DERBY_HOME%\lib\derbyclient.jar;%DERBY_HOME%\lib\derbytools.jar;%DERBY_HOME%\lib\derbynet.jar</code> 。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ee0bbc4939d5df0323a7854693a1645a.png" alt="1.5.2 CLASSPATH"></p><ul><li><strong>注意</strong>：<ul><li>如果你本地 <code>CLASSPSTH</code> 已经有值，<strong>请添加在原值后，请勿直接覆盖原值！注意与原值分号隔开。</strong>  。</li><li>变量值最后没有 <code>;</code> ，请勿手动添加分号。</li></ul></li></ul></li><li><p>在用户变量中添加 <code>PATH</code> ，值为 <code>%DERBY_HOME%\bin</code> 。<img src="https://img-blog.csdnimg.cn/img_convert/df2feea47b6342912a4f00e2c2d5aef9.png" alt="1.5.3 PATH"><img src="https://img-blog.csdnimg.cn/img_convert/fcd9c89e69fbf06cc53c64d6dbb8a1d5.png" alt="1.5.4 PATH"></p></li></ol><h4 id="6-检查安装">6. 检查安装</h4><blockquote><p>至此，<code>Derby</code> 配置结束。只需要检查一下自己的数据库是否安装成功。</p></blockquote><ol><li><p>在 <code>cmd</code> 中输入命令 <code>java org.apache.derby.tools.sysinfo</code> 检查是否安装成功。</p></li><li><p>如果出现下图说明安装成功（可不与我完全一致，但至少应该显示 <code>Derby</code> 基本信息），否则请重新检查自己的环境变量是否有语法上的填写错误（诸如多余的空格，分号之类问题很难察觉），如果填写没有问题请重新检查自己的安装路径是否与环境变量的值一致。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9479c87c8e9e5a8c9d8630a3d679229a.png" alt="1.6 检查"></p></li></ol><h3 id="二、进入数据库">二、进入数据库</h3><h4 id="方法一：命令行进入">方法一：命令行进入</h4><ol><li><p>键盘按下 <code>Windows + R</code> 打开本地 <code>cmd</code> （命令提示符）或 <code>windows powershell</code> 。<img src="https://img-blog.csdnimg.cn/img_convert/2659f09b703e30591b02212d2e58454e.png" alt="2.1 运行"></p></li><li><p>输入命令 <code>java org.apache.derby.tools.ij</code>  进入 <code>ij</code> 客户端。需要注意的是，在哪个路径下打开 <code>Derby</code> 客户端，那么在新建数据库时就会默认保存在当前路径下。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7ae84dadc6152df79f8b22b59e862ccc.png" alt="2.2 ij"></p></li></ol><h4 id="方法二：直接运行">方法二：直接运行</h4><blockquote><p>Derby是开源的、嵌入式的Java数据库程序，ij是Derby提供的客户端工具，相当于其他数据库提供的sqlplus工具。</p><p>ij是纯Java的程序，不用安装，使用起来就像运行普通的Java应用程序一样。</p></blockquote><ol><li><p>找到 <code>Derby</code> 解压缩后的文件，打开 <code>db-derby-10.14.2.0-bin\bin</code> 目录下的 <code>ij.bat</code> 可执行文件。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/da9ab3bfff1bcb91b04e5a85c45e48c2.png" alt="2.3 bat"></p></li></ol><h3 id="三、JDBC">三、JDBC</h3><blockquote><p>“JAVA数据库连接“ 简称为 JDBC ，就是指在自己的编译器上连接创建好的数据库，从而达到更好的运行体验。</p><p>编译器：IntelliJ IDEA 2022.2.3</p></blockquote><h4 id="1-新建项目">1. 新建项目</h4><ul><li>打开编译器，点击 <strong>文件</strong> -&gt; <strong>新建</strong> -&gt; <strong>项目</strong> 。<img src="https://img-blog.csdnimg.cn/img_convert/5051d99df9b5e3b3bdc0dce2300cee32.png" alt="3.1 项目"></li></ul><h4 id="2-导入数据库的包">2. 导入数据库的包</h4><blockquote><p>JDBC API 主要位于 JDK 中的 java.sql包中，提供了诸如查询和更新数据库中数据的方法。</p></blockquote><ol><li>点击 <strong>文件</strong> -&gt; <strong>项目结构</strong> 。</li></ol><p><img src="https://img-blog.csdnimg.cn/img_convert/d40b2726f63425f74c7e3563a2348d10.png" alt="3.2 结构"></p><ol start="2"><li><p>找到 <strong>项目设置</strong> 下的 <strong>库</strong> ，点击 <strong>新建项目库</strong> 。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ff789d9b57a16b26c169aba024d1ba24.png" alt="3.3 库"></p></li><li><p><strong>依次</strong> 导入三个 <code>jar</code> 包。路径：<code>D:\JDK_Eclipse\db-derby-10.14.2.0-bin\lib</code> 。包名依次为：<code>derby.jar</code> 、<code> derbyclient.jar</code> 和 <code> derbynet.jar</code> 。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/14d00f62216f7b32b27f3e177861d38c.png" alt="3.4 导入"></p></li></ol><h4 id="3-编程前的工作">3. 编程前的工作</h4><blockquote><p>至此，所有的准备工作都已做完，之后就可以在自己的编译器上愉快的玩耍啦~</p></blockquote><ol><li><p>引入 <code>sql</code> 包：<code>import java.sql.*;</code> 。</p></li><li><p>加载 <strong>数据库驱动</strong> 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 加载驱动</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.derby.jdbc.EmbeddedDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取 <strong>数据库连接</strong> 。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 用于获取数据库连接</span><span class="token class-name">Connection</span> con <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// 连接数据库</span><span class="token keyword">try</span><span class="token punctuation">{</span>    con <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:derby:D:\\JDK_Eclipse\\"</span> <span class="token operator">+</span>            <span class="token string">"db-derby-10.14.2.0-bin\\22_12_5java实训\\山东工商学院; create = true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件安装与环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
            <tag> Derby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java程序设计》实验十-输入输出流</title>
      <link href="/posts/e48d.html"/>
      <url>/posts/e48d.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote><p>记录一下做过的题目，虽然作为入门题目很简单，不过还是可以学到东西的hh。</p></blockquote><h3 id="程序设计一-上机实践">程序设计一 上机实践</h3><h4 id="题目："><strong>题目：</strong></h4><blockquote><p>完成上机实践10.13的上机实践内容，请给每一条语句加上注释</p></blockquote><h4 id="AnalysisResult类">AnalysisResult类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验十<span class="token punctuation">.</span>上机实践<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnalysisResult</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> fRead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/score.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建文件对象，读对象</span>        <span class="token class-name">File</span> fWrite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"socreAnalysis.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//写的文件对象</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">Writer</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>fWrite<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//以尾加方式创建指向文件fWrite的out流</span>            <span class="token class-name">BufferedWriter</span> bufferWrite <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建指向out的bufferWrite流</span>            <span class="token class-name">Reader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>fRead<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建指向文件的fRead的in流</span>            <span class="token class-name">BufferedReader</span> bufferRead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建指向in的bufferRead流</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">=</span>bufferRead<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//如果还有数据可以读，进入循环</span>                <span class="token keyword">double</span> totalScore<span class="token operator">=</span> <span class="token class-name">Fenxi</span><span class="token punctuation">.</span><span class="token function">getTotalScore</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用Fenxi类的方法求得学生总分</span>                str <span class="token operator">=</span> str<span class="token operator">+</span><span class="token string">" 总分:"</span><span class="token operator">+</span>totalScore<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//在本地编译器输出</span>                bufferWrite<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//写出去</span>                bufferWrite<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//插入一个换行符</span>            <span class="token punctuation">}</span>            bufferRead<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭bufferRead流</span>            bufferWrite<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//关闭bufferWrite流</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Fenxi类">Fenxi类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验十<span class="token punctuation">.</span>上机实践<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">InputMismatchException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fenxi</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getTotalScore</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">//得到总分</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"[^0123456789.]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//Scanner对象可以调用useDelimiter方法，将一个正则表达式作为分隔标记</span>                                                          <span class="token comment">//和正则表达式匹配的字符都是分割标记</span>                                                         <span class="token comment">//正则表达式，是一个含有特殊意义的字符串</span>        <span class="token keyword">double</span> totalScore<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//如果还有数据要读，进入循环</span>            <span class="token keyword">try</span><span class="token punctuation">{</span>                <span class="token keyword">double</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                totalScore <span class="token operator">=</span> totalScore<span class="token operator">+</span>score<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InputMismatchException</span> exp<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//如果有异常，执行下面的内容</span>                <span class="token class-name">String</span> t <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//scanner此时读的是s中的内容</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> totalScore<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="程序设计二-列出文件名称">程序设计二 列出文件名称</h3><h4 id="题目：-2"><strong>题目：</strong></h4><blockquote><p>请完成程序设计：列出当前文件夹下全部单位文件名称：</p><p>文件存储目录为：“C:\ch10”；</p><p>文件扩展名为：“.txt”。</p><p>ch10文件夹目录如下：</p><p><img src="https://s2.loli.net/2022/10/23/tuTx3HpjV2kcgaG.png" alt="image.png"></p></blockquote><h4 id="RFname类">RFname类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验十<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RFname</span> <span class="token punctuation">{</span>    <span class="token comment">//如果文件夹下嵌套文件夹，就用递归的方式输出</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showList</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是目录</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件夹:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> listFiles <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取当前路径下的所有文件和目录,返回File对象数组</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">File</span> f <span class="token operator">:</span> listFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//将目录内的内容对象化并遍历</span>                <span class="token function">showList</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是文件</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件:"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/ch10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showList</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tips">tips</h4><ul><li><p>请提前在指定目下新建文件，并将学生分数填入。</p></li><li><p><code>sorce.txt</code> 文件内容如下：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">姓名:张三,数学72分,物理67分,英语70分.姓名:李四,数学92分,物理67分,英语70分.姓名:周五,数学68分,物理67分,英语70分.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="程序设计三">程序设计三</h3><h4 id="题目：-3"><strong>题目：</strong></h4><blockquote><p>请完成程序设计：模拟完成物资供给单位信息，前端及服务端的信息交互过程：</p><p>（1）创建一个信息存储类，属性为：“单位性质”，“单位名称”、“联系电话”、“单位地址”；</p><p>（2）创建单位信息对象“山东工商学院”；</p><p>（3）将山东工商学院单位信息存储于本地“C:\ch10\山东工商学院单位信息.txt”文件中；</p><p>（4）读取“C:\ch10\山东工商学院单位信息.txt”文件，分别显示山东工商学院单位全部信息内容。</p></blockquote><h4 id="xinxijiaohu类">xinxijiaohu类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验十<span class="token punctuation">.</span>信息存储<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验十<span class="token punctuation">.</span>信息存储<span class="token punctuation">.</span>Unit_Info<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> xinxijaohu <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Unit_Info</span> <span class="token class-name">Sdtbu</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Unit_Info</span><span class="token punctuation">(</span><span class="token string">"山东工商学院"</span><span class="token punctuation">,</span><span class="token string">"事业单位"</span><span class="token punctuation">,</span><span class="token string">"0535-123456"</span><span class="token punctuation">,</span><span class="token string">"山东省烟台市莱山区滨海路"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">File</span> file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/ch10/山东工商学院单位信息.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileOutputStream</span> fileout<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> objectout<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileout<span class="token punctuation">)</span><span class="token punctuation">;</span>            objectout<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">Sdtbu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            objectout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token class-name">FileInputStream</span> filein<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/ch10/山东工商学院单位信息.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectInputStream</span> objectin<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>filein<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Unit_Info</span> show_Sdtbu<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">Unit_Info</span><span class="token punctuation">)</span> objectin<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            objectin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单位信息："</span><span class="token operator">+</span>show_Sdtbu<span class="token punctuation">.</span>nameString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单位属性："</span><span class="token operator">+</span>show_Sdtbu<span class="token punctuation">.</span>proString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单位电话："</span><span class="token operator">+</span>show_Sdtbu<span class="token punctuation">.</span>phone_num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单位地址："</span><span class="token operator">+</span>show_Sdtbu<span class="token punctuation">.</span>addString<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// 异常对应objectin.readObject()</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无法读出对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="信息存储类">信息存储类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验十<span class="token punctuation">.</span>信息存储<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Unit_Info</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token comment">//注意，要实现这个借口</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> nameString<span class="token punctuation">,</span>proString<span class="token punctuation">,</span>phone_num<span class="token punctuation">,</span>addString<span class="token punctuation">;</span>    <span class="token class-name">Unit_Info</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span><span class="token class-name">String</span> ps<span class="token punctuation">,</span><span class="token class-name">String</span> pn<span class="token punctuation">,</span><span class="token class-name">String</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        nameString<span class="token operator">=</span>n<span class="token punctuation">;</span>        proString<span class="token operator">=</span>ps<span class="token punctuation">;</span>        phone_num<span class="token operator">=</span>pn<span class="token punctuation">;</span>        addString<span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="tips-2">tips</h4><ul><li>信息存储类要实现 <code>Serializable</code> 接口，否则无法正常写入文件数据。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队20级&amp;&amp;21级---个人赛 4</title>
      <link href="/posts/4e5f.html"/>
      <url>/posts/4e5f.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>很多题只是换了个问法，做法是共通的。</p></blockquote><h3 id="题目-A-Two-Rabbits">题目 A - Two Rabbits</h3><h4 id="链接：-Two-Rabbits">链接： <a href="https://codeforces.com/problemset/problem/1304/A">Two Rabbits</a></h4><h4 id="题意：">题意：</h4><p>有两只兔子在向着对方跳跃，高兔子在左边，矮兔子在右边，告诉两只兔子每秒的跳跃距离，请问两只兔子是否可以在某时刻同时跳到同一位置。</p><h4 id="输入格式">输入格式</h4><p>每个测试包含一个或多个测试用例。第一行包含测试用例的数量t (1 ≤ t ≤ 1000)。</p><p>每个测试用例只包含一行。该行由四个整数组成x,y,a,b (0 &lt; x &lt;= y &lt; 10<sup>9</sup>，1 ≤ a，b ≤ 10<sup>9</sup>） — 高大兔子的当前位置、较矮的兔子的当前位置、较高兔子的跳跃距离和较矮的兔子的跳跃距离。</p><h4 id="输出格式">输出格式</h4><p>对于每个测试用例，打印单个整数：两只兔子处于同一位置所需的秒数。</p><p>如果两只兔子永远不会同时处于同一位置，请打印 <code>-1</code> 。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 10<sup>3</sup></p><p>0 &lt; x &lt;= y &lt; 10<sup>9</sup></p><p>−100 ≤ a<sub>i</sub> ≤ 100</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">50 10 2 30 10 3 3900000000 1000000000 1 99999991 2 1 11 3 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2-110-11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li><strong>思维</strong> 。小学数学，只要两只兔子起点的距离，是两者跳跃距离之和的整数倍，就代表两只兔子可以相遇。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e2</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">2e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//达到价值i最少要f[i]枚硬币</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span><span class="token comment">//起点，终点，a b</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>y<span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-B-Longest-Palindrome">题目 B - Longest Palindrome</h3><h4 id="题目：Longest-Palindrome">题目：<a href="https://codeforces.com/problemset/problem/1304/B">Longest Palindrome</a></h4><h4 id="题意：-2">题意：</h4><p>给我们n个长度为m的字符串，可以删除任意个字符串，然后以任意顺序重新排序，如果可以得到一个回文串，打印以此法得到的最长回文串的长度以及该回文串。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含两个整数n和m (1 ≤ n ≤ 100,1 ≤ m ≤ 50） — 字符串的数量和每个字符串的长度。</p><p>下一个n行包含一串长度m每个，仅由小写拉丁字母组成。所有字符串都是 <strong>不同的</strong> 。</p><h4 id="输出格式-2">输出格式</h4><p>在第一行中，打印您制作的最长回文字符串的长度。</p><p>在第二行中，打印回文。如果有多个答案，请打印其中任何一个。如果回文为空，请打印空行或根本不打印此行。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ n ≤ 100</p><p>1 ≤ m ≤ 50</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3 3tabonebat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">6tabbat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>由于我们无法改变字符串内部字母的顺序，所以要想组成回文，必须找到另一个相反的字符串。对于自身就是回文的字符串，如果可以找到另一个和该串相同的字符串，就把这两个串当做前一种情况处理。对于只出现过一次回文串，找到最长的一个放到我们组成的回文串的中间，这样所组成的回文串就是最长的。</li><li>由于可以任意排序，所以回文串可能不唯一。那么我们在将找到对应回文串的字符串加入到最后的字符串中时就不必在意顺序。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e2</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">2e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    string u<span class="token punctuation">,</span>ans<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        string s<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        string t<span class="token operator">=</span>s<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            cnt<span class="token operator">+=</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token operator">+=</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span>s<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>mm<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                mm<span class="token operator">=</span>t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                u<span class="token operator">=</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        p<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>mm<span class="token operator">+</span>cnt<span class="token operator">*</span><span class="token number">2</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mm<span class="token operator">+</span>cnt<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mm<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>u<span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-C-Air-Conditioner">题目 C - Air Conditioner</h3><h4 id="题目：Air-Conditioner">题目：<a href="https://codeforces.com/problemset/problem/1304/C">Air Conditioner</a></h4><h4 id="题意：-3">题意：</h4><p>我们的店内有一个空调，该空调有三种状态：关闭，降温，升温。关闭状态下店内温度不变，降温状态店内每分钟下降一度，升温状态每分钟上升一度。我们要迎接n位顾客，店内初始温度是m，每位顾客有自己的满足温度区间，是否可以让所有顾客满意？</p><h4 id="输入格式-3">输入格式</h4><p>每个测试包含一个或多个测试用例。第一行包含测试用例的数量q (1 ≤ q ≤ 500)。测试用例的说明如下。</p><p>每个测试用例的第一行包含两个整数n和m (1 ≤ n ≤ 100, −10<sup>9</sup> ≤ m ≤ 10<sup>9</sup>），其中n是保留的客户数量，并且m是餐厅的初始温度。</p><p>接着，n行紧随其后。第i包含三个整数t<sub>i</sub> , l<sub>i</sub> 和 h<sub>i</sub> （1 &lt;= t<sub>i</sub> &lt;=10<sup>9</sup> ，-10<sup>9</sup> &lt;= l<sub>i</sub> ，h<sub>i</sub> &lt;= 10<sup>9</sup> ），其中 t<sub>i</sub> 是客户访问时间，l<sub>i</sub>是其首选温度范围的下限，以及h<sub>i</sub>是其首选温度范围的上限。首选温度范围<strong>包括在内</strong>。</p><p>客户以访问时间的非递减顺序给出，当前时间为0。</p><h4 id="输出格式-3">输出格式</h4><p>对于每个测试用例，如果可以满足所有客户，请打印“YES”。否则，请打印“NO”。</p><p>您可以打印任何大小写（大写或小写）的每个字母。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ n ≤ 10<sup>5</sup></p><p>0 ≤ a<sub>i</sub> ≤ 10<sup>9</sup></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">43 05 1 27 3 510 -1 02 125 7 1010 16 203 -100100 0 0100 -50 50200 100 1001 10099 -100 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">YESNOYESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li><strong>区间</strong> 。首先我们考虑是否能满足第一位顾客，只需要看是否能在他到达店里之前将温度控制到他满意的温度。而如果我们确定了第一位顾客离开的温度，后续n-1位顾客都可以按此方式判断是否可以满足。于是我们发现难点就在于如何在一位顾客离开后，确定此时的温度。</li><li>仔细想想就会发现这是无法做到的，因为每个顾客的满意温度是个区间，当前温度只要在这个区间中就可以。那么我们可以考虑是否可以维护一个区间，每次在两位顾客的间隙调整区间值，然后只需要判断所维护区间与下一位顾客的满意区间是否有重叠，如果有说明能够满足，否则不能满足。</li><li>如何在一位顾客离开后维护区间？我们只需要将所维护区间调整为与顾客满意区间重合部分就可以，因为如果顾客满意，那么顾客离开时，店内温度一定是处于顾客满意区间内的。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e2</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">2e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token comment">//每次维护一个区间，如果新的区间和所能达到的区间有重合，说明可以满足该顾客</span><span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;=</span>l<span class="token operator">&amp;&amp;</span>a<span class="token operator">&lt;=</span>r<span class="token operator">||</span>l<span class="token operator">&gt;=</span>a<span class="token operator">&amp;&amp;</span>l<span class="token operator">&lt;=</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> p<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>        ll l<span class="token operator">=</span>m<span class="token punctuation">,</span>r<span class="token operator">=</span>m<span class="token punctuation">,</span>tt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ll t<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>            cin<span class="token operator">&gt;&gt;</span>t<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>            <span class="token keyword">int</span> c<span class="token operator">=</span>t<span class="token operator">-</span>tt<span class="token punctuation">;</span>            l<span class="token operator">-=</span>c<span class="token punctuation">,</span>r<span class="token operator">+=</span>c<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;</span>b<span class="token operator">||</span>r<span class="token operator">&lt;</span>a<span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>a<span class="token punctuation">)</span>l<span class="token operator">=</span>a<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&gt;</span>b<span class="token punctuation">)</span>r<span class="token operator">=</span>b<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tt<span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        flag<span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"YES"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"NO"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队个人赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/posts/a9b3.html"/>
      <url>/posts/a9b3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git笔记">Git笔记</h2><blockquote><p>实践出真知。如果觉得某个命令很难理解，最好上手亲自执行该命令几次，看看究竟发生了什么变化。</p></blockquote><h3 id="git基本概念">git基本概念</h3><p>共有三个区域：工作区、暂存区、版本库。</p><ul><li><p><strong>工作区</strong> 就是本地文件目录。工作区和版本库两者独立。</p></li><li><p><strong>版本库</strong> 是由许多节点构成的树状结构，每个节点代表本地仓库所有文件的一个版本。</p></li><li><p><strong>暂存区</strong> 是介于工作区和版本库之间的“缓冲区”。工作区借助暂存区向版本库创建新的版本（也就是节点）。</p></li></ul><p><strong>head指针</strong> 指向当前节点，head每次只会指向一个节点。</p><p><strong>大致流程</strong> ：在 <strong>工作区</strong> 写代码，将完成的代码 add 到 <strong>暂存区</strong> ，将暂存区的代码 commit 到 <strong>版本库</strong> 形成一个节点，将版本库的节点 push 到 <strong>云端</strong> 保存。</p><ul><li>云端也有一个节点构成的树状结构。</li></ul><hr><h3 id="步骤">步骤</h3><ul><li>做好远程仓库的准备工作。<ul><li>创建远程仓库。</li><li>配置密钥。</li></ul></li><li>做好本地仓库的准备工作。<ul><li>git init 命令初始化本地仓库。</li><li>连接远程仓库。<ul><li>注意，在这一步中，务必使用 ssh 链接，如果用 https 将会卡死在输入用户名和密码这一步。实际上无论输入的用户名和密码是对是错，都会显示错误。</li><li><img src="https://s2.loli.net/2023/04/21/xN1oImLCE4dlqhg.png" alt="图1" style="zoom:50%;"></li></ul></li><li>git push 向远端仓库推送文档。</li></ul></li></ul><h3 id="本地仓库准备工作">本地仓库准备工作</h3><p><strong>Git全局设置：</strong></p><p>设置自己的名字和邮箱：</p><p><code>git config --global user.name xxx</code> ：设置全局用户名，信息记录在 <code>~/.gitconfig</code> 文件中。</p><p><code>git config --global user.email xxx@xxx.com</code> ：设置全局邮箱地址，信息记录在 <code>~/.gitconfig</code> 文件中。</p><ul><li>执行完两个命令后会在本地家目录下看到 <code>.config</code> 文件，该文件保存了上述命令的名字和邮箱。</li><li>名字和邮箱可以随意起，但是推荐填写自己云端账号的用户名和邮箱。</li></ul><p><strong>创建本地仓库：</strong></p><p>创建文件夹 ： <code>mkdir project</code></p><p>进入文件夹 ： <code>cd project</code></p><p>在 <code>project</code> 文件夹下执行 <code>git init</code> ：将当前目录配置成git仓库，信息记录在隐藏的 <code>project/.git</code> 文件夹中。</p><p><code>git remote add origin git@xxx.com:yyy/zzz.git</code> ：将本地仓库关联到远程仓库。</p><p><strong>此时本地仓库创建完毕。</strong></p><hr><p><code>project</code> 是我们的本地仓库，也即工作区，后面的工作都将在该文件夹下展开。</p><h3 id="Git本地常用命令：">Git本地常用命令：</h3><h4 id="基础常用命令">基础常用命令</h4><p><code>touch XX</code> ：在工作区创建XX文件。</p><p><code>git status</code> ：命令查看仓库状态。</p><ul><li>仓库状态指：工作区的内容在修改过后：1. 是否加入了暂存区。2.是否将新版本持久化（加入版本库）。</li><li>文件名字变绿表示加入了暂存区。</li></ul><p><code>git add xxx</code> ：将xxx文件加入暂存区。</p><ul><li>注意这里的add，不是创建文件的意思，而是将文件的修改加入的暂存区，文件的修改可以是删除文件。所有送入暂存区的信息都可以持久化。所以我们也可以将文件的删除持久化。</li></ul><p><code>git add .</code> ：将工作区 <strong>当前目录下</strong> 所有文件加入暂存区。</p><ul><li><p><strong>注意</strong> ：<strong>删除文件</strong> 的操作也可以同步到云端，可以用 <code>git add -A</code> 来将删除文件的操作添加到暂存区。</p></li><li><pre><code class="language-git">git add .  # 添加新文件、被修改文件git add -A # 添加新文件、被修改文件、已删除文件</code></pre></li></ul><p><code>git commit -m "xxx"</code> ：将 <strong>暂存区内容</strong> 作为一个新的节点加入版本库，并将 head 指针指向该节点。</p><ul><li><code>xxx</code> 表示给自己看的备注信息，尽量用英文或者拼音，有些终端不支持中文。</li><li>commit实际上就是将暂存区持久化，所以可以只将一部分文件持久化。</li></ul><h4 id="恢复与删除命令">恢复与删除命令</h4><p><code>git restore XX</code> ：将XX从暂存区的文件撤回到工作区，工作区的文件会被暂存区的文件覆盖。</p><ul><li><strong>如果暂存区没有内容，就回滚到 HEAD 指向的版本</strong> ，常用来将写错的文件恢复到上次保存的版本。</li></ul><p><code>git restore --staged xx</code> ：会把暂存区的文件撤回到工作区，但工作区的文件不会被修改。</p><ul><li>可以理解为只是撤回了暂存区的文件，和 <code>git rm –cached XX</code> 命令等价。</li></ul><p><code>git rm XX</code> ：用于删除XX文件。</p><ul><li>如果工作区和暂存区都有名字为XX的文件，那么会给出提示是否要强制删除该文件（同一执行后工作区和暂存区该文件都会消失）。</li><li>如果工作区中该文件已经删除但暂存区还有，那么该命令直接执行，将从暂存区中删除该文件。</li></ul><p><code>git rm --cached XX</code> ：将文件从仓库索引目录中删掉，不希望管理该文件。</p><p><strong>总结</strong> ： <code>git rm</code> 更倾向于删除文件，而 <code>git restore</code> 更倾向于恢复工作区的文件。</p><p><code>rm xxx -rf</code> ：删除本地仓库XXX。</p><ul><li>如果未将本地仓库上传至云端，请谨慎执行该项。若已经将本地仓库上传至云端，误删本地仓库后可以将云端的仓库下载到本地。</li></ul><h4 id="查看命令">查看命令</h4><p><code>git log</code> ：查看当前分支的所有节点。</p><ul><li>说是所有，其实不准确，更准确的描述是：从根（此处的根指：最初还没有任何节点时的空）走到当前head指针指向的节点，路径上的所有节点。</li><li>执行 <code>git log</code> 命令后，要从下往上看展示的内容。</li><li><strong>注意</strong> ：如果节点很多，会自动进入翻页状态。按 <code>q</code> 退出。</li></ul><p><code>git log --pretty=oneline</code> ：将每个版本用一行来显示，相比较 <code>git log</code> 好处是看起来更清爽（实际体验很棒）。</p><p>执行 <code>git diff XX</code> ：查看工作区的XX文件相对于暂存区修改了哪些内容。</p><ul><li>如果暂存区为空，那么就比较工作区XX文件和head指针指向的版本中的XX文件。</li></ul><p><code>git reflog</code> ：查看HEAD指针的移动历史（包括被回滚的版本）。</p><ul><li>如果将本地仓库删除，移动历史也会随之删除，即使从云端将仓库重新下载到本地也无法重现移动历史。</li></ul><p><code>git branch</code> ：查看所有分支和自己当前所处分支。</p><h4 id="回滚命令">回滚命令</h4><p>回滚：将head指针指向之前的某个版本，当前目录下的所有文件都将被修改为该版本的状态。</p><p><code>git reset --hard HEAD^</code> ：将head指针往前回滚一个版本。已经存在的节点不会删掉。</p><ul><li>HEAD后跟几个 <code>^</code> 就表示往前回滚几个版本。</li></ul><p><code>git reset --hard HEAD~100</code> ：往上回滚100个版本。</p><p><code>git reset --hard 版本号</code> ：回滚到某一特定版本。</p><ul><li>版本号： <code>git log</code> 查看版本时，每个版本哈希值的前7位。</li></ul><hr><h3 id="Git云端常用命令">Git云端常用命令</h3><p>云端主要用于实现不同机器之间代码的同步，这为多人合作提供了基础。</p><p><strong>注意</strong> ：尽管在本地不同分支可以共享同一个节点，但在云端，每个分支都有自己的历史节点记录，不同的分支之间不共享历史节点记录。</p><h4 id="准备工作">准备工作</h4><p>在云端注册账号。</p><p>在云端创建新的仓库，注意名字要和本地仓库的名字一致。</p><ul><li>谨慎选择 <strong>可见性级别</strong> 。</li><li><strong>注意</strong> ：如果在本地已经有了对应仓库，在云端创建仓库的目的是为了把本地仓库上传至云端，需要 <strong>取消勾选使用自述文件初始化仓库</strong> 选项。如果没有取消勾选，请删除并重建仓库。</li></ul><p><strong>注意</strong> ：git是使用ssh密钥来访问的，所以如果我们要向云端仓库上传文件需要提前在云端设置ssh密钥。</p><ul><li>此处以及后续所提到的 <code>密钥</code> 都将特指 <code>ssh公钥</code> 。每个服务器还有自己的ssh私钥，请妥善保存。</li></ul><p>获取服务器ssh公钥：首先查看服务器家目录下是否有 <code>.ssh</code> 隐藏文件夹，如果没有，执行 <code>ssh-keygen</code> 命令 <strong>创建密钥</strong> 。然后执行如下命令：</p><ul><li>在家目录下进入 <code>.ssh文件夹</code> 。</li><li>执行 <code>cat id_rsa.pub</code> 命令。将该命令展示的信息复制出来（鼠标左键选中文本，按下 <code>ctrl+insert</code> ）。<ul><li>注意，执行完 <code>ssh-keygen</code> 命令后，本地的 <code>.ssh</code> 文件夹下（如果是在 <code>.ssh</code> 文件夹下执行的该命令）会出现两个文件，分别是 <code>id_rsa</code> 和 <code>id_rsa.pub</code> ，从名字中可以很容易的看出前者是私钥，后者是公钥。后续每次执行 git push 操作都需要输入一次自己设置的公钥，如果想要避免如此，则将公钥中的内容，复制到 <code>~/.ssh/authorized_keys</code> 文件里即可。</li><li>注意，在执行 <code>ssh-keygen</code> 命令 <strong>创建密钥</strong> 时，系统会提示 <strong>设置密码</strong> ，<strong>非常建议</strong> 连续按下回车表示不主动设置密码，否则如果主动设置了例如 <code>123456</code> 这样的密码，那么后续每次 <code>git push</code> 时都需要手动输入这里设置的密码。</li></ul></li></ul><p>在云端添加密钥：将复制的文本粘贴到云端 <code>添加ssh密钥</code> 处。通常在用户设置中可以找到。</p><ul><li>在粘贴的时候请使用 <code>ctrl+v</code> ，使用 <code>shift+insert</code> 会导致格式错误致使添加失败。</li><li>粘贴文本之后，密钥标题通常会自动填好，如果没有，请手动添加。标题：ssh密钥对应服务器的名字。</li></ul><p><code>git remote add origin git@xxx.com:yyy/zzz.git</code> ：将本地仓库关联到远程仓库。</p><ul><li><p>xxx为云端域名，对应云端服务器的IP地址。yyy为在云端注册的账号名，zzz为云端仓库名， <code>yyy/zzz.git</code> 实际上就是云端仓库在云端的目录。</p></li><li><p>如果在 <strong>本地仓库准备工作</strong> 环节没有执行 <code>git init</code> 命令，请于关联仓库之前在本地仓库根目录下执行该命令。</p><ul><li>例如本地仓库名为 <code>project</code> ，那么就在 <code>project/</code> 下执行。</li></ul></li></ul><p><strong>注意</strong> ：可以添加多个密钥，这样就可以使得多台服务器共用该仓库，这是多人合作开发的基础。</p><h4 id="云端常用命令">云端常用命令</h4><p><code>git push -u origin master</code>  (第一次需要-u以后不需要)：将当前分支推送到远程仓库。</p><ul><li>第一次执行完 <code>git push -u origin master</code> 后，再推送时只需要执行 <code>git push</code> ，依旧只是将当前所在分支推送到云端。</li><li><code>git push origin branch_name</code> ：将本地的某个分支推送到远程仓库。</li><li><code>origin</code> 通常表示云端。</li></ul><p><code>git push --set-upstream origin branch_name</code> ：设置本地的branch_name分支对应远程仓库的branch_name分支。</p><ul><li>在向云端仓库推送branch_name分支时，如果云端仓库没有该分支，需要执行该命令在云端创建该分支并与本地仓库的branch_name分支对应。</li><li>通常用于 <code>git push</code> 向云端推送分支。<ul><li>注意，在使用 <code>git push</code> 命令时，要确保云端当前分支与本地当前分支的节点没有冲突，所谓冲突就是云端进行了修改，本地也进行了修改，那么此时同一个节点上会指向两个不同的节点（分别是云端和本地的），此时需要先执行 <code>git pull</code> 命令将云端的操作同步到本地，在执行 <code>git push</code> 命令。</li></ul></li></ul><p><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code> ：将远程的branch_name1分支与本地的branch_name2分支对应。</p><ul><li><p>需要先自己在本地创建 <code>branch_name2</code> 分支，然后再执行该命令使其与云端 <code>branch_name1</code> 分支对应。</p></li><li><p>通常用于 <code>git pull</code> 下载云端分支。</p></li></ul><p><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支 <strong>合并</strong> 。</p><ul><li><p><code>git pull</code> 有将云端仓库分支拉取下来，并与当前分支合并的两个含义。</p></li><li><p><code>git pull origin branch_name</code> ：将远程仓库的branch_name分支与本地仓库的当前分支合并。</p></li></ul><p><code>git checkout -t origin/branch_name</code> ：将远程的branch_name分支拉取到本地。</p><ul><li>使用该命令无需提前在本地创建对应分支。拉取下来的分支自动绑定云端分支，commit新节点后可以直接向云端推送。</li></ul><p><code>git clone git@xxx.com:yyy/zzz.git</code> ：将远程仓库zzz下载到当前目录下。</p><ul><li>可以直接在云端仓库的首页找到对应的下载链接。</li></ul><hr><h3 id="Git分支常用命令">Git分支常用命令</h3><p>版本库是一个由节点组成的树状结构，我们的master分支是由节点构成的一条线，称之为主分支。在主分支的任意一个节点上都可以分出一个分支，以便于我们多人合作。分支的节点也可以分出新的分支，这样就会形成一个树状结构。</p><p><strong>注意</strong> ：</p><ul><li>所有分支共用一个暂存区和工作目录，暂存区和版本库是相互独立的。当我们  <code>commit</code> 时，只会在当前所处分支后创建节点，其他分支将不会有任何变化。</li><li>不同的分支也可以共用同一个节点。</li></ul><h4 id="分支的创建-删除-切换">分支的创建/删除/切换</h4><p><code>git checkout -b branch_name</code> ：创建并切换到branch_name这个分支。</p><ul><li>此时并没有创建新的节点，因为节点只能由 <code>commit</code> 创建，此时只是有了一个向其他分支创建节点的趋向。</li></ul><p><code>git checkout branch_name</code> ：切换到branch_name这个分支。</p><p><code>git branch -d branch_name</code> ：删除branch_name分支。</p><ul><li><p>在删除branch_name分支之前，必须先将head切换到其它分支。</p></li><li><p>如果在删除分支之前没有合并该分支，系统将在 <strong>删除该分支后</strong> 给出提醒。</p></li></ul><p><code>git push -d origin branch_name</code> ：删除 <strong>远程仓库</strong> 的branch_name分支。</p><h4 id="合并分支">合并分支</h4><p><code>git merge branch_name</code> ：将 branch_name分支合并到当前分支。</p><ul><li><code>git merge</code> 使用的是 <code>Fast-forward</code> 模式，所以不会创建新的节点，只是<strong>将branch_name分支的节点合并到head所在的分支</strong>上，并根据节点的commit时间排序。 <strong>分支合并的本质是节点路径的合并</strong> 。</li><li>分支合并是将branch_name合并到当前分支，其中隐含着主次关系。如果已经合并过一次，且此时branch_name分支和head分支路径完全相同（完全相同指branch_name分支的最新节点与head所指分支的最新节点是同一节点）：<ul><li>若branch_name分支没有任何新的节点，当head所指分支添加新的节点并再次执行 <code>git merge branch_name</code> 命令，则不会有任何变化，head分支上的修改也不会同步到branch_name上；</li><li>反之branch_name分支没有任何新的节点，当head所指分支添加新的节点，切换到branch_name分支，执行 <code>git merge head_branch_name</code> 命令时，原来head分支的修改将会同步到branch_name分支上。</li><li>通过这个案例会更好的理解：<strong>分支合并的本质是节点路径的合并</strong> 这句话。</li></ul></li><li>如果branch_name分支和head所指分支，在各自的节点路径上对同一文件各自进行了修改，那么在合并时就会产生该文件的冲突，需要自己手动解决冲突并commit新节点来持久化冲突的解决。<ul><li>例如如果此时branch_name分支和head分支路径完全相同（完全相同指branch_name分支的最新节点与head所指分支的最新节点是同一节点，记该节点为 <code>flag</code>），该节点中有文件 <code>test.txt</code> ，branch_name分支先在该文件内添加内容 <code>aaa</code> 并持久化，记为 <code>aaa</code> 。之后head所指分支在 <code>test.txt</code> 文件内添加 <code>bbb</code> 并持久化，记为 <code>bbb</code> 。此时若在head所指分支下执行 <code>git merge branch_name</code> 命令，则会产生冲突，需要手动解决冲突并持久化，记为 <code>fix</code> 。</li><li>那么此时head所指分支上的 <code>flag</code> 节点后将出现3个节点，依次是 <code>aaa</code> ， <code>bbb</code> ， <code>fix</code> 。</li><li>只要没有 <strong>同时修改同一份文件</strong> ，就不会有冲突。</li></ul></li><li><strong>注意</strong> ：产生冲突后如果没有手动解决冲突并commit持久化，<strong>分支合并</strong> 将会取消。</li></ul><hr><h3 id="stash暂存">stash暂存</h3><p>将某个时刻的工作区或暂存区全部内容存入到栈中。当然我们也可以直接commit持久化，这没有任何问题。stash暂存只是除此之外的一种保存工作区与暂存区状态的手段。可以多次入栈，但是入栈出栈将遵守栈的规则。</p><p><code>git stash</code> ：将工作区和暂存区中尚未提交的修改存入栈中。</p><p><code>git stash apply</code> ：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素。</p><p><code>git stash pop</code> ：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素。</p><p><code>git stash drop</code> ：删除栈顶存储的修改。</p><p><code>git stash list</code> ：查看栈中所有元素。</p><hr><h3 id="Git终极秘籍">Git终极秘籍</h3><p>所谓大道至简，掌握这四个命令，你就已经掌握了Git <s>的50%</s> 。其他命令一般只在与别人共同开发时才会用到。</p><p><code>git push</code>  ：将当前分支推送到远程仓库。</p><p><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支 <strong>合并</strong> 。</p><p><code>git add .</code> ：将工作区所有文件加入暂存区。</p><p><code>git commit -m "xxx"</code> ：将 <strong>暂存区内容</strong> 作为一个新的节点加入版本库。</p>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队20级---组队赛 3</title>
      <link href="/posts/3313.html"/>
      <url>/posts/3313.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>胜不在罚时，在题数也。</p><p>组队赛小C一把，很是怡情~</p></blockquote><h3 id="题目：A-Mocha-上小班啦">题目：A. Mocha 上小班啦</h3><h4 id="链接：-Mocha-上小班啦">链接： <a href="https://codeforces.com/gym/103941/attachments">Mocha 上小班啦</a></h4><h4 id="题意：">题意：</h4><p>旭丘幼儿园的小班开设了一门教授数论的课程。Mocha 在研究数论的过程中，发现了一种奇妙的 数——Mocha 数。Mocha 数是一个由几个互不相同的数字构成且不含前导零的正整数。 为了方便研究，Mocha 想知道是否存在一个包含 n 个数位的 Mocha 数，如果存在，其中最小的 Mocha 数是多少。</p><h4 id="输入格式">输入格式</h4><p>一个整数 n（1 ≤ n ≤ 20），代表询问的位数。</p><h4 id="输出格式">输出格式</h4><p>如果存在包含 n 个数位的 Mocha 数，输出最小的 n 位 Mocha 数，否则输出 −1。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ n ≤ 20</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li><strong>水题</strong> 。由于不能含有前导零，同时要数字尽可能的小，所以0要放在次高位，1放在最高位。剩下的数字从小到大依次放在0后面。</li><li>提前判断一下n的位数，因为所有数位均不相同，所以n的值最大就是10。如果满足条件就按顺序输出。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token comment">//提前打表</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//从前到后输出a数组中的n位</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目：E-Serval-的俳句">题目：E. Serval 的俳句</h3><h4 id="链接：Serval-的俳句">链接：<a href="https://codeforces.com/gym/103941/attachments">Serval 的俳句</a></h4><h4 id="题意：-2">题意：</h4><p>Serval 是加帕里幼儿园的新生。 Serval 在俳句赏析大会上发现了一本神秘书卷，他想从中找出一句俳句。</p><p>具体来说，神秘书卷是一个仅包含小写英文字母的字符串 S，你需要找到满足下列条件的 S 的一个 <strong>子序列</strong> S′ 作为一句俳句：</p><ul><li>S′ 的长度 |S′| 恰好为 17；</li><li>S′<sub>1</sub> , S′<sub>2</sub> , S′<sub>3</sub> , S′<sub>4</sub> , S′<sub>5</sub> 为同一个字符；</li><li>S′<sub>6</sub>, S′<sub>7</sub>, . . . , S′<sub>11</sub>, S′<sub>12</sub> 为同一个字符；</li><li>S′<sub>13</sub>, S′<sub>14</sub>, S′<sub>15</sub>, S′<sub>16</sub>, S′<sub>17</sub> 为同一个字符。</li></ul><p>如果满足条件的子序列存在，则输出这个子序列。若存在多个满足条件的子序列，输出任意一个均可。 如果不存在满足条件的子序列，则输出 <code>none</code> 。 我们称 S′ 是 S 的子序列，当且仅当 S′ 可以从 S 中删去任意数量的字符得到。注意 S′ 的前 5 个字 符、中间 7 个字符以及后 5 个字符可以为同一个字符，例如 <code>aaaaaaaaaaaaaaaaa</code>，<code>bbbbbcccccccbbbbb</code>，<code> dddddeeeeeeeeeeee</code> 都是满足条件的。</p><h4 id="输入格式-2">输入格式</h4><p>第一行，一个正整数 |S|（1 ≤ |S| ≤ 10<sup>6</sup>），表示字符串 S 的长度。</p><p>第二行，一个长度为 |S| 的仅包含小写字母的字符串 S。</p><h4 id="输出格式-2">输出格式</h4><p>共一行，如果满足条件的子序列存在，则输出这个子序列，否则输出 <code>none</code>。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ |S| ≤ 106</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">22aaabaacccdccbcccaadaaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">aaaaacccccccaaaaa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li><strong>贪心</strong> 。先找第一组5个相同字符，然后找第二组7个相同字符，最后找第三组5个相同字符。</li><li>为什么？因为我们只能删除，不能增加或者交换字符，所以我们要让满足条件的字符组位置尽可能的靠前。给后面的字符组留出更多的寻找空间。</li></ul><h4 id="AC代码：">AC代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token comment">//绯句最少是17</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">17</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>        <span class="token comment">//cnt记录找到几组，i表示当前走到原串的第几个位置，t[i]表示第i组的字符是什么</span>        <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> t<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//因为要找三组，所以最外层循环三次</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>m<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment">//s[i]此时已经被用了，不能再用于下一次寻找</span>                    t<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果cnt为3，说明找到了符合条件的绯句</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优雅之上の优雅：">优雅之上の优雅：</h4><blockquote><p>我享受我自己的代码，感叹我大师般的手法.jpg</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                j<span class="token operator">==</span><span class="token number">2</span><span class="token operator">?</span>ans<span class="token operator">+=</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span>ans<span class="token operator">+=</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        ans<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">17</span><span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目：F-集合之和">题目：F. 集合之和</h3><h4 id="链接：集合之和">链接：<a href="https://codeforces.com/gym/103941/attachments">集合之和</a></h4><h4 id="题意：-3">题意：</h4><p>对于任意有限数集 A, B，定义二者之和 A + B 为：<br>$$<br>A + B = {x + y | x ∈ A, y ∈ B}<br>$$<br>例如，当 A = {1, 2}, B = {3, 4}，有 A+B = {4, 5, 6}。注意此处并非可重集，因此即使 1+4 = 2+3 = 5， A + B 也仅包含一个 5。</p><p>记有限数集 A 中的元素个数为 |A|。</p><p>现给定 n，试构造数集 A 满足 |A + A| = n，且 A 中任一元素 x 满足 0 ≤ x ≤ 5 × 10<sup>5</sup> 且 x 为整数。</p><p>若有多个可行的 A，输出任意解均可。若 A 不存在，输出 −1。</p><h4 id="输入格式-3">输入格式</h4><p>一行，一个正整数 n（1 ≤ n ≤ 5 × 10<sup>5</sup>）。</p><h4 id="输出格式-3">输出格式</h4><p>若 A 存在，第一行输出一个整数 |A|，表示集合 A 的元素个数。第二行输出 |A| 个互不相同的非负 整数，表示 A 中的元素。</p><p>若 A 不存在，输出 −1。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ |S| ≤ 10<sup>6</sup></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">211 51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li><strong>思维</strong> 。本质上还是一道找规律的题。</li><li>当n = 2和n = 4时无解。</li><li>否则，若n为奇数，输出 [1, (n+1)/2]。若n为偶数，输出 [1, n/2-1] + n/2+1。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token comment">//2和4无解</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//当n为奇数</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>t<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//当n为偶数</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>        n<span class="token operator">=</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目：G-Mocha-上大班啦">题目：G. Mocha 上大班啦</h3><h4 id="链接：Mocha-上大班啦">链接：<a href="https://codeforces.com/gym/103941/attachments">Mocha 上大班啦</a></h4><h4 id="题意：-4">题意：</h4><p>在旭丘幼儿园大班的数学课上，Mocha 学到了位运算和概率。她认为自己已经熟练地掌握了这两个 知识点，于是她找到了同学 Arisa 来出题考考自己。</p><p>Arisa 给了 Mocha n 个长度为 m 且只包含 0 和 1 的数字串，Arisa 会对这些数字串操作 q 次。每次 Arisa 会选择两个数字串 s<sub>i</sub> 和 s<sub>j</sub>，并选择两个位置 l, r，对于所有的 x ∈ [l, r]，将 s<sub>j</sub> [x] 替换为 s<sub>j</sub> [x] &amp; s<sub>i</sub> [x]， s<sub>j</sub> [x] 为第 j 个数字串的第 x 位，其中 &amp; 为位运算中的与运算。但是对于第 i 次操作，只有 p<sub>i</sub>/100 的概 率成功。Arisa 想让 Mocha 计算出 q 次操作后，n 个数字串按位与运算后得到的数字串中 1 的个数的期 望对 <code>998 244 353</code> 取模的结果。</p><p>Mocha 并不能解决这道问题，但是她不想丢面子，于是她想请聪明的你帮她计算出这道题的答案。</p><h4 id="输入格式-4">输入格式</h4><p>第一行两个整数 n, m（2 ≤ n ≤ 1000, 1 ≤ m ≤ 4000），代表数字串的个数和长度。</p><p>之后 n 行每行一个长度为 m 且只包含 0 和 1 的数字串。</p><p>第 n + 2 行包含一个整数 q（1 ≤ q ≤ 2 × 10<sup>5</sup>），代表操作次数。</p><p>之后 q 行，每行五个整数 i, j, l, r, p（1 ≤ i, j ≤ n, 1 ≤ l ≤ r ≤ m, 0 ≤ p ≤ 100），代表操作两个数字 串的编号，操作的位置范围以及成功概率。保证 i ≠ j。</p><h4 id="输出格式-4">输出格式</h4><p>输出一个整数，代表所求期望对 <code>998 244 353</code> 取模的结果。</p><p>令 M = 998 244 353，可以证明所求期望可写作既约分数 p q 的形式，其中 p, q 为整数且 q ̸≡ 0 (mod M)。输出的整数应与 p × q<sup>−1</sup> mod M 相等，换言之，输出一个整数 x 满足 0 ≤ x &lt; M 且 x × q ≡ p (mod M)。</p><h4 id="数据范围-4">数据范围</h4><p>2 ≤ n ≤ 1000</p><p>1 ≤ m ≤ 4000</p><p>1 ≤ q ≤ 2 × 10<sup>5</sup></p><p>1 ≤ i, j ≤ n</p><p>1 ≤ l ≤ r ≤ m</p><p>0 ≤ p ≤ 100</p><h4 id="输入样例：-4">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3  310011011111 2 1 2 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-4">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-4">思路：</h4><ul><li><strong>思维</strong> 。翻译题目：给n个长度为m的串，有p次操作，每次操作将 s<sub>i</sub> 串和 s<sub>j</sub> 串共同的一段进行按位与，并将 s<sub>j</sub> 对应的一段替换为结果。每次操作有可能失败。最后将n个串依次与一个长度为m且所有数位都为1的串（记为M）按位与操作，问最后M串 <strong>可能</strong> 还剩下多少位是1。</li><li>之所以用 <strong>可能</strong> 这个词是因为题目告诉我们每次操作是有可能失败的。但最后的结果真的是不可控的吗？</li><li>其实不是。我们会发现，无论操作是否成功与否，只有01这样的组合会改变原来的值，因为00和11进行与操作后还是和原来一样。而01这样的组合即便成功也只是让其中某一位的1变成0，这对最后将M与所有串进行与操作的结果是没有改变的。所以对M串操作完后，M串有多少个数位是1是一个定值：该位上所有串都是1的位数。</li><li>我们会发现其实题目一直在试图迷惑我们，q和后面的q行都不需要接受输入，甚至也不需要取模，因为最多就4000 × 1000 = 4×10<sup>6</sup> 位。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/ stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    string s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> q<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>q<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token operator">&gt;&gt;</span>d<span class="token operator">&gt;&gt;</span>e<span class="token punctuation">;</span><span class="token comment">//cnt存M串最后有多少数位是1</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//按列遍历</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//对于第i列，遍历所有串</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//只要遇到一个0，最后M该位就为0，提前让cnt--并退出</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'0'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cnt<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果有0，已经让cnt--了，需要加1恢复cnt的值。如果没有0，说明cnt需要加1。</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队组队赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队20级&amp;&amp;21级---个人赛 3</title>
      <link href="/posts/8c1e.html"/>
      <url>/posts/8c1e.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>21世纪的长城真让人无可奈何。</p><p>前两个题很水，第三题略微有点麻烦。</p></blockquote><h3 id="题目-A-Non-zero">题目 A - Non-zero</h3><h4 id="链接：-Non-zero">链接： <a href="https://codeforces.com/problemset/problem/1300/A">Non-zero</a></h4><h4 id="题意：">题意：</h4><p>给定n个数字，每次可以将其中任意一个数字的值加1，要求最后所有数的总和与乘积均不为零，最少需要操作多少次。</p><h4 id="输入格式">输入格式</h4><p>每个测试包含多个测试用例。</p><p>第一行包含测试用例的数量 t ( 1 ≤ t ≤ 10<sup>3</sup> ) 测试用例的说明如下。</p><p>每个测试用例的第一行包含一个整数n ( 1 ≤ n ≤ 100 ）  — 数组的大小。</p><p>每个测试用例的第二行包含n个整数a<sub>1</sub>、a<sub>2</sub>、…、a<sub>n</sub> ( −100 ≤ a<sub>i</sub> ≤ 100 ） — 数组的元素。</p><h4 id="输出格式">输出格式</h4><p>对于每个测试用例，输出使数组中所有元素的总和和乘积与零不同所需的最小步骤数。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 10<sup>3</sup></p><p>1 ≤ n ≤ 100</p><p>−100 ≤ a<sub>i</sub> ≤ 100</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">432 -1 -14-1 0 0 12-1 230 -2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1202<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li><strong>思维</strong> 。共有两个条件，总和不能为零且乘积不能为零。</li><li>乘积不为零最容易实现，只要读入0就让它的值加1即可。定义 <code>sum</code> 为所有元素的总和，最后单独判断一下 <code>sum</code> 是否为零，如果为零，就让操作次数加1。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>cnt<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-B-Assigning-to-Classes">题目 B - Assigning to Classes</h3><h4 id="题目：Assigning-to-Classes">题目：<a href="https://vjudge.csgrandeur.cn/problem/CodeForces-1300B">Assigning to Classes</a></h4><h4 id="题意：-2">题意：</h4><p>给定一个奇数n，然后输入2n个数，每个数代表一个学生的技能水平。将2n个学生分到两个组中，两组学生人数可以不同，每组的技能水平用该组的技能水平中位数来表示。求两组学生技能水平的最小可能绝对差。</p><h4 id="输入格式：">输入格式：</h4><p>每个测试包含多个测试用例。第一行包含测试用例的数量t (1 ≤ t ≤ 10<sup>4</sup>)。测试用例的说明如下。</p><p>每个测试用例的第一行包含一个整数n (1 ≤ n ≤ 10<sup>5</sup>） — 学生人数减半。</p><p>每个测试包含多个测试用例。第一行包含测试用例的数量t (1 ≤ t≤104).测试用例的说明如下。</p><p>每个测试用例的第一行包含一个整数n (1 ≤ n ≤ 10<sup>5</sup> ） — 学生人数减半。</p><p>每个测试用例的第二行包含2n个整数a<sub>1</sub>、a<sub>2</sub>、…、a<sub>2n</sub> (1 &lt;= a<sub>i</sub> &lt;= 10<sup>9</sup>） — 学生的技能水平。</p><p>保证n在所有测试用例中不超过10<sup>5</sup> 。</p><h4 id="输出格式-2">输出格式</h4><p>对于每个测试用例，输出一个整数，即两组奇数大小的技能水平之间的最小可能绝对差。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>1 ≤ n ≤ 10<sup>5</sup></p><p>1 &lt;= a<sub>i</sub> &lt;= 10<sup>9</sup></p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">311 136 5 4 1 2 3513 4 20 13 2 5 8 3 17 16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">015<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li><strong>思维</strong> 。先将2n个学生的技能水平按升序排序。假设所分两组学生的中位数，在有序数列中的位置分别为x1和x2，且x1在x2前面。那么如果x2后面有t位学生，x2前面就至少有t+1个学生。此时x1可以是[1, t+1]中任意一个学生，因为这是个升序数列，所以越靠近x2，两组学生的技能水平差值越小，x1取t+1。此时x1和x2的取值分别是n/2，n/2+1。</li><li>如果x2不取n/2+1，是否能找到其它合理的位置？。我们依旧假设x2后面有t位学生，前面可以有t+3名学生，t位学生与x2一组，两位与x1一组。此时我们会发现差值最小的情况就是x1这一组紧贴着x2时。而此时x2也可以与x1组中水平最高的学生交换位置，使得两组的水平之差更小。</li><li>综上，x1和x2的取值一定是n/2，n/2+1。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        n<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目-C-Anu-Has-a-Function">题目 C - Anu Has a Function</h3><h4 id="题目：Anu-Has-a-Function">题目：<a href="https://codeforces.com/problemset/problem/1300/C">Anu Has a Function</a></h4><h4 id="题意：-3">题意：</h4><p>定义 <code>f(x,y)=(x|y) - y</code> ，n个数的序列为： <em>f</em>(<em>f</em>(…<em>f</em>(<em>f</em>(<em>a</em><sub>1</sub>,<em>a</em><sub>2</sub>),<em>a</em><sub>3</sub>),…<em>a</em><sub>n−1</sub>),<em>a</em><sub>n</sub>) 。给我们n个数，如何排列可以使得最后的结果最大。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含单个整数 n ( 1 ≤ n ≤ 10<sup>5</sup> )。</p><p>第二行包含n个整数a<sub>1</sub>， a<sub>2</sub>，…， a<sub>n</sub> (0 ≤ a<sub>i</sub> ≤ 10<sup>9</sup> ) 数组的元素<strong>不保证</strong>不同。</p><h4 id="输出格式-3">输出格式</h4><p>输出n个整数，以最大值对数组进行重新排序。如果有多个答案，请打印任何答案。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ n ≤ 10<sup>5</sup></p><p>0 ≤ a<sub>i</sub> ≤ 10<sup>9</sup></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">44 0 11 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">11 0 4 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>f(11,4)=11|4 - 4。观察这个式子我们会发现 <code>f(x,y)</code> 的本质是：从x中减去x和y相同的位。那么我们只需要确定第一个数字，剩下的数字可以任意排列。为什么？因为我们无论怎么排后面的数，本质上仍然是将[ a<sub>2</sub>, a<sub>n</sub> ]依次与a<sub>1</sub>进行 <code>f(x,y)</code> 的运算。</li><li>如何确定第一个数字？首先我们要排除一个误区，第一个数字未必是数列中最大的数字，例如 <code>8 8 4 1</code> ，将两个8放在前面，最后的结果是0。而如果是 <code>4 1 8 8</code> ，那么结果是5。由于所有的数字均满足小于10<sup>9</sup>，最多只有32位，所以我们可以遍历每个数字的所有位数，记录每一位上有多少数字该位为1，我们只要找到 <strong>所有位数中只有1个数字为1的最高位</strong> 所代表的那个数字即可。</li><li>ps：<code>bitset&lt;int&gt;b[40]</code> 前32位就是a<sub>i</sub>的前32位。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//w[i]表示第i位有多少数字  t[i]表示第i为1的任意一个数字在原数列中的下标</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//记录每一位有多少数字</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        bitset<span class="token operator">&lt;</span><span class="token number">32</span><span class="token operator">&gt;</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//找到只有一个数字为1的最高位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队个人赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java程序设计》试验九-内部类和异常类</title>
      <link href="/posts/9930.html"/>
      <url>/posts/9930.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote><p>记录一下做过的题目，虽然作为入门题目很简单，不过还是可以学到东西的hh。</p></blockquote><h3 id="程序设计一-内部类和异常类：">程序设计一 内部类和异常类：</h3><h4 id="题目："><strong>题目：</strong></h4><blockquote><p>车站检查危险品，如果发现危险品，将发出警告。</p><p>（1）编写一个Exception的子类，DangerException，该子类可以用于创建异常对象，该异常对象调用toShow()方法，输出“属于危险品”；</p><p>（2）编写一个Goods类，具有产品的名字和是否危险两种属性，可以在初始化时，设置产品的名字，并具备方法能够修改产品是否危险，查看是否危险，和设置产品的名字；</p><p>（3）编写一个Machine类，该类的方法checkBag（Goods goods）当发现参数goods是危险品的时候，（即goods的isDanger的属性的值是true的时候）抛出DangerException异常；</p><p>（4）程序在主类的main方法中，创建苹果和炸药，苹果为安全，炸药为危险，通过try-catch语句的try部分，让Machine类的实例checkBag（Goods goods）方法，查看苹果和炸药，一旦发现危险品，就在try-catch语句的catch部分处理危险品。</p></blockquote><h4 id="DangerException类"><strong>DangerException类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DangerException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token class-name">DangerException</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token operator">+</span><span class="token string">"属于危险品"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Goods类"><strong>Goods类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Goods</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> isDanger<span class="token punctuation">;</span>    <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDanger</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> isDanger<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isDanger<span class="token operator">=</span>isDanger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">getIsDanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> isDanger<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Machine类"><strong>Machine类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">.</span>DangerException<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">.</span>Goods<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Machine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkBag</span><span class="token punctuation">(</span><span class="token class-name">Goods</span> goods<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DangerException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getIsDanger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DangerException</span><span class="token punctuation">(</span>goods<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Main类"><strong>Main类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">.</span>DangerException<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">.</span>Goods<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>IsDanger<span class="token punctuation">.</span>Machine<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">Goods</span> ap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"苹果"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ap<span class="token punctuation">.</span><span class="token function">setDanger</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Goods</span> zy<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Goods</span><span class="token punctuation">(</span><span class="token string">"炸药"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zy<span class="token punctuation">.</span><span class="token function">setDanger</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Machine</span> mi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Machine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            mi<span class="token punctuation">.</span><span class="token function">checkBag</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ap<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"不属于危险品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DangerException</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">toShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            mi<span class="token punctuation">.</span><span class="token function">checkBag</span><span class="token punctuation">(</span>zy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>zy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"不属于危险品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DangerException</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">toShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小tips"><strong>小tips:</strong></h4><ul><li>Java中所有的异常类都是从 <code>java.lang.Excption</code> 类继承的子类。</li><li><code>Excption</code> 类是 <code>Throwable</code> 类的子类。</li><li>使用 <code>try</code> 和 <code>catch</code> 关键字可以捕获异常。 <code>catch</code> 语句包含要捕获异常类型的声明。</li><li>如果一个方法没有捕获到一个 <strong>检查性异常</strong> ，那么该方法必须使用 <code>throws</code> 关键字来声明。 <code>throws</code> 关键字放在方法签名的尾部。也可以使用 <code>throw</code> 关键字抛出一个异常，无论它是新实例化的还是刚捕获的。</li><li>一个方法可以 <strong>声明</strong> （声明用 <code>throws</code> ）抛出多个异常，多个异常之间用逗号隔开。</li></ul><h3 id="程序设计二-匿名类：">程序设计二 匿名类：</h3><h4 id="题目：-2"><strong>题目：</strong></h4><blockquote><p>设计一个天气预报的程序：</p><p>（1）设计一个面向接口的类，这个类中有一个可以播报天气预报的方法，天气预报方法的输入参数是一个接口参数；</p><p>（2）设计一个接口，规定不同的气象状态的播报形式；</p><p>（3）请通过匿名类，来实现分别播报晴天、下雨、雪天的天气状况。</p></blockquote><h4 id="天气状态接口"><strong>天气状态接口</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>WeaTher<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> weatherstate <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="面向接口的类"><strong>面向接口的类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>WeaTher<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> tianqiyubao <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">yubaoweather</span><span class="token punctuation">(</span>weatherstate ws<span class="token punctuation">)</span><span class="token punctuation">{</span>        ws<span class="token punctuation">.</span><span class="token function">showDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ws<span class="token punctuation">.</span><span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Main类-2"><strong>Main类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span></span>实验<span class="token number">9.</span>WeaTher<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        tianqiyubao tq<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">tianqiyubao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tq<span class="token punctuation">.</span><span class="token function">yubaoweather</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">weatherstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阴转小雨，请注意带伞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2022-10-14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        tq<span class="token punctuation">.</span><span class="token function">yubaoweather</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">weatherstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"晴，空气清新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2022-10-15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tq<span class="token punctuation">.</span><span class="token function">yubaoweather</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">weatherstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多云转雪，请注意保暖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2022-10-16"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小tips-2"><strong>小tips:</strong></h4><ul><li><p><code>Java</code> 中可以实现一个类中包含另外一个类，且不需要提供任何的类名 <strong>直接实例化</strong> 。</p></li><li><p>匿名类是不能有名字的类，它们不能被引用，只能在创建时用 <code>new</code> 语句来声明它们。</p></li><li><p>匿名类只有两种使用方式：</p><ul><li>继承一个类并重写父类的方法。</li><li>实现一个接口并重写接口的方法。</li></ul></li><li><p>匿名类主要用于在我们需要的时候创建一个对象来执行特定的任务，让代码看起来更简洁。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队20级---个人赛 7</title>
      <link href="/posts/b4fc.html"/>
      <url>/posts/b4fc.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>简单写一下题解。</p><p>最近科学研究表明：锻炼身体可以有效增加脑容量。而且不是线性增长，也就是说哪怕是抽空散步走走也可以让大脑变得更聪明。</p></blockquote><h3 id="题目：A-Even-But-Not-Even">题目：A. Even But Not Even</h3><h4 id="链接：-Even-But-Not-Even">链接： <a href="https://codeforces.com/problemset/problem/1291/A">Even But Not Even</a></h4><h4 id="题意：">题意：</h4><p>给定一个数字，可以任意删除数字中的某些位。如果最后该数字本身不能被2除尽，但是所有位数值的和可以，那么将该数字称之为 <code>ebne</code> 数字。例如：13不能被2除尽，但是1+3=4，可以被2除尽，那么13就是 <code>ebne</code> 数字。</p><h4 id="输入格式">输入格式</h4><p>输入由多个测试用例组成。第一行包含单个整数t (1 ≤ t ≤ 1000） — 测试用例的数量。测试用例的说明如下。</p><p>每个测试用例的第一行包含一个整数n(1 ≤ n ≤ 3000） — 原始数字中的位数。</p><p>每个测试用例的第二行包含一个非负整数s，包括n个数字。</p><p>保证s不包含前导零和n在所有测试用例中不超过3000。</p><h4 id="输出格式">输出格式</h4><p>对于输入中给出的每个测试用例，请按以下格式打印答案：</p><ul><li>如果无法创建 <code>ebne</code> 数字，请打印“-1”（不带引号）;</li><li>否则，请在删除一些数字（可能是零，但不是全部数字）后打印生成的数字。此数字应为 <code>ebne</code>。如果有多个答案，您可以打印其中<strong>任何</strong>一个。请注意，不接受带有前导零或空字符串的答案。<strong>不必最小化或最大化已删除的位数</strong>。</li></ul><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 3000</p><p>1 ≤ n ≤ 3000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">44122710617701324222373204424185217171912<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1227-1177032237344218521717191<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li><strong>思维</strong> 。<code>ebne</code> 数字首先要满足的是该数本身不能除尽2，那么最后一位一定是以奇数结尾。其次要满足所有位数的和要是偶数。</li><li>那么我们就可以在读入数字后，用 <code>sum</code> 存好所有位数的和，然后从后往前开始遍历。<ul><li>如果当前位是奇数，那么就判断此时的 <code>sum</code> 是否为偶数，若满足条件就退出；如果不满足条件就将当前位的数字在 <code>sum</code> 中减去。</li><li>如果当前位是偶数，不满足第一个条件，直接将当前位在 <code>sum</code> 中减去即可。</li></ul></li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        string s<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>sum<span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> t<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>sum<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                f<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum<span class="token operator">-=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-Array-Sharpening">B. Array Sharpening</h3><h4 id="题目：Array-Sharpening">题目：<a href="https://codeforces.com/problemset/problem/1291/B">Array Sharpening</a></h4><h4 id="题意：-2">题意：</h4><p>给我们n个数组成的序列，我们可以将序列中的某个数字减去任意值，但是不可以使该数字的值小于0。我们可以进行上述操作任意次，请问我们是否可以使给定的序列变为严格单峰序列（即只有一个最大值，最大值两侧依次递减，不可以有相同的数字）。</p><h4 id="输入格式-2">输入格式</h4><p>输入由多个测试用例组成。第一行包含单个整数t (1 ≤ t≤ 15000 ） — 测试用例的数量。测试用例的说明如下。</p><p>每个测试用例的第一行包含一个整数n (1 ≤ n ≤ 3×10<sup>5</sup>)。</p><p>每个测试用例的第二行是包含n个非负整数的一个序列：a<sub>1</sub>，…，a<sub>n</sub>（0 &lt;= a<sub>i</sub> &lt;=10<sup>9</sup>）。</p><p>保证n在所有测试用例中不超过3×10<sup>5</sup>。</p><h4 id="输出格式-2">输出格式</h4><p>对于每个测试用例，如果可以使用所描述的操作使给定的数组锐化，则输出一行包含“Yes”（不带引号）的行，否则输出“No”（不带引号）。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t≤ 15000</p><p>1 ≤ n ≤ 3×10<sup>5</sup></p><p>0 &lt;= a<sub>i</sub> &lt;=10<sup>9</sup></p><p>保证n在所有测试用例中不超过3×10<sup>5</sup>。</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">101248618312 10 86100 11 15 9 7 840 1 1 020 020 121 021 130 1 031 0 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">YesYesYesNoNoYesYesYesYesNo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>如果一个序列可以变为单峰序列，那么它要满足什么性质？显然，如果满足单峰，那么最小值就不能在序列中间出现，只能放在两侧的边沿。也就是说我们要让两边尽可能的小。</li><li>两边数字的最小值是多少？因为数字必须为非负数，且不能有相同的数字，那么左右两侧的第一个数字最小就是0，往里走的第二个数字是1，依次递增，那么我们就可以找到规律：<ul><li>从左往右：当前数字需要满足 <code>a[i]&lt;(i-1)</code> ，直到不满足或者遍历结束时退出。</li><li>从右往左：当前数字需要满足 <code>a[i]&lt;(n-i)</code> ，直到不满足或者遍历结束时退出。</li><li>最后要判断一下 <code>从右往左</code> 的循环是否遍历到 <code>从左往右</code> 的循环的后2个数字，如果是就说明满足条件。</li><li>ps：为什么是后2个数字？因为如果只是前面一个数字，那么例如 <code>0 1 1 0</code> 也是满足的，但显然该序列不满足单峰序列的条件。</li></ul></li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                k<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                u<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//cout&lt;&lt;k&lt;&lt;" "&lt;&lt;u&lt;&lt;endl;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">&lt;</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队个人赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云备案域名与内地节点服务器</title>
      <link href="/posts/3039.html"/>
      <url>/posts/3039.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote><p>今天阿里云又给我发了一封邮件，发现是我的网站域名没有通过“阿里云内地节点服务器核查”，原因是阿里云备案域名必须使用阿里云内地节点服务器。而我的网站是搭建在github上的，本不需要购买阿里云的服务器。</p><p>解决方法：将网站的二级域名绑定到阿里云内地节点服务器的IP上。</p><p>虽然我很久之前已经绑定过，但是最近没有访问所绑定的IP，导致没有访问记录无法通过审核。</p></blockquote><h3 id="问题：">问题：</h3><blockquote><p>尊敬的用户，您好：</p><p>经核查您的网站域名xinyi127.cn未使用阿里云内地节点服务器，但备案信息仍处于阿里云接入状态。请您尽快恢复阿里云内地节点服务器的使用。 如果3个工作日后检查发现该备案域名在阿里云内地节点服务器上仍无访问记录，我们将取消您在工信部备案系统中阿里云的接入信息。若您已在其他接入商完成接入备案，您的备案信息将不受影响；否则可能影响您的备案号及网站访问。</p><p>若已整改完毕，可点击此链接复查：<a href="https://beian.aliyun.com/pcContainer/domainCheck?&amp;msctype=email&amp;mscareaid=cn&amp;mscsiteid=cn&amp;mscmsgid=3520122101000645656&amp;&amp;spm=a2c4k.11189618.zh-cnc.22&amp;">https://beian.aliyun.com/pcContainer/domainCheck</a></p><p>1、备案号注销有什么影响？<br>备案号注销会影响网站访问，且重新备案需20个工作日左右。</p><p>2、收到邮件需要怎么操作才能不影响网站访问？<br>尽快将域名 IP 指向到阿里云内地节点（不含香港）服务器且确保阿里云内地节点（不含香港）服务器上有访问记录，<a href="https://www.aliyun.com/product/ecs?&amp;msctype=email&amp;mscareaid=cn&amp;mscsiteid=cn&amp;mscmsgid=3520122101000645656&amp;&amp;spm=a2c4k.11189618.zh-cnc.23&amp;">点此立即购买</a></p><p>若您的备案域名解析IP地址已指向阿里云备案的内地节点（不含香港）服务器，且保持正常访问，请忽略此邮件。</p><p>如您对此有更多疑问，请点击 <a href="https://ia.aliyun.com/home?&amp;msctype=email&amp;mscareaid=cn&amp;mscsiteid=cn&amp;mscmsgid=3520122101000645656&amp;&amp;spm=a2c4k.11189618.zh-cnc.24&amp;query=%E7%A9%BA%E5%A3%B3%E7%BD%91%E7%AB%99&amp;channel=activity">联系我们</a> ，获得方便快捷的服务。</p><p><a href="https://help.aliyun.com/noticelist/articleid/6501825.html?&amp;msctype=email&amp;mscareaid=cn&amp;mscsiteid=cn&amp;mscmsgid=3520122101000645656&amp;spm=5176.788314815.n2.5.6OEOqY">关于备案空壳网站清理通知</a></p><p>阿里云计算有限公司</p></blockquote><h3 id="解决步骤：">解决步骤：</h3><h4 id="1-登录阿里云">1.登录阿里云</h4><ul><li>点击控制台，进入域名控制台。</li></ul><h4 id="2-解析域名">2.解析域名</h4><ul><li>进入域名列表。</li><li>找到自己需要使用阿里云内地节点服务器的域名。</li><li>添加任意条A类型记录，记录值填 <code>阿里云内地节点服务器的IP</code> 。如图：<img src="https://s2.loli.net/2022/10/10/wht7TiV2ANbGdMQ.png" alt="image.png" style="zoom: 33%;"></li><li>点击左上角 <code>添加记录</code> 。</li><li>记录类型选择A，主机记录填任意值，例如如果你填 <code>xxx</code> ，那么你后续访问时需要在导航栏打 <code>xxx.你的一级域名</code> 。</li><li>记录值为可以访问的 <code>阿里云内地节点服务器IP</code>。</li></ul><h4 id="3-检测是否成功">3.检测是否成功</h4><ul><li><p>访问该链接并检查自己的域名是否合格：<a href="https://beian.aliyun.com/pcContainer/domainCheck?&amp;msctype=email&amp;mscareaid=cn&amp;mscsiteid=cn&amp;mscmsgid=3520122101000645656&amp;&amp;spm=a2c4k.11189618.zh-cnc.22&amp;">https://beian.aliyun.com/pcContainer/domainCheck</a></p></li><li><p>有时间延迟，最好等10分钟左右再检测。</p></li><li><p>如果只知道备案号，不知道是哪个网站，可以访问：<a href="http://icp.chinaz.com/">http://icp.chinaz.com/</a></p></li></ul><h4 id="4-定期访问">4.定期访问</h4><ul><li>以上步骤均成功后需要定期访问你所绑定的IP，让 <code>备案域名在阿里云内地节点服务器上存在访问记录</code> ，否则后面仍然无法通过审核。</li></ul><h3 id="ps：可使用的阿里云内地节点服务器IP">ps：可使用的阿里云内地节点服务器IP</h3><pre class="line-numbers language-none"><code class="language-none">39.100.0.2 【恭喜，站点创建成功！】39.100.0.16 【恭喜，站点创建成功！】39.100.0.17 【恭喜，站点创建成功！】39.100.0.23 【Document】39.100.0.59 【恭喜，站点创建成功！】39.100.0.64 【贵州鸿巨热力(集团)有限责任公司】39.100.0.68 【恭喜，站点创建成功！】39.100.0.75 【没有找到站点】39.100.0.77 【Welcome to nginx!】39.100.0.88 【恭喜，站点创建成功！】39.100.0.94 【没有找到站点】39.100.0.113 【IIS Windows Server】39.100.0.117 【phpinfo()】39.100.0.118 【没有找到站点】39.100.0.119 【恭喜，站点创建成功！】39.100.0.134 【宁夏塞上优家互联科技有限公司】39.100.0.138 【没有找到站点】39.100.0.149 【没有找到站点】39.100.0.158 【没有找到站点】39.100.0.159 【学点云管理后台】39.100.0.167 【财经·新经济】39.100.0.168 【苏州市相城区燃气有限责任公司】39.100.0.169 【恭喜，站点创建成功！】39.100.0.174 【The page is not foun】39.100.0.177 【恭喜，站点创建成功！】39.100.0.182 【IIS7】39.100.0.192 【恭喜，站点创建成功！】39.100.0.204 【恭喜，站点创建成功！】39.100.0.209 【千胜ERP】39.100.0.214 【LANMP一键安装包,集lamp,lnm】39.100.0.238 【登录 - 大庆井下】39.100.1.1 【上海美凯龙美学装饰工程有限公司ERP】39.100.1.28 【恭喜，站点创建成功！】39.100.1.44 【IIS Windows Server】39.100.1.65 【恭喜，站点创建成功！】39.100.1.68 【Test Page for the Ng】39.100.1.95 【恭喜，站点创建成功！】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析与设计-算法实验（二）</title>
      <link href="/posts/bde0.html"/>
      <url>/posts/bde0.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>尝试用最朴素的语言，将问题阐释清楚。</p></blockquote><h3 id="算法实验6：最大子段和（四种做法）">算法实验6：最大子段和（四种做法）</h3><h4 id="题目：-最大子段和">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4805">最大子段和</a></h4><h4 id="题意：">题意：</h4><p>给定有n个整数(可能为负整数)组成的序列a1,a2,…,an,求该序列连续的子段和的最大值。 如果该子段的所有元素和是负整数时定义其最大子段和为0。</p><h4 id="输入格式">输入格式</h4><p>第一行有一个正整数n(n&lt;1000)，后面跟n个整数,绝对值都小于10000。直到文件结束。</p><h4 id="输出格式">输出格式</h4><p>输出它的最大子段和。</p><h4 id="数据范围">数据范围</h4><p>n&lt;1000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">6 -2 11 -4 13 -5 -2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">20<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="要求：">要求：</h4><blockquote><p>分别用普通O(n<sup>3</sup>)或O(n<sup>2</sup>)、分治O(nlogn)和动态规划O(n)实现。</p></blockquote><h4 id="思路：">思路：</h4><ul><li><p><strong>普通O(n<sup>3</sup>)</strong>。由于所要寻找的子段是连续的，那么我们可以遍历每个起点，对于每个起点遍历其所有终点，然后对于找到所有子段维护一个最大值即可。</p><ul><li>遍历起点需要一个循环，对于每个起点遍历终点需要一个循环，而找到起点和终点后，我们还需要遍历这一段子段来求其总和，共三重循环，时间复杂度为O(n<sup>3</sup>)。</li></ul></li><li><p><strong>O(n<sup>2</sup>)</strong>。考虑如何优化上述的三重循环，显然找起点和终点的循环是不太好优化的，那么第三重循环是否可以优化呢？</p><ul><li>重新审视一下我们 <strong>第三重循环的作用：遍历起点为i，终点为j的子段求其总和</strong>  。再看 <strong>第二重循环的作用：对于每个起点，遍历其所有终点（注意体会）</strong> 。对比两个循环的作用，我们会发现当我们在进行第三重循环的时候，实际上是在执行第二重循环已经执行过的事情。这造成了大量无意义的循环浪费。<strong>只要我们能在第二重循环直接求出起点为i，终点为j的子段的总和，就可以直接去掉第三重循环</strong>。</li><li>那么优化就很简单了，直接将第三重循环去掉，用<code>sum</code> 记录起点为i终点为j的子段，在第二重循环中，每让 <code>sum</code> 加一次，就维护一次最大值即可。两重循环，时间复杂度为O(n<sup>2</sup>)。</li></ul></li><li><p><strong>分治O(nlogn)</strong>。好消息：分治一般用递归写，递归写法一般都很简单。坏消息：不会写递归。</p><ul><li>让我们再回忆一下分治的思想：将大问题分解为小问题，直到小问题可以直接解决，然后从小到大最终将问题解决。考虑如何用分治思想去做？如果只有2个数，我们可以直接得到子段的最大值吗？可以。如果只有一个数可以吗？可以。我们会发现，问题的规模越小越容易得到答案。</li><li>那么分治的思路就出来了，我们可以<strong>将序列一分为二，先找左边子段最大值，然后找出右边子段最大值</strong>，最后比较左右两边子段最大值谁更大就好了。考虑一个问题，子段的起点和终点总是在一侧？显然不是。此时还有一种情况我们没有考虑到，如果某个子段起点在左边，终点在右边呢？很简单，我们只需要<strong>从序列分割点开始，分别向左和向右开始遍历，找到起点为分割点终点在左边的最大值和起点为分割点终点在右边的最大值，然后将两个值相加就是起点与终点在不同侧的最大值</strong>。</li><li>此时我们得到了三个值：起点和终点都在左边的最大值，起点和终点都在右边的最大值，起点和终点在不同侧的最大值。比较三者得到最后的答案。什么，你问我递归在哪？让我考考你，我们如何求左边和右边的最大值呢？交给递归就好啦hhh。</li></ul></li><li><p><strong>动态规划O(n)</strong>。动态规划的代码一般很简单，但是递推方程不太好想。</p><ul><li><p>考虑找n个数的最大子段和的子问题是什么？显然，是找n-1个数的最大子段和。找n-1个数的呢？那就是找n-2个数。一直找下去，直到找1个数的最大子段和。而1个数的最大子段和显然就是它自己。我们找到了1个数的最大字段和，那么求2个数最大子段和的时候就很简单了，如果第1个数小于0，那么2个数的最大子段和就是第2个数，否则就是第2个数加第1个数。</p></li><li><p>将上述思路延伸之后：每次都在序列后面加一个数，然后判断前面n-1个数的最大子段和是否大于0，如果大于0，n个数的最大子段和就是前n-1个数的最大子段和加第n个数，否则就只有第n个数。这样做是否可以保证正确性呢？很遗憾是否定的。因为这样我们无法保证子段是连续的，例如前4个的最大子段和是第1个数和第2个数的和，那么第五个数就不能直接加在前4个的最大子段和上。怎么办</p></li><li><p>其实很简单，我们可以用 <code>f[i]</code> 来表示以第i个数结尾的所有子段和中的最大值。那么就可以得到递推公式：<br>$$<br>f[i]=(f[i-1]&gt;0?f[i-1]+a[i]:a[i]);<br>$$</p></li></ul></li><li><p>因为 <code>f[i]</code> 是以位置i为终点的所有子段的最大值，所以一定包含 <code>a[i]</code> 。考虑如果 <code>f[i-1]&gt;0</code> ，<code>f[i]</code> 和 <code>f[i-1]</code> 的关系。显然，<code>f[i]</code> 一定包含 <code>f[i-1]</code>。因为此时一定有：<code>f[i-1]+a[i]&gt;a[i]</code>。而如果 <code>f[i-1]&lt;0</code>，那么 <code>f[i]</code> 显然不包含 <code>f[i-1]</code> 更好。</p></li></ul><h4 id="普通O-n3-代码：">普通O(n<sup>3</sup>)代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     ll mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//遍历起点</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//对于每个起点遍历终点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ll sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">//遍历起点为i，终点为j的子段，sum为其总和</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>sum<span class="token operator">+=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//mm维护所有子段的最大值</span>            mm<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mm<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span>mm<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="O-n2-代码：">O(n<sup>2</sup>)代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     ll mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//对于每个起点，找到所有终点，就已经遍历了所有可能</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            mm<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    mm<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span>mm<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分治O-nlogn-代码：">分治O(nlogn)代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> ll <span class="token function">slove</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> m<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    ll lm<span class="token operator">=</span><span class="token function">slove</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首尾均在左边的最大值</span>    ll rm<span class="token operator">=</span><span class="token function">slove</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首尾均在右边的最大值</span>    lm<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>lm<span class="token punctuation">,</span>rm<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//首尾在两侧的最大值</span>    ll mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>resl<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>resr<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span>l<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mm<span class="token operator">+=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        resl<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>resl<span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mm<span class="token operator">+=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        resr<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>resr<span class="token punctuation">,</span>mm<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>         ll res<span class="token operator">=</span>resr<span class="token operator">+</span>resl<span class="token punctuation">;</span>    res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>lm<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>res<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     ll ans<span class="token operator">=</span><span class="token function">slove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>     <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="动态规划O-n-代码：">动态规划O(n)代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token comment">//f[i]表示以位置i为结尾的最大字段和 </span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//初始化，以第一个数为终点的子段值一定为a[1]</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>         f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">?</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>         mm<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         cout<span class="token operator">&lt;&lt;</span>mm<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实验7：矩阵连乘">算法实验7：矩阵连乘</h3><h4 id="题目：-矩阵连乘">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4806">矩阵连乘</a></h4><h4 id="题意：-2">题意：</h4><p>给你2个矩阵A、B，我们使用标准的矩阵相乘定义C=AB如下： A数组中栏（column）的数目一定要等于B数组中列（row）的数目才可以做此2数组的相乘。若我们以rows(A)，columns(A)分 别代表A数组中列及栏的数目，要计算C数组共需要的乘法的数目为：rows(A)*columns(B)*columns(A)。例如：A数组是一个 10 x 20的矩阵，B数组是个20 x 15的矩阵，那么要算出C数组需要做10 * 15 * 20，也就是3000次乘法。 要计算超过2个以上的矩阵相乘就得决定要用怎样的顺序来做。例如：X、Y、Z都是矩阵，要计算XYZ的话可以有2种选择：(XY)Z 或者 X(YZ)。假设X是5 x 10的数组，Y是10 x 20的数组，Z是20 x 35的数组，那个不同的运算顺序所需的乘法数会有不同： (XY)Z • 5 * 20 * 10 = 1000次乘法完成(XY)，并得到一5x20的数组。 • 5 * 35 * 20 = 3500次乘法得到最后的结果。 • 总共需要的乘法的次数：1000+3500=4500。 X(YZ) • 10 * 35 * 20 = 7000次乘法完成(YZ)，并得到一10 x 35的数组。 • 5 * 35 * 10 = 1750次乘法得到最后的结果。 • 总共需要的乘法的次数：7000+1750=8750。 很明显的，我们可以知道计算(XY)Z会使用较少次的乘法。 这个问题是：给你一些矩阵，你要写一个程序来决定该如何相乘的顺序，使得用到乘法的次数会最少。</p><h4 id="输入格式-2">输入格式</h4><p>含有多组测试数据，每组测试数据的第一列，含有1个整数N（N &lt;= 10）代表有多少个数组要相乘。接下来有N对整数，代表一数组的列数及栏数。这N个数组的顺序与要你相乘的数组顺序是一样的。N=0代表输入结束。请参考Sample Input。</p><h4 id="输出格式-2">输出格式</h4><p>每组测试数据输出一列，内容为矩阵相乘的顺序（以刮号来表示）使得所用的乘法次数最小。如果有不只一组答案，输出任一组均可。请参考Sample Output。</p><h4 id="数据范围-2">数据范围</h4><p>N &lt;= 10</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">31 55 2020 135 1010 2020 35630 3535 1515 55 1010 2020 250<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">Case 1: (A1 x (A2 x A3))Case 2: ((A1 x A2) x A3)Case 3: ((A1 x (A2 x A3)) x ((A4 x A5) x A6))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li><p><strong>朴素思想</strong>。给我们n个矩阵，然后问我们什么样的计算顺序可以使得最后的总乘积最小。最简单的思想就是遍历n个矩阵的所有排序，计算出所有排序方式各自的总乘积，维护一个最小值。但这样带来的问题是时间复杂度非常的高。随着n的增大，花费的时间是指数增长的。</p></li><li><p><strong>动态规划</strong>。我们将n个矩阵放在水平线上，同时去掉相邻相同的数。例如样例2为：[5,10,50,35]</p><ul><li>第一步，<strong>分析最优解的结构</strong>：将矩阵连乘的积A<sub>i</sub>A<sub>i+1</sub>…A<sub>j</sub> 简记为 <code>A[1:n]</code> ，则如果 <code>A[1:n]</code> 是最优乘积，那么<code>A[1:k]</code> (k&lt;=n)一定也是最优的。因为如果有一种更好的次序可以使得 <code>A[1:k]</code> 乘积更小，那么 <code>A[1:n]</code> 就一定有乘积更小的排序方式。同理 <code>A[k+1:n]</code> 也一定是最优的计算次序。</li><li>第二步，<strong>建立递归关系</strong>：设 <code>m[i][j]</code> 表示：矩阵i到矩阵j乘积最小值。原问题的最优值就是 <code>m[1][n]</code> 。当i=j时，<code>A[i:j]</code> = <code>A[i]</code>，无需计算，所以计算次数为0。当i&lt;j时，可以利用最优子结构计算 <code>m[i][j]</code> 。例如，如果 <code>A[i:j]</code> 的最优次序在A<sub>k</sub>和A<sub>k+1</sub>之间断开，i&lt;=k&lt;=j，则可得式1： <code>m[i][j]</code> = <code>m[i][k]</code>+<code>m[k+1][j]</code>+p<sub>i-1</sub>×p<sub>k</sub>×p<sub>j</sub>。此时我们还不知道k的位置，但是k的位置只有j-i种可能，所以k∈{i,i+1,…,j-1}。也即k是上述j-i种可能中使得式1计算量最小的那个位置。</li><li>于是我们可以得到递推公式：当i=j，<code>m[i][j]</code>=0；当i&lt;j，min<sub>i&lt;=k&lt;=j</sub> {<code>m[i][k]</code>+<code>m[k+1][j]</code>+p<sub>i-1</sub>×p<sub>k</sub>×p<sub>j</sub>}。</li><li>第三步，<strong>计算最优值</strong>。如果我们简单的从上往下进行递归，时间复杂度依然是指数级别，这是因为我们在递归计算时将不同的子问题大量重复计算了。如何保证每个子问题只计算一次？我们可以从下往上进行递归。按照矩阵长度由小到大的进递归计算，这样的方式是自底而上的。</li><li><strong>如何记录最优次序</strong>？我们会发现每次找到的k就是 <code>A[i:j]</code> 最优次序的分割点，如果我们能记录下每次k分割哪两部分，我们就能找到最优次序。可以用 <code>s[i][j]</code> 表示当矩阵i到矩阵j乘积为最小值时，分割点是哪个矩阵。每次找到k值时记录在 <code>s[i][j]</code> 中，然后递归回溯直接输出就可以了。</li></ul></li></ul><h4 id="动态规划代码：">动态规划代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//m[i][j]：矩阵i到矩阵j乘积最小值</span><span class="token comment">//s[i][j]：当矩阵i到矩阵j乘积为最小值时，分割点是哪个矩阵。例如，当s[1][3]=1时，表示1和2断开</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>m<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//动态规划，找到最优的计算次序</span><span class="token keyword">void</span> <span class="token function">matrixChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//当只有一个矩阵时，不需要计算</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">//r表示矩阵连乘的长度。例如当r=3时，表示有三个相邻矩阵相乘</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>r<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//i为当前矩阵连乘的起点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token operator">-</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//j是当前矩阵连乘的终点</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>            <span class="token comment">//k遍历[i,j-1]，找到可以使得矩阵i到矩阵j乘积最小的分割点</span>            <span class="token comment">//为什么k不取j?因为我们规定s[i][j]=u，表示u和u+1断开，所以最多遍历到j-1</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> t<span class="token operator">=</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>m<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>p<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">&lt;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>                    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//递归，输出最优的计算次序</span><span class="token keyword">void</span> <span class="token function">traceback</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//s[i][j]表示矩阵i到矩阵j的最佳分割点，当只有一个矩阵时，最佳分割点就是自己</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//递归一目了然：( { i, s[i][j] } x { s[i][j]+1, j } )</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"("</span><span class="token punctuation">;</span>    <span class="token comment">//输出i到s[i][j]的最佳分割点</span>    <span class="token function">traceback</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">" x "</span><span class="token punctuation">;</span>    <span class="token comment">//输出s[i][j]+1到j的最佳分割点</span>    <span class="token function">traceback</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//cout&lt;&lt;"multiply A"&lt;&lt;i&lt;&lt;","&lt;&lt;s[i][j]&lt;&lt;"and A"&lt;&lt;s[i][j]+1&lt;&lt;","&lt;&lt;j&lt;&lt;endl;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">")"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> CASE<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&amp;&amp;</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> x<span class="token punctuation">;</span>            cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                 <span class="token function">matrixChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"Case "</span><span class="token operator">&lt;&lt;</span><span class="token operator">++</span>CASE<span class="token operator">&lt;&lt;</span><span class="token string">": "</span><span class="token punctuation">;</span>        <span class="token function">traceback</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实验8：划分问题">算法实验8：划分问题</h3><h4 id="题目：-划分问题">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4807">划分问题</a></h4><h4 id="题意：-3">题意：</h4><p>给定一个正整数的集合A={a1,a2,….,an},是否可以将其分割成两个子集合，使两个子集合的数加起来的和相等。例A = { 1, 3, 8, 4, 10} 可以分割：{1, 8, 4} 及 {3, 10}</p><h4 id="输入格式-3">输入格式</h4><p>第一行集合元素个数n（n &lt;=300）， 第二行n个整数。</p><h4 id="输出格式-3">输出格式</h4><p>如果能划分成两个集合，输出任意一个子集，否则输出“no”。</p><h4 id="数据范围-3">数据范围</h4><p>N &lt;=  300</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">51 3 8 4 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">3 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li><strong>背包问题</strong>。由于题目要求我们将所有数都分到两个集合之一中，那么如果所有数的总和是奇数，显然无法得到两个相同值的集合。所以我们可以在输入的时候就计算一下所有数的总和 <code>sum</code> ，若 <code>sum</code> 为奇数，则直接输出 <code>no</code> 。</li><li>我们已经知道所有数的总和为 <code>sum</code> ，那么问题就转为了是否能找到任意个数，使得它们的值总和刚好为 <code>sum/2</code> ，如果可以找到，显然这就是其中一种划分方式。而这恰与背包问题相契合。</li><li>用 <code>bool</code> 类型的 <code>f[i][j]</code> 表示：前i个元素是否可以凑出和为j的值。原问题就转化为求 <code>f[n][sum/2]</code> 是否为真，如果为真说明是可以找到划分方式的，反之则不可以。当i=1时，只有放与不放第1个数，所以<code>f[1][0]</code> 和 <code>f[1][a[1]]</code> 均为真。当i&gt;1时，如果 <code>f[i-1][j]</code> 为真，则<code>f[i][j]</code> 也为真，不放第i个数就好了。而如果 <code>f[i-1][j-a[i]]</code> 为真，则<code>f[i][j]</code> 也为真，因为此时放入第i个数刚好可以得到<code>f[i][j]</code> 。但是后者要注意判断<code>j-a[i]</code> 是不能小于0的，因为我们所给定的数均为正整数。</li><li>如果 <code>f[n][sum/2]</code> 为真，如何找到其中一种划分方式？我们可以根据 <code>sum/2</code> 和 <code>f[i][j]</code> 的值回溯。<ul><li>第i件物品如果放进来了一定符合两个条件：1.前i件物品在当前空间下可以放满。2.前i件物品在不放第i件物品的前提下无法放满当前空间。</li></ul></li><li>如欲了解更多背包问题：<a href="https://xinyi127.cn/posts/7746aefe.html">背包问题模板 | ❤梧桐苑 </a></li></ul><h4 id="01背包代码：">01背包代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e2</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">//system("pause");</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     sum<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">//f[i][j]为 true表示：前i个元素可以凑出和为j的值</span>    <span class="token keyword">bool</span> f<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//将j视为背包空间，a[i]视为物品体积，有点背包的意思</span><span class="token comment">//注意判断条件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token comment">//system("pause");</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//往回找，第i件物品如果放进来了一定符合两个条件：</span>    <span class="token comment">//1.前i件物品在当前空间下可以放满</span>    <span class="token comment">//2.前i件物品在不放第i件物品的前提下无法放满当前空间</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>            sum<span class="token operator">-=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>     <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实验9：背包">算法实验9：背包</h3><h4 id="题目：-背包">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4808">背包</a></h4><h4 id="题意：-4">题意：</h4><p>卖方：这件商品14元<br>买方：给你20元<br>卖方：不好意思，我的零钱不够<br>买方：好吧，这是15元，剩的当小费</p><p>当到一个地方旅游时，如果你买东西的地方不支持信用，带零钱还是非常有用的。特别是有时候卖方没有零钱，如果你没有刚好的钱，你需要支付比卖价多一点。</p><p>当然你想付尽量少的钱（至少是商品价值的钱）。并且，当支付最少钱的时候，也最好是支付的硬币的数量最少。</p><h4 id="输入格式-4">输入格式</h4><p>第一行包含一个整数表示测试数据的组数。每组测试数据每一行包含一个整数，表示你需要付的钱数，钱数不超过10000元。接下来包含一个整数n，表示你所拥有的钱的数量，n最多是100,接下来的n行每行一个整数，表示你有的每个硬币的面值，注意钱的面值可以是任意的，不和我们现在用的面值一样，钱的面值不超过10000元。</p><h4 id="输出格式-4">输出格式</h4><p>对每组测试数据，在一行上输出两个整数：需要支付的钱数和数量。</p><h4 id="数据范围-4">数据范围</h4><p>目标钱数 &lt;= 10000</p><p>n &lt;= 10000</p><p>硬币面值 &lt;= 10000</p><h4 id="输入样例：-4">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">11400350010002000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-4">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1500 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-4">思路：</h4><ul><li><strong>背包问题</strong>。01背包的简单变形。考虑将目标钱数视为背包容量，每个硬币的价值是物品体积，那么问题就转化为找到x件物品，使得它们的体积之和不小于背包容量的前提下，尽可能的小。在满足这个前提下物品数要尽可能的少。</li><li>其实物品的数量我们不需要额外考虑，因为在满足 <strong>物品总体积</strong> 尽可能小的前提下，已经隐含了 <strong>物品数</strong> 尽可能的少。因为如果此时我们已经满足了物品总体积不小于背包容量，且物品总体积不可能更小，那么显然此时我们无法拿出任何物品。</li><li>已经知道了是01背包，可以很容易得到状态压缩下的转移方程： <code>f[j]=min(f[j],f[j-a[i]]);</code> 。<ul><li><code>f[j]</code> ：价值j最少需要 <code>f[j]</code> 枚硬币。 <code>a[i]</code> ：第i枚硬币的价值是 <code>a[i]</code> 。</li></ul></li><li>直接套01背包模板会出错，因为01背包不需要考虑是否能填满，而是在不大于背包容量的前提下让物品总价值尽可能的大。我们可以在遍历背包容量时从更大的容量开始，那么从什么时候开始遍历呢？很容易想到的是从所有硬币总价值开始遍历，但是这样做会超时。事实上我们没有必要遍历全部的价值。</li><li>因为目标钱最多是10000，而每个硬币的最大价值是10000，所以极限情况是目标价值：10000，硬币：9999 9999 9999 9999 ，最多遍历到20000就够了。</li><li>最后我们需要从m（目标价值）开始遍历，最多到20000结束，寻找不小于m的价值中可以凑齐的最小价值。</li><li>如欲了解更多背包问题：<a href="https://xinyi127.cn/posts/7746aefe.html">背包问题模板 | ❤梧桐苑 </a></li></ul><h4 id="01背包代码：-2">01背包代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e2</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">2e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//达到价值i最少要f[i]枚硬币</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token comment">//目标钱 硬币数</span>        cin<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//价值0不需要硬币</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//从所有硬币总价值开始遍历会超时</span>            <span class="token comment">//事实上我们没有必要遍历全部的价值。因为目标钱最多是10000，而每个硬币的最大价值是10000，</span>            <span class="token comment">//所以极限情况是目标钱10000，硬币9999 9999 9999 9999 ，最多遍历到20000就够了</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>M<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>                f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>M<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>         <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法实验10：会场安排问题">算法实验10：会场安排问题</h2><h4 id="题目：-会场安排问题">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4809">会场安排问题</a></h4><h4 id="题意：-5">题意：</h4><p>假设要在足够多的会场里安排一批活动，并希望使用尽可能少的会场。设计一个有效的贪心算法进行安排。（这个问题实际上是著名的图着色问题。若将每一个活动作为图的一个顶点，不相容活动间用边相连。使相邻顶点着有不同颜色的最小着色数，相应于要找的最小会场数。） 对于给定的k个待安排的活动，计算使用最少会场的时间表。</p><h4 id="输入格式-5">输入格式</h4><p>输入数据的第一行有1 个正整数k（k≤10000），表示有k个待安排的活动。接下来的k行中，每行有2个正整数，分别表示k个待安排的活动开始时间和结束时间。时间以0 点开始的分钟计。</p><h4 id="输出格式-5">输出格式</h4><p>输出一个整数，表示最少会场数。</p><h4 id="数据范围-5">数据范围</h4><p>1 ≤ k ≤ 10000</p><h4 id="输入样例：-5">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">51 2312 2825 3527 8036 50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-5">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-5">思路：</h4><ul><li><strong>贪心</strong> 。这道题目是“活动安排”题目的变形。“活动安排”要求我们在一间会场中安排活动，求最多能安排多少不冲突的活动；而该题会场数量不限，要求所有活动都要安排到某一间会场中，求最后最少需要多少会场。</li><li><strong>优先队列</strong> 。考虑将所有活动按开始时间排序，将最先开始的活动安排到第一间会场中，然后从第二件活动开始遍历，看已经安排了活动的会场中最后一件活动的结束时间是否小于当前活动，如果有就将当前活动加入到其中 <strong>任意</strong> 一间会场中。否则就新开一间会场，放入该活动。<ul><li>为什么可以任意放到满足要求的会场中？因为我们是按活动开始排序的，如果当前活动的开始时间大于目前所有会场的结束时间，那么后面的活动也一定满足该条件，同时由于活动的结束时间是固定的，所以无论我们放到哪一间会场，结束时间都相同。</li></ul></li><li>如何快速找到满足条件的会场？优先队列实现。优先队列会自动对放入的会场结束时间升序排序，所以如果队首元素不满足条件，那么后面的所有会场也一定不满足。同理如果至少有一间会场满足，那么队首元素也一定满足。</li><li><strong>双指针算法</strong> 。比较牛的一种做法。本质上是一个模拟的过程，遍历所有活动看是否有空闲的会场：<ul><li>如果有，将该活动安排到最早结束的会场。中。</li><li>如果没有就新开一个会场。</li></ul></li><li>重点在于对开始时间的遍历，与优先队列核心思想是一致的</li><li>参考： <a href="https://xinyi127.cn/posts/16f38d08.html">会场安排问题 | ❤梧桐苑</a></li></ul><h4 id="优先队列代码：">优先队列代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//first开始时间 second结束时间</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span>          q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="双指针算法">双指针算法</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ios<span class="token double-colon punctuation">::</span><span class="token function">sync_with_stdio</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cin<span class="token punctuation">.</span><span class="token function">tie</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//本质上是一个模拟的过程，遍历所有活动的开始时间看是否有空闲的会场</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//b[j]表示当前所有已安排活动的会场中"最早"的结束时间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法分析与设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java程序设计》实验八-接口和实现</title>
      <link href="/posts/2567.html"/>
      <url>/posts/2567.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote><p>记录一下做过的题目，虽然作为入门题目很简单，不过还是可以学到一些东西的hh。</p></blockquote><h3 id="程序设计一-接口：">程序设计一 接口：</h3><h4 id="题目："><strong>题目：</strong></h4><blockquote><p>设计一个天气预报的程序：</p><p>（1）设计一个面向接口的类，这个类中有一个可以播报天气预报的方法，天气预报方法的输入参数是一个接口参数；</p><p>（2）设计一个接口，规定不同的气象状态的播报形式；</p><p>（3）请分别播报晴天、下雨、雪天的天气状况。</p></blockquote><h4 id="天气状态接口"><strong>天气状态接口</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> weatherstate<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="实现接口的类"><strong>实现接口的类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> qingstate <span class="token keyword">implements</span> weatherstate<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"晴，空气清新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> yustate <span class="token keyword">implements</span> weatherstate<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"阴转小雨，请注意带伞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> xuestate <span class="token keyword">implements</span> weatherstate<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多云转雪，请注意保暖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="天气类"><strong>天气类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> weather <span class="token punctuation">{</span>    weatherstate ws<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ws<span class="token punctuation">.</span><span class="token function">showState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setstate</span><span class="token punctuation">(</span>weatherstate ws<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ws<span class="token operator">=</span>ws<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主函数"><strong>主函数</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> weatheryubao<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        weather wy <span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">weather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wy<span class="token punctuation">.</span><span class="token function">setstate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">qingstate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"晴天："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wy<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wy<span class="token punctuation">.</span><span class="token function">setstate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">yustate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"雨天："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wy<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wy<span class="token punctuation">.</span><span class="token function">setstate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">xuestate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"雪天："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wy<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小tips"><strong>小tips:</strong></h4><ul><li><strong>接口不是类</strong>，它是 <code>Java</code> 中的一个抽象类型，是抽象方法的集合。通常用 <code>interface</code> 来声明。一个类通过继承接口，从而继承接口的抽象方法。</li><li>接口无法被实例化，但是可以被实现。和抽象类一样，实现接口的类必须实现接口中所有的抽象方法，否则声明自己为抽象类。</li><li><strong>接口不能实例化对象。没有构造方法。不能包含成员变量</strong>，除了 <code>static</code> 和 <code>final</code> 变量。</li><li>注意，接口不是被类继承了，而是要被类实现。换句话说，<strong>接口的实现</strong> ≠ <strong>接口的继承。</strong> 接口的实现是通过另一个类来实现的，而接口的继承是指某个接口继承了另外一个接口。</li><li>接口支持多继承，也即一个接口可以同时继承多个接口，这和类的继承不同。</li><li>类使用 <code>implements</code> 关键字实现接口。一个类可以实现多个接口。</li><li><strong>接口其实也是为了实现多态。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Java程序设计》试验七-继承和多态</title>
      <link href="/posts/25b9.html"/>
      <url>/posts/25b9.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言">前言</h3><blockquote><p>记录一下做过的题目，虽然作为入门题目很简单，不过还是可以学到东西的hh。</p></blockquote><h3 id="程序设计一-继承：">程序设计一 继承：</h3><h4 id="题目："><strong>题目：</strong></h4><blockquote><p>编写程序设计模拟中国人、美国人及北京人，除主类外，有4个类，People、ChinaPeople、AmericanPeople和BeijingPeople。要去如下：</p><p>（1）People类有权限是protected的double型成员变量height和weight，以及public void speakHello()、public void averageHeight()、public void averageWeight()方法。</p><p>（2）ChinaPeople类是People的子类，新增了public void chinaGongfu()（输出“坐如钟、站如松、睡如弓”）方法。根据people类，重写父类的public void speakHello()、public void averageHeight()、public void averageWeight()方法。</p><p>（3）AmericanPeople类是People的子类，新增了public void americanBoxing()（输出“直拳、勾拳、组合拳”）方法。根据people类，重写父类的public void speakHello()、public void averageHeight()、public void averageWeight()方法。</p><p>（4）BeijingPeople类是ChinaPeople的子类，新增了public void BeijingOpera()（输出“花脸、青衣”）方法。根据ChinaPeople类，重写父类的public void speakHello()、public void averageHeight()、public void averageWeight()方法。</p><p>（5）主类中：分别创建ChinaPeople、AmericanPeople、BeijingPeople对象，通过对象分别调用继承的方法：speakHello()、averageHeight()、averageWeight()方法，及子类中自己的方法。</p></blockquote><h4 id="People类"><strong>People类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验<span class="token number">7</span>people类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">double</span> height<span class="token punctuation">,</span>weight<span class="token punctuation">;</span>    <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">,</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token operator">=</span>height<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight<span class="token operator">=</span>weight<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speakHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"人类平均身高：%.2f\n"</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"人类平均体重：%.2f\n"</span><span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ChinaPeople类"><strong>ChinaPeople类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验<span class="token number">7</span>people类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChinaPeople</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token class-name">ChinaPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">ChinaPeople</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">,</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chinaGongfu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"坐如钟、站如松、睡如弓"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speakHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"你好！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"中国人平均身高：%.2f\n"</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"中国人平均体重：%.2f\n"</span><span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AmericanPeople类"><strong>AmericanPeople类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验<span class="token number">7</span>people类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AmericanPeople</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token class-name">AmericanPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">AmericanPeople</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">,</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">americanBoxing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直拳、勾拳、组合拳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speakHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"美国人平均身高：%.2f\n"</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"美国人平均体重：%.2f\n"</span><span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BeijingPeople类"><strong>BeijingPeople类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验<span class="token number">7</span>people类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeijingPeople</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token class-name">BeijingPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token class-name">BeijingPeople</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">,</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">BeijingOpera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花脸、青衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speakHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您吃了吗？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"北京人平均身高：%.2f\n"</span><span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">averageWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"北京人平均体重：%.2f\n"</span><span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主函数"><strong>主函数</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验<span class="token number">7</span>people类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">ChinaPeople</span> cp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ChinaPeople</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AmericanPeople</span> ap<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">AmericanPeople</span><span class="token punctuation">(</span><span class="token number">11.0</span><span class="token punctuation">,</span><span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeijingPeople</span> bp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BeijingPeople</span><span class="token punctuation">(</span><span class="token number">12.0</span><span class="token punctuation">,</span><span class="token number">5.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp<span class="token punctuation">.</span><span class="token function">chinaGongfu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp<span class="token punctuation">.</span><span class="token function">speakHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp<span class="token punctuation">.</span><span class="token function">averageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cp<span class="token punctuation">.</span><span class="token function">averageWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ap<span class="token punctuation">.</span><span class="token function">americanBoxing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        ap<span class="token punctuation">.</span><span class="token function">speakHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ap<span class="token punctuation">.</span><span class="token function">averageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ap<span class="token punctuation">.</span><span class="token function">averageWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token namespace">bp<span class="token punctuation">.</span></span>BeijingOpera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span><span class="token function">speakHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span><span class="token function">averageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span><span class="token function">averageWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小tips"><strong>小tips:</strong></h4><ul><li>如果想要A类继承B类，只需要在A类的名字后加 <code>extends B</code> 。</li><li><code>java</code> 中子类只能继承一个父类。</li><li>如果子类重写了父类的方法，那么子类对象在调用该方法时，将默认调用子类方法。如果想<strong>调用父类被重写的方法，需要用</strong> <code>super</code> 关键字。</li><li>加载子类前会先加载父类，所以<strong>父类的构造方法会在子类的构造方法之前执行</strong>。当<strong>子类实例化的时候父类不会实例化，但是会执行父类的构造方法。</strong></li><li>子类会继承父类的<strong>方法</strong>和<strong>属性</strong>，也可以<strong>重写父类的方法</strong>。如果要重写，要求：子类的<strong>返回值、方法名、参数</strong>必须均与父类相同。如果满足要求，在子类中所写的方法会自动覆盖父类的方法。</li><li>当我们创建了People父类以及它的众多子类后，当我们想创建People类的某个子类的对象时，我们依然<strong>可以将其声明为父类，而构造器用子类的构造器</strong>，例如：<code>People cp=new ChinaPeople(10.0,5.0);</code> 。这样 <code>cp</code> 是使用的依然是子类重写后的方法，但是<code>cp</code>中<strong>将不包含子类独有的方法或属性</strong>，如果想要使用子类独有的属性或方法，我们可以进行强制转换：<code>ChinaPeople cc=(ChinaPeople)cp;</code> 。注意，不可以强制转换 <code>cp</code> 为 <code>ChinaPeople</code> 类。</li><li>注意：<code>Java</code> 中没有虚函数的概念，它的普通方法就相当于 <code>c++</code> 中的虚函数，动态绑定是 <code>Java</code> 的默认行为。如果你不希望 <code>Java</code> 中某个方法具有虚函数的特性，可以使用 <code>final</code> 关键字使其变为非虚函数（<code>Java</code> 中的方法，等价于 <code>c++</code> 中的函数）。</li></ul><h3 id="程序设计二-多态：">程序设计二 多态：</h3><h4 id="题目：-2"><strong>题目：</strong></h4><blockquote><p>通过面向抽象的方式，完成：计算若干个任意图形面积的程序设计，参考思路如下：</p><p>（1）面向抽象类的程序设计：编写一个TotalArea类，为计算若干个任意图形的面积；在该类中，有一个tuxing数组的属性，表示若干个任意的图形；建立一个public double computerTotalArea()方法，用来计算全部的若干个图形的面积和；</p><p>（2）根据面向抽象类的程序设计：编写一个抽象类，定义图形tuxing，都要有一个给出面积的方法getArea()，来返回tuxing的面积。</p><p>在主类中，通过TotalArea, 建立15个圆和15个矩形，边长和半径均不相同，计算全部圆形和矩形的面积之和。</p></blockquote><h4 id="图形类"><strong>图形类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验七图形类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> tuxing <span class="token punctuation">{</span>    <span class="token comment">//抽象类不能有函数体</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="圆形类"><strong>圆形类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验七图形类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> yuan <span class="token keyword">extends</span> tuxing<span class="token punctuation">{</span>    <span class="token keyword">double</span> banjing<span class="token punctuation">;</span>    <span class="token function">yuan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">yuan</span><span class="token punctuation">(</span><span class="token keyword">double</span> banjing<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>banjing<span class="token operator">=</span>banjing<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//Math.PI：调用Math类的属性PI，其中存着π的值。</span>        <span class="token comment">//Math.pow(double a,double b); 返回a^b^</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span><span class="token operator">*</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>banjing<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩形类"><strong>矩形类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验七图形类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> juxing <span class="token keyword">extends</span> tuxing<span class="token punctuation">{</span>    <span class="token keyword">double</span> chang<span class="token punctuation">,</span>kuan<span class="token punctuation">;</span>    <span class="token function">juxing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">juxing</span><span class="token punctuation">(</span><span class="token keyword">double</span> chang<span class="token punctuation">,</span><span class="token keyword">double</span> kuan<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>chang<span class="token operator">=</span>chang<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>kuan<span class="token operator">=</span>kuan<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> chang<span class="token operator">*</span>kuan<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="TotalArea类"><strong>TotalArea类</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验七图形类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TotalArea</span> <span class="token punctuation">{</span>    tuxing<span class="token punctuation">[</span><span class="token punctuation">]</span> tx<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> sum<span class="token punctuation">;</span>    <span class="token class-name">TotalArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">TotalArea</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        tx<span class="token operator">=</span><span class="token keyword">new</span> tuxing<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">computerTotalArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>tuxing c<span class="token operator">:</span>tx<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span>c<span class="token punctuation">.</span><span class="token function">getArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="主函数-2"><strong>主函数</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> 实验七图形类<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">TotalArea</span> tx<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">TotalArea</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//三目运算符写法：   </span>            <span class="token comment">//tx.tx[i]=i%2==0?new yuan(i):new juxing(i*1.0,i+0.5); √</span>            <span class="token comment">//i%2==0?tx.tx[i]=new yuan(i):tx.tx[i]=new juxing(i*1.0,i+0.5); ×</span>            <span class="token comment">//i&amp;1?tx.tx[i]=new yuan(i):tx.tx[i]=new juxing(i*1.0,i+0.5); ×</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> tx<span class="token punctuation">.</span>tx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">yuan</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> tx<span class="token punctuation">.</span>tx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">juxing</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">1.0</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"各种图形的面积之和是：%.2f"</span><span class="token punctuation">,</span>tx<span class="token punctuation">.</span><span class="token function">computerTotalArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="小tips-2"><strong>小tips:</strong></h4><ul><li><p>所谓<strong>多态</strong>，就是让父类的对象，可以在不同情况下，使用不同子类的方法。。使用前提是：<strong>继承、重写、父类引用指向子类对象</strong> <code>Parent p = new Child();</code>。</p></li><li><p>抽象类也是为多态服务的。我们知道，<code>java</code> 所有的对象都通过类来描述，但并不是所有的类都用来描述对象。抽象类就是这样的类。它不具备足够的信息来描述一个具体的对象，所以**抽象类不能实例化对象。**但除此之外与其他类相同。</p></li><li><p>由于抽象类不能实例化对象，所以抽象类必须被继承后才能使用。<strong>抽象类表示的是一种继承关系。</strong></p></li><li><p><code>java</code> 中用 <code>abstract class</code> 来定义抽象类。用 <code>abstract</code> 关键字来定义抽象方法，抽象方法名后直接跟一个分号，没有花括号。例如： <code>abstract double Childname();</code> <strong>该方法的具体实现由该方法所属类的子类决定。</strong></p></li><li><p>**抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。**任何子类必须重写父类的抽象方法，否则必须声明自己也是抽象类。</p></li><li><p>关于三目运算符：<code>tx.tx[i]=i%2==0?new yuan(i):new juxing(i*1.0,i+0.5);</code> 这样写是正确的。而 <code>i%2==0?tx.tx[i]=new yuan(i):tx.tx[i]=new juxing(i*1.0,i+0.5);</code> 这样写就不对。同时意外发现 <code>&amp;</code> 不能用于判断条件中。</p></li><li><p><code>Math.PI</code>：调用Math类的属性PI，其中存着π的值。</p></li><li><p><code>Math.pow(double a,double b);</code> 返回值： a<sup>b</sup> 。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-Matery主题优化笔记</title>
      <link href="/posts/93b3.html"/>
      <url>/posts/93b3.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-给博客添加动态标签">1. 给博客添加动态标签</h3><h4 id="效果如图："><strong>效果如图：</strong></h4><ul><li>离开博客页面时：<img src="https://s2.loli.net/2022/10/10/ser7EfBqA1RKUnJ.png" alt="image.png"></li><li>回到博客页面时：<img src="https://s2.loli.net/2022/10/10/fl8C5iSXAcEo7Fw.png" alt="image.png"></li></ul><h4 id="步骤："><strong>步骤：</strong></h4><ol><li><p>找到：<code>Blog\themes\hexo-theme-matery\layout\layout.ejs</code> 文件</p></li><li><p>在文件底部添加如下代码：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token comment">&lt;!-- 动态标签 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">var</span> OriginTitile <span class="token operator">=</span> document<span class="token punctuation">.</span>title<span class="token punctuation">,</span> st<span class="token punctuation">;</span> document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"visibilitychange"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>hidden <span class="token operator">?</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"Σ(っ °Д °;)っ诶，页面崩溃了嘛？"</span><span class="token punctuation">,</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"φ(゜▽゜*)♪咦，又好了！"</span><span class="token punctuation">,</span> st <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> OriginTitile <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3e3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>注意，在 <code>ejs</code> 语言中，注释是： <code>&lt;!--  xxx  --&gt;</code> ，xxx为你想要注释的部分。<code>//</code> 和 <code>#</code> 均无效。</li></ul></li></ol><h3 id="2-给博客添加加载页面">2. 给博客添加加载页面</h3><h4 id="效果如图：-2"><strong>效果如图：</strong></h4><ul><li><img src="https://s2.loli.net/2022/10/10/xfX7JFuk2OMyRBq.png" alt="在加载页面时显示" style="zoom: 50%;"></li></ul><h4 id="步骤：-2"><strong>步骤：</strong></h4><ol><li><p>在 <code>Blog\themes&gt;hexo-theme-matery&gt;layout&gt;_widget</code> 下创建 <code>loading.ejs</code> 文件，添加如下代码：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>preloader<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span><span class="token delimiter punctuation">%&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-left-bg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-right-bg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spinner-box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-border-1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-core<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-border-2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>configure-core<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading-word<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>加载中...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 页面加载动画 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflow <span class="token operator">=</span> <span class="token string">'auto'</span><span class="token punctuation">;</span>      document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'loading-box'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"loaded"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%</span><span class="token language-javascript"> <span class="token punctuation">}</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Blog\themes\hexo-theme-matery\source\css</code> 下创建 <code>loading.css</code> 文件，添加如下代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#loading-box .loading-left-bg,#loading-box .loading-right-bg</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1000<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #37474f<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> all 0.5s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .loading-right-bg</span> <span class="token punctuation">{</span>  <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box&gt;.spinner-box</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">z-index</span><span class="token punctuation">:</span> 1001<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .configure-border-1</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #ffab91<span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> configure-clockwise 3s ease-in-out 0s infinite alternate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .configure-border-2</span> <span class="token punctuation">{</span>  <span class="token property">left</span><span class="token punctuation">:</span> -115px<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 115px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>63<span class="token punctuation">,</span> 249<span class="token punctuation">,</span> 220<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">animation</span><span class="token punctuation">:</span> configure-xclockwise 3s ease-in-out 0s infinite alternate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .loading-word</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0.8rem<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#loading-box .spinner-box .configure-core</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #37474f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div.loaded div.loading-left-bg</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-100%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div.loaded div.loading-right-bg</span> <span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>100%<span class="token punctuation">,</span> 0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div.loaded div.spinner-box</span> <span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> configure-clockwise</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>90deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> configure-xclockwise</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-135deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-225deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-315deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开 <code>Blog\themes\hexo-theme-matery\layout\_partial\head.ejs</code> 文件，这个文件专门用来引入样式文件和配置网页信息</p><p>在 <code>&lt;head&gt;</code> 标签中引入 <code>loading.css</code> 文件：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> theme<span class="token punctuation">.</span>jsDelivr<span class="token punctuation">.</span>url </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">url_for</span><span class="token punctuation">(</span><span class="token string">'/css/loading.css'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开 <code>Blog\themes\hexo-theme-matery\layout\layout.ejs</code> 文件，在 <code>&lt;body&gt;</code> 标签下引入结构文件 <code>loading.ejs</code> 文件：</p><pre class="line-numbers language-ejs" data-language="ejs"><code class="language-ejs"><span class="token ejs language-ejs"><span class="token delimiter punctuation">&lt;%-</span><span class="token language-javascript"> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token string">'_widget/loading'</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开 <code>Blog\themes\_config.yml</code> ，加入如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 是否开启页面加载动画</span><span class="token key atrule">preloader</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>true</code> 是开启；<code>false</code> 是关闭</li></ul></li></ol><h3 id="3-实现加密相册">3. 实现加密相册</h3><h4 id="效果如图：-3">效果如图：</h4><ul><li><img src="https://s2.loli.net/2022/10/10/FCRPicrxzWg79aZ.png" alt="image.png" style="zoom: 67%;"></li><li>当点击相册展示图片时，会先跳转到这个页面，如果输错密码会跳转到首页。</li></ul><h4 id="步骤：-3">步骤：</h4><ol><li><p>在<code>Blog</code> 文件夹下，鼠标右击打开 <code>Git bash here</code> 。</p></li><li><p>执行 <code>npm install --save hexo-blog-encrypt</code> 命令安装插件。</p></li><li><p>执行 <code>npm install crypto-js</code> 命令安装插件。</p></li><li><p>打开 <code>Blog\themes\hexo-theme-matery</code> 文件夹下的 <code>_config.yml</code> 文件，在文件底部加入如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#博文加密  npm install --save hexo-blog-encrypt</span><span class="token key atrule">encrypt</span><span class="token punctuation">:</span>   <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Blog\themes\hexo-theme-matery\scripts\helpers</code> 文件夹下创建 <code>encrypt.js</code> 文件，并加入如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* global hexo */</span><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token keyword">const</span> CryptoJS <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto-js'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>helper<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'aes'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">content<span class="token punctuation">,</span>password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  content <span class="token operator">=</span> <span class="token function">escape</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Base64<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  content <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span><span class="token constant">AES</span><span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token function">String</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> content<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>打开 <code>D:\Blog\themes\hexo-theme-matery\source\css</code> 文件夹下的 <code>my.css</code> 文件，在文件加入如下代码：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.hbe-input-container  .btn-decrypt</span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> top<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> #ffffff<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #3f90ff<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">-webkit-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">-moz-border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 3px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在新建的 <code>index.md</code> 文章内添加 <code>password</code>属性，后面写上你的密码即可，然后执行命令，查看本地效果。注意：这里的 <code>index.md</code> 是指 <code>\Blog\source\galleries\xxx</code> 文件夹下的 <code>index.md</code> 文件。xxx即你为相册页面创建的文件夹。</p></li></ol><h4 id="注意事项">注意事项</h4><ol><li>相册加密会自动加密文章，如果已经自己添加了文章加密，请在主题配置文件下关闭 <code>verifyPassword</code>。</li><li>密码必须设置为<strong>字母和数字</strong>双重组合，否则无法识别。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-Matery主题的一些问题</title>
      <link href="/posts/7546.html"/>
      <url>/posts/7546.html</url>
      
        <content type="html"><![CDATA[<h4 id="前言">前言</h4><blockquote><p>简单写了一下解决过程，以防之后再遇到类似问题束手无策，后续有时间就把详细过程补上。</p></blockquote><h4 id="1-博客不支持通过-n-x-这样的写法，实现-nx-这样的上标形式">1. 博客不支持通过 <code>n^x^</code> 这样的写法，实现 n<sup>x</sup> 这样的上标形式</h4><ul><li>需要更新插件，而且官方给的标签不能直接拿来用，有点坑。</li></ul><h4 id="2-实现Artitalk独立页面">2. 实现Artitalk独立页面</h4><ul><li>目前还很简陋，需要更新独立页面的css。</li></ul><h4 id="3-实现相册独立页面">3. 实现相册独立页面</h4><ul><li>相册加密功能亟待实现。</li></ul><h4 id="4-二级目录">4. 二级目录</h4><ul><li>多看看官方文档，然后问题就消失了。</li></ul><h4 id="5-hexo-d-报错：INFO-Validating-config">5. hexo d 报错：INFO Validating config</h4><ul><li>一般是：<code>github的仓库站点</code> 没有更新<code>Custom domain</code>值，或者 <code>本地的Blog/source</code>没有更新CNAME文件</li></ul><h4 id="6-hexo-s本地正常，hexo-d正常。部署到github上后通过域名访问网站显示：报错404-There-is-not-a-GitHub-Pages-site-here">6. hexo s本地正常，hexo d正常。部署到github上后通过域名访问网站显示：报错404 There is not a GitHub Pages site here.</h4><ul><li>是的，自上次莫名其妙404后又出现了这种情况。</li></ul><h4 id="ps">ps:</h4><ul><li>目前仅简单写了一下解决思路，以防睡一觉全忘了。后续有时间会更新详细过程。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-Matery </tag>
            
            <tag> Artitalk </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析与设计-算法实验（一）</title>
      <link href="/posts/4998.html"/>
      <url>/posts/4998.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>尝试用最朴素的语言，将问题阐释清楚。</p></blockquote><h3 id="算法实验1：4800-x-n-mod-1003">算法实验1：4800 x^n mod 1003</h3><h4 id="题目：-x-n-mod-1003">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4800">x^n mod 1003</a></h4><h4 id="题意：">题意：</h4><p>给定整数x和n,求x的n次幂 mod 1003</p><h4 id="输入格式">输入格式</h4><p>整数x和n。</p><h4 id="输出格式">输出格式</h4><p>x<sup>n</sup> mod 1003</p><h4 id="数据范围">数据范围</h4><p>1&lt;=x,n&lt;=1,000,000,0000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">2 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">21 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>递归用 <strong>快速幂思想</strong>。考虑如何快速计算 <code>x^n</code> ，将x反复乘 <code>n-1</code> 个x吗？如果n的级别达到1e9的复杂度，运行时间将会很慢。如何优化？我们注意到<strong>当n为偶数时</strong>， <code>x^n = (x^2)^(n/2)</code> ；<strong>当n为奇数时</strong>，因为整数除法向下取证，所以我们在进行 <code>n/2</code> 操作时损失了一个底数（例如当n=7时，n/2=3，x<sup>2</sup>3=x^6），所以需要<strong>额外乘一个当前底数</strong>（为什么不说x，而是用底数这个词？因为在递归的过程中底数需要平方，所以是一直在变的，我们每次单独乘底数的时候是乘当前的底数）。</li><li>这时我们会发现，每将x平方一次，n的值就会减少一半，这显然大大提高了运行速度。</li><li><strong>二进制做法</strong> 。首先需要认同一个公式：<code>x^n=x^M</code> ，M为n的二进制。这其实很好理解，M的二进制依然等于n，x的相同幂次一定相同。求x^M就会简单很多，M可以分解为许多二进制相加，也即<code>x^(m1+m2+...+mp)</code>，直观来看m1 ~ mp其实1 2 4 8 … 中的某些数，<strong>这些数代表了M二进制中1的位置所代表的数</strong>，例如n=10，则M=1010，那么m1=2，m2=8，均转为二进制m1=10，m2=1000，<code>x^(m1+m2+...+mp)=(x^m1)*(x^m2)*(x^m3)...</code> （<strong>请务必反复体会该方程，这是理解后续操作的关键</strong>），所有的m均是2的某个次方且均不相同，结合递归做法的思想中我们会发现，<strong>将底数x平方某些次数后，可以将m转为1</strong>（也即通过改变底数，将幂改为1，而结果不变），那么要将x平方几次呢？只要平方m二进制的位数次即可（每平方一次，m的值缩小一倍，m最低位记为0）。</li><li>那么我们就会发现，其实我们只要从低位开始遍历M，将底数不断平方，在M当前位数是1时，乘一次<strong>当前的底数</strong>，最后的计算结果就是我们所要求的结果——<code>x^M</code>。</li></ul><h4 id="递归代码：">递归代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">;</span> <span class="token comment">//返回x^k</span>ll <span class="token function">slove</span><span class="token punctuation">(</span>ll x<span class="token punctuation">,</span>ll k<span class="token punctuation">,</span>ll res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment">//幂等于0，结束递归</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//幂为奇数，额外乘一次当前底数</span>        res<span class="token operator">=</span>res<span class="token operator">*</span>x<span class="token operator">%</span>M<span class="token punctuation">;</span>    x<span class="token operator">=</span>x<span class="token operator">*</span>x<span class="token operator">%</span>M<span class="token punctuation">;</span><span class="token comment">//底数平方</span>    k<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//幂减小一半</span>    <span class="token keyword">return</span> <span class="token function">slove</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>k<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//继续递归，直到幂为0</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    n<span class="token operator">%=</span>M<span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token function">slove</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二进制代码：">二进制代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从低位开始存二进制</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    n<span class="token operator">%=</span>M<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">%</span>M<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     ll m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>u<span class="token operator">=</span>k<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">;</span>        u<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     ll sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>sum<span class="token operator">=</span>sum<span class="token operator">*</span>n<span class="token operator">%</span>M<span class="token punctuation">;</span>        n<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token operator">%</span>M<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>M<span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实验二：4801-汉诺塔">算法实验二：4801 汉诺塔</h3><h4 id="题目：汉诺塔">题目：<a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4801">汉诺塔</a></h4><h4 id="题意：-2">题意：</h4><p>汉诺塔（又称河内塔）问题是印度的一个古老的传说。开天辟地的神勃拉玛在一个庙里留下了三根金刚石的棒A、B和C，A上面套着n个圆的金片，最大的一个在底下，其余一个比一个小，依次叠上去，庙里的众僧不倦地把它们一个个地从A棒搬到C棒上，规定可利用中间的一根B棒作为帮助，但每次只能搬一个，而且大的不能放在小的上面。僧侣们搬得汗流满面，可惜当n很大时这辈子恐怕就很搬了 聪明的你还有计算机帮你完成，你能写一个程序帮助僧侣们完成这辈子的夙愿吗？</p><h4 id="输入格式-2">输入格式</h4><p>输入金片的个数n。这里的n&lt;=10。</p><h4 id="输出格式-2">输出格式</h4><p>输出搬动金片的全过程。格式见样例。</p><h4 id="数据范围-2">数据范围</h4><p>n&lt;=10</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">Move disk 1 from A to BMove disk 2 from A to CMove disk 1 from B to C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>我的拙见：对于递归要从思想着手去理解，因为递归的本质是分解问题。将一个大问题不断细分，找到问题的共同点，从而在解决小问题的过程中逐步解决大问题。</li><li>例如该题中，要求我们将n块石板借助B石柱，从A石柱移动到C石柱。n块石板不好解决，那么一块石板呢？我们可以立即发现可以直接从A移动到C。如果是两块石板呢？我们可以先将一块放到B上，然后将A剩下的一块石板移动到C上，然后将B上的石板移动到C上。那么三块石板呢？我们需要先将上面两块石板移动到B上，然后才能将A最后一块石板移动到C上。怎么移动呢？我们可以借助C。先将第一块石板放到C上，再将第二块石板放到B上，然后把第一块石板从C移动到B，然后将第三块石板移动到C，剩下的操作就是将B上的两块石板借助A移动到C了。</li><li>四块呢？我们会发现其实和三块时的解决方法是一样的，先将n-1块从A移动到B上，将最后一块从A移动到C，然后将B上的n-1块石板借助A移动到C。怎么实现？事实上我们将上述过程写出来，发现只有区区4行关键代码，不得不感慨实在是amazing~</li><li>思路参考：<a href="https://xinyi127.cn/posts/4aea3590.html">汉诺塔题解 | ❤梧桐苑 </a> （其实也是我写的hhh）</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从低位开始存二进制</span> <span class="token keyword">void</span> <span class="token function">slove</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> a<span class="token punctuation">,</span><span class="token keyword">char</span> b<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"Move disk "</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" from "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" to "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">slove</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move disk "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" from "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" to "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">slove</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">slove</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token char">'A'</span><span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span><span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实验3：4002-骨牌铺方格">算法实验3：4002 骨牌铺方格</h3><h4 id="题目：-骨牌铺方格">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4802"> 骨牌铺方格</a></h4><h4 id="题意：-3">题意：</h4><p>在2×n的一个长方形方格中,用一个1× 2的骨牌铺满方格,输入n ,输出铺放方案的总数. 例如n=3时,为2× 3方格，骨牌的铺放方案有三种,如下图：<img src="https://s2.loli.net/2022/10/01/BGxvbDqW43iItlg.png" alt="图片出处：骨牌铺方格"></p><h4 id="输入格式-3">输入格式</h4><p>输入数据由多行组成，每行包含一个整数n,表示该测试实例的长方形方格的规格是2×n (0&lt; n&lt;=50)。</p><h4 id="输出格式-3">输出格式</h4><p>对于每个测试实例，请输出铺放方案的总数，每个实例的输出占一行。</p><h4 id="数据范围-3">数据范围</h4><p>2×n (0&lt; n&lt;=50)</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li><p>本题需要用到 <code>long long</code> 数据类型。</p></li><li><p>本题可以用递归和矩阵快速幂两种方法实现。</p></li><li><p><strong>递归。<strong>首先我们会发现，当方格的宽度是1时，只有一种方法实现。当方格宽度是2时，只有两种方法实现。当方格宽度是3时呢？问题开始变得有趣。首先我们已经确定，我们已经得到</strong>宽度分别为1和2的方格所有的组成方式</strong> （这是解决问题的关键）。我们可以通过观察发现：如果我们在宽度为1的方格后加上两个叠着横放的方格，那么就可以组成宽度为3的方格；而在宽度为2的方格后放一个竖着的方格，也可以组成宽度为3的方格。有人可能会问，为什么不在宽度为1的方格后加两个竖着的方格组成宽度为3的方格呢？这是因为如果这样就会<strong>和宽度为2的方格重复</strong>（当我们放上第一个竖着的方格，我们得到宽度为2的方格，而我们已经保证宽度为2的当我们放上第二个竖着的方格，我们重复了之前对宽度为2的方格所进行的操作）。我们已经保证组成1和2的所有组成方式都找到了且均不相同，然后又在后面加入了不同的方格（对于宽度为1的方格，我们加入了两个叠着横放的；对于宽度为2的方格，我们加入了一个竖着的），那么就可以保证<strong>这些宽度为3的方格均不相同，且这就是所有的组成方式</strong>。</p></li><li><p>于是我们得到递推关系：<br>$$<br>F(n)=F(n-1)+F(n-2)<br>$$</p></li><li><p>根据上式我们很容易就可以写出递归函数，但是需要注意的是我们需要提前用一个数组记录中间算过的某些值，例如用a[n]记录F(n)的值，因为当我们算F(n-1)时需要用F(n-2)和F(n-3)，而如果在计算F(n)时，又要重新计算F(n-2)的话，时间复杂度将大大升高，所以如果提前记录已经递归过的某些值，将节约很多运行时间。</p></li><li><p><strong>矩阵快速幂</strong>。我们已经知道了第n项的值是前两项值的和，怎么在只知道第一项和第二项值的前提下，得到第n项的值呢？难道只能通过斐波那契的方式来做吗？我们可以换个思路，如果有某种运算，可以使得<code>(a,b)</code>（a是第一项，b是第二项）在经过运算后得到<code>(b,a+b)</code>，那么运算n-1次一样可以得到第n项的值。这种神奇的运算就是矩阵相乘。一个2×2的01矩阵可以帮助我们完成这样的运算。那么问题就就变为了怎么快速完成n-1次矩阵相乘的运算。运算n-1次吗？时间复杂度会很高，这个时候其实我们又回到了快速幂的思路上，通过改变底数（矩阵本身的值），就可以快速的降低幂的级别。这就是所谓的矩阵快速幂，矩阵只是运算的一种直观体现形式，其核心思想仍然是快速幂。</p></li><li><p>为什么初始01矩阵长这样？为什么矩阵相乘也能用快速幂？<s>答案：易得、显然、略。</s></p></li><li><p><a href="https://www.zhihu.com/question/22047061">(矩阵的本质是什么？ - 知乎 (zhihu.com)</a></p></li></ul><h4 id="递归代码：-2">递归代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从低位开始存二进制</span> ll <span class="token function">slove</span><span class="token punctuation">(</span>ll n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">slove</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">slove</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll res<span class="token operator">=</span><span class="token function">slove</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="矩阵快速幂代码">矩阵快速幂代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//        [1,1]</span><span class="token comment">//[a,b] * [1,0] = [a+b,a]</span> <span class="token comment">//                [1,1]</span><span class="token comment">//可得  [1,1] * ( [1,0] )^n = [F(n+1),F(n)]</span> <span class="token comment">// a1,a2</span><span class="token comment">// b1,b2</span><span class="token keyword">class</span> <span class="token class-name">matrix</span><span class="token punctuation">{</span>                            <span class="token keyword">public</span><span class="token operator">:</span>        ll a1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>a2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b2<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        matrix <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> matrix a<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            matrix b<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>a1<span class="token operator">=</span>a1<span class="token operator">*</span>a<span class="token punctuation">.</span>a1<span class="token operator">+</span>a2<span class="token operator">*</span>a<span class="token punctuation">.</span>b1<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>a2<span class="token operator">=</span>a1<span class="token operator">*</span>a<span class="token punctuation">.</span>a2<span class="token operator">+</span>a2<span class="token operator">*</span>a<span class="token punctuation">.</span>b2<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>b1<span class="token operator">=</span>b1<span class="token operator">*</span>a<span class="token punctuation">.</span>a1<span class="token operator">+</span>b2<span class="token operator">*</span>a<span class="token punctuation">.</span>b1<span class="token punctuation">;</span>            b<span class="token punctuation">.</span>b2<span class="token operator">=</span>b1<span class="token operator">*</span>a<span class="token punctuation">.</span>a2<span class="token operator">+</span>b2<span class="token operator">*</span>a<span class="token punctuation">.</span>b2<span class="token punctuation">;</span>            <span class="token keyword">return</span> b<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//初始的时候就是第一项，乘完第一个矩阵得到第二项</span>        matrix x<span class="token punctuation">,</span>k<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>x<span class="token operator">=</span>x<span class="token operator">*</span>k<span class="token punctuation">;</span>            n<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">;</span>            k<span class="token operator">=</span>k<span class="token operator">*</span>k<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//cout&lt;&lt;x.a1&lt;&lt;" "&lt;&lt;x.a2&lt;&lt;" "&lt;&lt;x.b1&lt;&lt;" "&lt;&lt;x.b2&lt;&lt;endl;</span>        cout<span class="token operator">&lt;&lt;</span>x<span class="token punctuation">.</span>a1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实验4：4003-棋盘覆盖">算法实验4：4003 棋盘覆盖</h3><h4 id="题目：-棋盘覆盖">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4803">棋盘覆盖</a></h4><h4 id="题意：-4">题意：</h4><p>在一个2^k x 2^k 个方格组成的棋盘中，恰有一个方格与其他方格不同，称该方格为一特殊方格，且称该棋盘为一特殊棋盘。在棋盘覆盖问题中，要用图示的4种不同形态的L型骨牌覆盖给定的特殊棋盘上除特殊方格以外的所有方格，且任何2个L型骨牌不得重叠覆盖。</p><h4 id="输入格式-4">输入格式</h4><p>k，dr，dc。k定义如前，dr，dc分别表示特殊方格所在的行号和列号 1= &lt; k &lt; =6</p><h4 id="输出格式-4">输出格式</h4><p>按照左上，右上，左下，右下的顺序用分治法求解。特殊方格标0，其他位置按上述顺序依次标记。</p><h4 id="数据范围-4">数据范围</h4><p>1= &lt; k &lt; =6</p><h4 id="输入样例：-4">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">2 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：-4">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2 2 3 3 2 0 1 3 4 1 1 5 4 4 5 5  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-4">思路：</h4><ul><li><strong>分治</strong> 。什么是分治？比如我们有10个苹果，要我们找出最重的一个，怎么找？我们会两个两个比较，轻的排除，重的留下。最后剩下的那个就是最重的对吧，其实这就已经涉及到了分治的思想。所谓分治，就是把大的问题分解，只要我们无法立即解决该问题就接着分解，直到我们可以直接解决所分解出来的子问题时，我们就停止分解并解决子问题。通过解决子问题最终解决大问题。比如我们无法直接得到10个苹果中谁是最重的一个，但是我们可以知道两个苹果中谁更重，那我们就两个两个比，这样比下去就可以得到10个里谁最重。分治就是这样。</li><li>怎么利用分治解决该问题？还是像苹果那样思考，一个10×10有特殊方格的棋盘我们很难直接覆盖，那么一个2×2有特殊方格的棋盘呢？我们可以立即解决，直接在另外三个正常方格上放骨牌就好了嘛。考虑4×4的棋盘呢？我们分成4个2×2<strong>有特殊方格的棋盘</strong>就好了呀，怎么分呢？由于骨牌占三个方格，而特殊方格一定在所分的四个小棋盘中某个，所以我们直接将三个自定义的特殊方格放在最中间（也即四个小棋盘的两个分界线的交汇处），使其能够组成一个骨牌状就好了。8×8呢？我们发现还是和4×4一样的做法，只要我们解决不了当前的问题，那就将问题分解，直到我们可以解决。</li><li>为什么要分成四个有特殊方格的棋盘？因为整个大问题就是有特殊方格的，为了保持问题的一致性， 我们所分解的小方格也要有特殊方格，只不过我们自定义的特殊方格可以放骨牌。</li><li>怎么确定特殊方格的位置？因为我们分解成了四个小棋盘，原特殊方格一定在四个小棋盘之一，所以我们需要将另外三个自定义的特殊方格放在一起，可以用一个骨牌将三个自定义特殊方格全部覆盖就好了，放在哪呢？显然我们要放在整个大棋盘的最中央。<strong>具体特殊方格在小棋盘中的位置，要根据小棋盘在大棋盘中的位置来确定。</strong></li></ul><h4 id="递归代码：-3">递归代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token number">1e2</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span> <span class="token keyword">int</span> m<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>Case<span class="token punctuation">;</span> <span class="token comment">//将整个大矩阵不断分解为4个均含有特殊格的小矩阵，以此将问题规模缩小。</span><span class="token comment">//根据小矩阵的位置设置特殊方格位置</span><span class="token keyword">void</span> <span class="token function">chessBoard</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz<span class="token punctuation">,</span><span class="token keyword">int</span> dr<span class="token punctuation">,</span><span class="token keyword">int</span> dc<span class="token punctuation">,</span><span class="token keyword">int</span> lr<span class="token punctuation">,</span><span class="token keyword">int</span> lc<span class="token punctuation">)</span><span class="token comment">//2^k (dr,dc)特殊格位置 (lr,lc)分治左上角位置</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sz<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token operator">++</span>Case<span class="token punctuation">,</span>s<span class="token operator">=</span>sz<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>dr<span class="token operator">&lt;</span>lr<span class="token operator">+</span>s<span class="token operator">&amp;&amp;</span>dc<span class="token operator">&lt;</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span> <span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>dr<span class="token punctuation">,</span>dc<span class="token punctuation">,</span>lr<span class="token punctuation">,</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1  左上</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>lr<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>lc<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment">//左上矩阵特殊方格的位置在自己的右下</span>        <span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lr<span class="token punctuation">,</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token operator">&lt;</span>lr<span class="token operator">+</span>s<span class="token operator">&amp;&amp;</span>dc<span class="token operator">&gt;=</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span> <span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>dr<span class="token punctuation">,</span>dc<span class="token punctuation">,</span>lr<span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2  右上</span>    <span class="token keyword">else</span>        <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>lr<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>lc<span class="token operator">+</span>s<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment">//右上矩阵特殊方格的位置在自己的左下</span>        <span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token punctuation">,</span>lr<span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token operator">&gt;=</span>lr<span class="token operator">+</span>s<span class="token operator">&amp;&amp;</span>dc<span class="token operator">&lt;</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>dr<span class="token punctuation">,</span>dc<span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token punctuation">,</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3  左下</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>lr<span class="token operator">+</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>lc<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment">//左下矩阵特殊方格的位置在自己的右上</span>        <span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token punctuation">,</span>lc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>dr<span class="token operator">&gt;=</span>lr<span class="token operator">+</span>s<span class="token operator">&amp;&amp;</span>dc<span class="token operator">&gt;=</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>dr<span class="token punctuation">,</span>dc<span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4  右下</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>lr<span class="token operator">+</span>s<span class="token punctuation">]</span><span class="token punctuation">[</span>lc<span class="token operator">+</span>s<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token comment">//右下矩阵特殊方格的位置在自己的左上</span>        <span class="token function">chessBoard</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token punctuation">,</span>lr<span class="token operator">+</span>s<span class="token punctuation">,</span>lc<span class="token operator">+</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">,</span>dr<span class="token punctuation">,</span>dc<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>k<span class="token operator">&gt;&gt;</span>dr<span class="token operator">&gt;&gt;</span>dc<span class="token punctuation">;</span>    k<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//cout&lt;&lt;k&lt;&lt;endl;</span>    <span class="token function">chessBoard</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>dr<span class="token punctuation">,</span>dc<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>k<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            cout<span class="token operator">&lt;&lt;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//system("pause");</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="算法实验5：4004-求最大和最小值">算法实验5：4004 求最大和最小值</h3><h4 id="题目：-求最大和最小值">题目： <a href="https://acm.sdtbu.edu.cn/JudgeOnline/problem.php?id=4804">求最大和最小值</a></h4><h4 id="题意：-5">题意：</h4><p>包含多组测试数据。每组测试数据的第一个元素是整数的个数n,接下来是n个整数。0表示结束。 n&lt;=200</p><h4 id="输入格式-5">输入格式</h4><p>k，dr，dc。k定义如前，dr，dc分别表示特殊方格所在的行号和列号 1= &lt; k &lt; =6</p><h4 id="输出格式-5">输出格式</h4><p>这n个数中的最大值和最小值。</p><h4 id="数据范围-5">数据范围</h4><p>n&lt;=200</p><h4 id="输入样例：-5">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 1 8 2 4 33 2 4 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-5">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">8 14 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="思路：-5">思路：</h4><ul><li><p><strong>循环分治</strong> 。1.每次成对从数列中取出两个数。2.比较两个数，将两个数中较大值记为a，较小值记为b。3.将a与 *max进行比较，如果a&gt; *max，更新 *max的值。4.将b与 *min进行比较，如果b&lt; *min，更新 *min的值。ps：为了防止最后只剩一个数无法取对，需要提前根据数列的奇偶特判一下</p></li><li><p>可以发现，我们共取出n/2对数，每对数共比较3次，所以时间复杂度为╔ 3n/2 ╕，而根据奇偶我们会提前取出1或2个数，如果为奇数<br>时间复杂度为╔3(n-1)/2╕==╔3n/2-3/2╕，如果是偶数╔3(n-2)/2╕==╔3n/2-3╕</p></li><li><p><strong>递归分治</strong> 。和循环差不多，还是不断细分到问题规模只有1个数或者2个数，比较出最大值和最小值后，通过自定义的m1，m2，n1，n2回溯。额外需要注意的是：<code>maxmin(a,l,mid,&amp;m1,&amp;n1);</code> <code>maxmin(a,mid+1,r,&amp;m2,&amp;n2);</code> 这两行代码执行完后，m1和n1中已经存好了整个数组前半部分的最大值和最小值，m2和n2存好了后半部分的最大值和最小值。后面的四句 <code>if-else</code> 则比较出了整个数组的最大值和最小值。</p></li><li><p>时间复杂度严格证明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">     <span class="token punctuation">{</span> <span class="token number">1</span>        n<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token function">T</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">{</span> <span class="token number">2</span>T<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span> n<span class="token operator">&gt;</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token function">T</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span>T<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>设n<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span>k可以得到 <span class="token function">T</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">2</span>T<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span>       <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">2</span>T<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>       <span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">T</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">T</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>   <span class="token operator">=</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">=</span><span class="token number">3</span> <span class="token operator">*</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="循环代码：">循环代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token number">1e2</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">maxmin</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token operator">=</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>max<span class="token operator">=</span><span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token operator">*</span>max<span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>k<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">maxmin</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>max<span class="token punctuation">,</span><span class="token operator">&amp;</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>max<span class="token punctuation">,</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="递归代码：-4">递归代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>  <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">1003</span><span class="token punctuation">,</span>N<span class="token operator">=</span><span class="token number">1e2</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">maxmin</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span>low<span class="token punctuation">,</span>r<span class="token operator">=</span>high<span class="token punctuation">,</span>mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token operator">*</span>max<span class="token operator">=</span><span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>max<span class="token operator">=</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">*</span>min<span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> m1<span class="token punctuation">,</span>m2<span class="token punctuation">,</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">;</span>        <span class="token function">maxmin</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span><span class="token operator">&amp;</span>m1<span class="token punctuation">,</span><span class="token operator">&amp;</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">maxmin</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span><span class="token operator">&amp;</span>m2<span class="token punctuation">,</span><span class="token operator">&amp;</span>n2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m1<span class="token operator">&gt;</span>m2<span class="token punctuation">)</span> <span class="token operator">*</span>max<span class="token operator">=</span>m1<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">*</span>max<span class="token operator">=</span>m2<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n1<span class="token operator">&lt;</span>n2<span class="token punctuation">)</span> <span class="token operator">*</span>min<span class="token operator">=</span>n1<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">*</span>min<span class="token operator">=</span>n2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> max<span class="token punctuation">,</span>min<span class="token punctuation">,</span>k<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">maxmin</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>max<span class="token punctuation">,</span><span class="token operator">&amp;</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>max<span class="token punctuation">,</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学作业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法分析与设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客练习赛102 A-C</title>
      <link href="/posts/42b93b72.html"/>
      <url>/posts/42b93b72.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>读题仔细再仔细。</p></blockquote><h3 id="A">A</h3><h4 id="题目：-清楚姐姐的学术群">题目： <a href="https://ac.nowcoder.com/acm/contest/39759/A">清楚姐姐的学术群</a></h4><h4 id="题意：">题意：</h4><p>清楚姐姐有一个学术群，为了使这个群有学术的风气，她建立了一些群规。</p><p>这个学术群有 n 个人，编号1∼n。</p><p>总共发了 m 条消息。</p><p>以及两个参数 a,b。</p><p>每条消息由一个人发出来的，且分为水和不水。</p><p>如果在某一条消息，它以及它之前的 a−1 条消息（共 a 条消息）都是在水（不管是不是同一个人发的），那么发这条消息的人就会受到神秘惩罚。</p><p>如果一个人，在任意一条消息之前，他发的最后 b 条消息（包括这条）都是在水，那么这个人也要受到神秘惩罚。</p><p>现在树剖姐姐想要知道，有哪些人会受到神秘惩罚。</p><h4 id="输入格式">输入格式</h4><p>第一行，四个正整数n,m,a,b (2 ≤ n,m ≤ 3×10<sup>5</sup>, 2 ≤ a,b ≤ m)</p><p>后面 m 行，每行两个整数p<sub>i</sub> t<sub>i</sub>(1≤p<sub>i</sub>≤n,0≤t<sub>i</sub>≤1)，表示一条消息。</p><p>p<sub>i</sub>表示第 p<sub>i</sub> 个人发消息的，t<sub>i</sub>=1 表示这条消息是在水，t<sub>i</sub>=0 表示这条消息不是在水。</p><h4 id="输出格式">输出格式</h4><p>第一行一个数x,表示有x个人受到了神秘惩罚。</p><p>第二行x个数，从小到大排列，输出所有受到神秘惩罚的人的编号。</p><p>如果没有人收到神秘惩罚，只用输出 0</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 9 3 21 12 13 14 13 01 01 15 12 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">32 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>用变量 <code>f</code> 记录当前群中连续水的记录条数，用 <code>map</code> 记录当前某个人发言的连续水的记录条数。如果当前消息是在水，对应 <code>f</code> 和<code>map[p]</code> 加1，否则均清零。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token comment">//f记录当前群中连续水的消息数量，c记录谁收到过惩罚，q记录每个人连续水的消息数</span>    <span class="token keyword">int</span> f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>c<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> p<span class="token punctuation">,</span>t<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>p<span class="token operator">&gt;&gt;</span>t<span class="token punctuation">;</span>        <span class="token comment">//如果当前消息在水，对应f和map[p]均加1，否则均清零</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>f<span class="token operator">++</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment">//判断一下当前发言人是否会受到惩罚</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token operator">&gt;=</span>a<span class="token operator">||</span>q<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">&gt;=</span>b<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">sort</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//erase将数组选择部分去除，第一个参数是起点，第二个参数是终点</span>    <span class="token comment">//unique将数组选择部分去重，第一个参数是起点，第二个参数是终点，去重后将重复元素放到数组尾，并返回重复元素的起始位置</span>    c<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B">B</h3><h4 id="题目：清楚姐姐带带我">题目：<a href="https://ac.nowcoder.com/acm/contest/39759/B">清楚姐姐带带我</a></h4><h4 id="题意：-2">题意：</h4><p>在牛客群里有一位群友小Y，她实力非常菜，于是每次牛客比赛前，她总是希望清楚姐姐可以带带她。</p><p>现在有n场比赛，第i场比赛有两个参数a<sub>i</sub>,b<sub>i</sub>。</p><p>小 Y 的初始实力为0，她将依次参加第 1,2,3,…,n 场比赛。</p><p>在第i(1 ≤ i ≤ n)场比赛时，小 Y 有两种选择。一种是小 Y 可以选择自己打，这样赛后她的实力会比原来增加 a<sub>i</sub>；另外一种是小 Y 让清楚姐姐带，这样她的实力会是原来的 b<sub>i</sub> 倍。</p><p>现在小 Y 想知道，经过n场比赛后，她的实力值能达到的最大值对 19980829 取模后的结果。</p><h4 id="输入格式-2">输入格式</h4><p>第一行，一个正整数n(1≤n≤5×10<sup>5</sup>)。</p><p>后面n行，每行 2 个正整数ai,bi(1≤ a<sub>i</sub>,b<sub>i</sub> ≤10<sup>9</sup>)。</p><h4 id="输出格式-2">输出格式</h4><p>一个正整数，表示小Y能达到的最大实力值对 19980829 取模后的值。</p><h4 id="数据范围">数据范围</h4><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">4114514 20000001477 30000002333 25510086 3000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">9268298<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>一眼贪心，然后喜提WA。</li><li>贪心是没问题的，但是需要考虑一个问题：如果我们每次都进行取余，然后再对 <code>sum*b</code> 和 <code>sum+a</code> 作比较，那么当sum本来是一个极大数，但取余后变的极小，就会出现原本 <code>sum*b&gt;sum+a</code>，但取余后 <code>sum%N*b&lt;sum%N+a</code> 的情况，可是不取余一定会出现数据溢出的情况。所以就需要考虑什么时候可以取余。</li><li>当 <code>sum&lt;1e9</code> 时显然无需取余，而当 <code>sum&gt;=1e9</code> 时，因为 <code>a&lt;=1e9</code>，所以只要 <code>b</code> 大于1，一定有 <code>sum*b&gt;=sum+a</code>，所以当 <code>b&gt;1</code> 时，直接选择 <code>sum*b</code> 即可。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N<span class="token operator">=</span><span class="token number">19980829</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll n<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        <span class="token comment">//sum表示小Y当前的能力值，nn记录sum是否已经大于等于1e9</span>    ll nn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token comment">//当sum&lt;1e9时，不取余，直接取两种选择最大值</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">1e9</span><span class="token operator">&amp;&amp;</span>nn<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> sum<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>a<span class="token punctuation">,</span>sum<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//当sum&gt;=1e9时，因为a&lt;=1e9，所以只要b大于1，一定有sum*b&gt;=sum+a</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            nn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//防止第一次进入else时，出现sum*b*b溢出long long的情况</span>            sum<span class="token operator">%=</span>N<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span> sum<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token operator">*</span>b<span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">;</span>            <span class="token keyword">else</span> sum<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>a<span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//加N再求余，防止出现负余</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token operator">%</span>N<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="C">C</h3><h4 id="题目：-清楚姐姐的序列">题目： <a href="https://ac.nowcoder.com/acm/contest/39759/C">清楚姐姐的序列</a></h4><h4 id="题意：-3">题意：</h4><p>清楚姐姐希望你能构造出一个长度为n的序列，满足m个限制。</p><p>每个限制有l,r,x,y四个参数，表示在区间[l,r]内x出现次数不少于y次，其中任意两个限制的x不同。</p><p>如果无法完成要求，输出"qcjjddw"</p><h4 id="输入格式-3">输入格式</h4><p>第一行两个正整数n,m(1 ≤ n,m ≤ 2×10<sup>3</sup>)</p><p>后面m行，每行4个正整数l,r,x,y(1 ≤ x ≤ 10<sup>9</sup>,1 ≤ y ≤ n,1 ≤ l ≤ r ≤ n每个限制的x互不相同)表示一个限制条件。</p><h4 id="输出格式-3">输出格式</h4><p>一行nnn个数，每个数之间用一个空格隔开，表示你构造的序列。</p><p>你需要保证你的序列每个数都在区间[1,10<sup>9</sup>]内。</p><p>或者一个字符串 <code>qcjjddw</code> 表示无解</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 21 4 1 32 5 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">qcjjddw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>首先考虑什么时候无解，显然当要求填的x的数量总和超过n时，是无法构造序列的。</li><li>因为每个x只要求最少数量，所以我们可以先将从每个区间的左端点开始填x，填满y个就直接退出，这样会有个问题，如果两个区间范围重合，先填谁的？很容易想到应该先填右端点靠前的区间，因为如果先填右端点靠后的区间，可能会导致已经填的区间占用了后面的区间并且有富余，但是无法给后面的区间用。</li><li>因为题目要求序列中每个元素都大于1，所以我们最后要遍历一下序列，看是否有没填的格子，将其赋值1。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll M<span class="token operator">=</span><span class="token number">19980829</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2e3</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//将所有区间根据右端点升序排序</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>a<span class="token punctuation">,</span>pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//记录所构造的序列</span><span class="token keyword">int</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>        <span class="token comment">//mm用来记录所有y的总和。p的1到4属性分别为l,r,x,y</span>    <span class="token keyword">int</span> mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        mm<span class="token operator">+=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果要填的所有x最少数量大于n，说明无法构造</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mm<span class="token operator">&gt;</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"qcjjddw"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//将区间按右端点排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//遍历所有区间</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token comment">//sum记录第i个区间所要求填的x填了多少</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//从左开始遍历第i个区间在序列上的位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token comment">//当前格子还没有填过</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//为了能尽可能的满足后面的区间要求，所以只要满足最低需求就直接跳出</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//如果所填的数量不足y，说明无法构造</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span><span class="token string">"qcjjddw"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//将未填过的格子填1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 牛客练习赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队20级---个人赛 1</title>
      <link href="/posts/b6d2cbb5.html"/>
      <url>/posts/b6d2cbb5.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>强身健体带来的好处太多了，肉体的强壮也会增加灵魂的韧性。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Happy-Birthday-Polycarp">题目： <a href="https://codeforces.com/problemset/problem/1277/A">Happy Birthday, Polycarp!</a></h4><h4 id="题意：">题意：</h4><p>给定一个整数n，询问所有小于等于n的相同数的数量。相同数：如果某个正整数每一位的数字都相同，则称之为相同数。例如：1，2，3，11，555。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>接下来第二行到第n+1行是n个样例，每个样例是一个正整数。</p><h4 id="输出格式">输出格式</h4><p>对每个样例输出一个整数。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>1 ≤ n ≤ 10<sup>9</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">61819100500331000000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1019451281<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>很容易注意到每增加一位，相同数增加9个，所以我们可以先计算n的位数，然后单独判断n最高位有多少个相同数。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">4e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ll t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ll n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>        <span class="token comment">//k与n的位数相同，且仅由1组成。m表示n的位数。</span>ll k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>c<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span>c<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">,</span>k <span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>k<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span>m<span class="token operator">++</span><span class="token punctuation">;</span>ll sum <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; "??" &lt;&lt; sum &lt;&lt;" " &lt;&lt;k&lt;&lt; endl;</span>k <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//特判n最高位有多少相同数。</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：Make-Them-Odd">题目：<a href="https://codeforces.com/problemset/problem/1277/B">Make Them Odd</a></h4><h4 id="题意：-2">题意：</h4><p>给我们一个长度为n的数列，我们每次可以选择数列中任意个值相同的偶数，使其依次除2，询问最少要多少次操作才可以使得数列中全部为奇数。</p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例共有两行，第一行是一个整数n，表示数列中整数的个数。</p><p>每个样例第二行是n个整数。</p><h4 id="输出格式-2">输出格式</h4><p>对于每个样例，输出一个整数，表示操作数。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>1 ≤ n ≤ 2 × 10<sup>5</sup></p><p>对于每个样例，一定是由n个1~n的不同的数组成的。</p><p>所有样例的n总和不超过2 × 10<sup>5</sup>。</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">4640 6 40 3 20 11102442 4 8 1633 1 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">41040<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>因为我们每次操作都可以选择任意个相同的数，为了使得操作尽量的少，我们需要使得所选择的数尽量的多。那么显然我们需要从大的数字开始除，在除的过程中每次有其他数可以加入时，就将其直接加入，然后依次遍历，保证所以数都是奇数即可。</li><li>问题在于如果直接去找其它数，会超时。</li><li>考虑用 <code>map</code> 记录所除过的数，这样我们就不用去找其他数，只需要遍历一次整个数组就可以。从大数开始，不断除到为奇数，并记录过程中的数，遍历数组时，已经记录过的数直接跳过。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//将数列升序排序</span><span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//p用来记录是否被除过</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span>ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//如果已经被除过，那么直接跳过</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//否则一直除到变为奇数为止</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>sum<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题">第三题</h3><h4 id="题目：-As-Simple-as-One-and-Two">题目： <a href="https://codeforces.com/problemset/problem/1277/C">As Simple as One and Two</a></h4><h4 id="题意：-3">题意：</h4><p>给定一个字符串，我们可以任意的去除字符串中的某些字符，使得字符串中不会出现 <code>one</code> 和 <code>two</code> ，询问最少需要去除几个字符，并给出这些字符的位置。</p><h4 id="输入格式-3">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例有一行，仅由小写英文字母组成的字符串。</p><h4 id="输出格式-3">输出格式</h4><p>对于每个样例，输出两行。</p><p>第一行是一个整数x，表示最少删除的字符数。</p><p>第二行是x个整数，依次用空格隔开，表示删除的字符的位置。</p><p>如果x为零，第二行输出空行。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>单个字符串的长度不会超过1.5×10<sup>5</sup></p><p>所有样例的总长度不会超过1.5×10<sup>6</sup>。</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">4onetwonetestmeoneoneonetwotwo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">26 3034 1 7 21 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>如果字符串中出现 <code>one</code> 和 <code>two</code> 这样的子串，那么分别去掉 <code>n</code> 和 <code>w</code> 是最好的选择，因为形如 <code>oonee</code> 这样的组合我们无论去掉 <code>o</code> 还是 <code>e</code> 都会形成新的 <code>one</code> ， <code>two</code> 同理。</li><li>对于 <code>one</code> 我们直接去掉 <code>n</code> 就可以，但是对于 <code>two</code> ，需要注意是否会有 <code>twone</code> 这样的存在，这时我们只需要去掉 <code>o</code> 即可去掉一个<code>two</code> 和一个 <code>one</code>。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//s存输入的字符串，c存需要去掉的字符的位置</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>c<span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//对于one直接去掉n</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'o'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'n'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'e'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'1'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对于two需要特判twone这样的情况</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'t'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'w'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//存在twone，去掉o，否则去掉w</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'n'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'e'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'1'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'1'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四题">第四题</h3><h4 id="题目：-Let’s-Play-the-Words">题目： <a href="https://codeforces.com/problemset/problem/1277/D">Let’s Play the Words?</a></h4><h4 id="题意：-4">题意：</h4><p>有一个游戏，规则是大家自由的用0和1创造字符串，条件是所创造字符串的第一个字符必须和上一个人的最后一个字符相同。</p><p>Polycarp有一组字符串，他希望通过尽量少的反转其中某些字符串，使得自己的这组字符串可以满足上述条件。</p><p>但是Polycarp有两个条件：</p><p>1.反转后的字符串不能与其他字符串相同。</p><p>2.最后这组字符串只要能通过某种顺序符合游戏规则即可。</p><h4 id="输入格式-4">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数n，表示有n个字符串。</p><p>每个样例的第2到n+1行是n行字符串，表示Polycarp的这组字符。</p><h4 id="输出格式-4">输出格式</h4><p>对于每个样例，如果可以通过调整使得Polycarp的字符串数组符合游戏规则，答案有两行，第一行输出最少需要反转的字符串的个数，第二行输出反转字符串的位置。如果个数为0，第二行输出空行。</p><p>如果不能，输出-1。</p><h4 id="数据范围-4">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>1 ≤ n ≤ 2×10<sup>5</sup></p><p>对于每个样例，字符串长度之和不会超过4×10<sup>6</sup>。</p><p>对于所有样例，所有字符串个数不会超过2×10<sup>5</sup>，所有字符串长度之和不会超过4×10<sup>6</sup>。</p><p>所有字符串均唯一。</p><h4 id="输入样例：-4">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">4400011000001101113010101020000000001401001000100001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-4">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">13 -1021 2 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-4">思路：</h4><ul><li>首先我们可以考虑这个题的本质，因为只要求后一个字符串的第一个字符和上一个字符串的最后一个字符相同，所以实际上我们只需要考虑每个字符串的开头和结尾两个字符即可。</li><li>这样问题就简化为了判断00,01,10,11这四种字符的数量。</li><li>什么时候无解？显然是所有的字符串都由00和11组成时。需要注意如果仅由00或者11组成，也是有解的。</li><li>所有的00可以组合在一起视为一个00，所有的11同理可以视为一个11，那么只要有一个01或者10就可以有解。而所有的01和10又可以任意的组合在一起。</li><li>每个01可以和一个10组合，那么我们直接输出01和10差值的一半即可，这就是最少需要反转的字符串数量。</li><li>因为要输出所反转字符串的位置，所以需要单独记录反转后不会依旧唯一的01和10的位置。</li></ul><h4 id="代码：-4">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">char</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//一共只有4种：00 01 10 11</span><span class="token comment">//其中01和10可以任意配对</span><span class="token comment">//所有的00可以视为1个00，所有的11可以视为1个11</span><span class="token comment">//那么只剩下01和10，找到两者差值的一半，输出反转不影响</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>string c<span class="token punctuation">;</span><span class="token comment">//y记录出现过的字符串，用来记录哪些字符串可以反转。</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>y<span class="token punctuation">;</span><span class="token comment">//u标记的位置标示该字符串不可以反转</span><span class="token keyword">int</span> u<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//a[1]到a[4]记录00 01 10 11的数量</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//00 01 10 11</span><span class="token comment">//p和q记录可以反转的01和10的位置</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token comment">//01 10</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span><span class="token comment">//仅保留每个字符串的开头和结尾两个字符</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//如果该字符串出现过，标记该字符串的位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>u<span class="token punctuation">[</span>y<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//否则将字符串和其反转后的字符串均标记一次</span><span class="token keyword">else</span><span class="token punctuation">{</span>y<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//统计四种字符串的位置，记录可以反转的01和10的位置</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>由<span class="token number">00</span>和<span class="token number">11</span>组成<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">==</span> n <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//cout &lt;&lt;" ? ? " &lt;&lt; a[1] &lt;&lt; " " &lt;&lt; a[2] &lt;&lt; " " &lt;&lt; a[3] &lt;&lt; " "&lt;&lt;a[4] &lt;&lt; endl;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//仅由00或者11组成，或者01和10数量相同</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>n<span class="token operator">||</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span>n<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//m是需要反转的字符串数量，根据01和10谁的数量多，决定反转哪个</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果允许反转的字符串数量少于需要反转的数量，那么输出-1，否则直接m个01字符串的位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//如果允许反转的字符串数量少于需要反转的数量，那么输出-1，否则直接m个10字符串的位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队个人赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 14</title>
      <link href="/posts/1c6846ea.html"/>
      <url>/posts/1c6846ea.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>看了看舍友写的，很优雅，发现有些时候虽然可以交的上去，但是不同思路的代码长度差距非常之大。</p><p>另外第一题想遍历数组的，应该写成a[j]写成了j，调试了半天才看出来。第二题被调函数传错数了，连WA11次，陷入了深深自我怀疑，有点小小难受。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Light-It-Up">题目： <a href="https://atcoder.jp/contests/abc255/tasks/abc255_b?lang=en"><strong>Light It Up</strong></a></h4><h4 id="题意：">题意：</h4><p>在x-y的坐标轴上有n个人分别坐在不同的点上，其中有k个人坐的地方有一盏灯，每盏灯可以照亮半径为r的圆。要求我们求出所有人都被照亮时，如果所有灯的半径相同，那么最小可以是多少。</p><h4 id="输入格式">输入格式</h4><p>第一行是两个整数n和k。</p><p>第二行是k个整数，表示所在位置有灯的人的序号。</p><p>第三行到n+2行，每行只有两个整数（x<sub>i</sub>，y<sub>i</sub>）表示序号为i的人所在的位置。</p><h4 id="输出格式">输出格式</h4><p>输出一个实数，表示灯的最小半径。要求结果误差小于-10<sup>5</sup>。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ K &lt; N ≤ 1000</p><p>1 ≤ A<sub>1</sub> &lt; A<sub>2</sub> &lt; ⋯ &lt; A<sub>K</sub> ≤ N</p><p>∣X<sub>i</sub>∣, ∣Y<sub>i</sub>∣ ≤ 10<sup>5</sup></p><p>保证每个点只会有一个人。</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">4 22 30 00 11 22 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2.23606797749978969<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>贪心。题目要求我们找到当所有人都被覆盖时，灯的最小半径。</li><li>首先我们必须满足每个人都被至少一个灯的半径覆盖，那么可以先遍历所有人，然后对每个人遍历所有灯，对每个人维护人和其它灯距离的最小值。最后再排一次序，输出所有人的距离最大值就好了。</li><li>为什么是最大值？因为要满足所有人都被照到，我们维护的距离是当前这个人距离其它灯的最小值，那么所能接受距离的最低限度就是所有最小距离中的最大值。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">long</span> <span class="token expression"><span class="token keyword">long</span> LL<span class="token punctuation">;</span></span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">slove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">-</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">-</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>y<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token comment">//遍历每个人，找到每个人被照到的最小范围，然后在所有范围中找到最大的</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">slove</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.12lf\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-±1-Operation">题目： <a href="https://atcoder.jp/contests/abc255/tasks/abc255_c?lang=en">±1 Operation</a></h4><h4 id="题意：-2">题意：</h4><p>给我们四个数X，A，D，N，其中A，D，N组成一个首项为A，公差为D，共有N项的等差数列。每次可以将X的值加一或者减一，求解最少几次可以将X变为该等差数列中的一项。</p><h4 id="输入格式-2">输入格式</h4><p>输入只有四个整数：X，A，D，N</p><h4 id="输出格式-2">输出格式</h4><p>一个整数，表示对X的操作次数。</p><h4 id="数据范围-2">数据范围</h4><p>−10<sup>18</sup> ≤ X, A ≤ 10<sup>18</sup></p><p>−10<sup>6</sup> ≤ D ≤ 10<sup>6</sup></p><p>1 ≤ N ≤ 10<sup>12</sup></p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">-555555555555555555 -1000000000000000000 1000000 1000000000000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">444445<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>我们可以设B为该等差数列的尾项，如果X小于首项或者大于尾项，那么操作次数分别是X和首项或尾项差的绝对值。</li><li>如果X的值在该数列首尾两项之间，由于数据范围极大，暴力循环是一定会超时的，所以考虑二分。</li><li>需要注意的是在进行二分时，需要考虑D的符号问题，要将A和B的值互换，同时不要忘记将D的值取反。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LL</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token comment">//给我们一个数字x，让我们用最少的操作次数将x变为一个好数字</span><span class="token comment">//好数字定义：有一个n项的数列s，s1=a，公差为d</span><span class="token keyword">void</span> <span class="token function">slove</span><span class="token punctuation">(</span>LL x<span class="token punctuation">,</span> LL a<span class="token punctuation">,</span> LL d<span class="token punctuation">,</span> LL n<span class="token punctuation">,</span> LL b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> a<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">-</span> x<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> b<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>LL l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token comment">//找到第一个大于等于x的数。</span><span class="token punctuation">{</span>LL mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mid <span class="token operator">*</span> d <span class="token operator">+</span> a<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> x<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>LL k1 <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">*</span> d <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token operator">-</span>x<span class="token punctuation">;</span>LL k2 <span class="token operator">=</span> x <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> d <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">min</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span>k2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>LL x<span class="token punctuation">,</span> a<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> d <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>LL b <span class="token operator">=</span> a <span class="token operator">+</span> d <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">slove</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">,</span> d<span class="token punctuation">,</span> n<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">slove</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">-</span>d<span class="token punctuation">,</span> n<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 15</title>
      <link href="/posts/6b6f767c.html"/>
      <url>/posts/6b6f767c.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>读题仔细再仔细。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Beautiful-String">题目： <a href="https://codeforces.com/problemset/problem/1265/A">Beautiful String</a></h4><h4 id="题意：">题意：</h4><p>给我们一个字符串，字符串由 <code>‘a’,‘b’,‘c’,‘?’</code> 四种字符组成，我们可以将 <code>‘?’</code> 改成另外三种字符之一，问是否可以通过修改字符串使得整个字符串没有任意的两个相同的相邻字符。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>接下来第二行到第n+1行是n个样例，每个样例是一个字符串。</p><h4 id="输出格式">输出格式</h4><p>如果可以，输出修改后的字符串；否则输出 <code>-1</code> 。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 1000</p><p>所有字符串长度总和不会大于10<sup>5</sup>。</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3a???cba??bbca?b?c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">ababcb-1acbac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>我们可以遍历一次字符串，因为每个问号可以修改为另外三种之一，所以我们只要保证，当前所修改的字符与其两边的字符不同即可。</li><li>最后不要忘记判断一次是否符合条件。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e3</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LL</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'?'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'?'</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                    <span class="token comment">//判断两次，防止在遇到b?a这种情况时出错</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>i <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//判断是否符合条件</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>res <span class="token operator">?</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：Beautiful-Numbers">题目：<a href="https://codeforces.com/problemset/problem/1265/B">Beautiful Numbers</a></h4><h4 id="题意：-2">题意：</h4><p>给我们一个长度为n的数列，如果我们能找到一个长度为m的区间，这个区间中的序列由 <code>1 ~ m</code> 这m个数组成，那么m就是美丽数。求解 <code>1~n</code> 中有多少美丽数。</p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例共有两行，第一行是一个整数n。</p><p>每个样例第二行是n个整数。</p><h4 id="输出格式-2">输出格式</h4><p>每个样例占一行，对于每个数，如果是美丽数用1表示，不是用0表示。不需要空格隔开。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 1000</p><p>1 ≤ n ≤ 2 × 10<sup>5</sup></p><p>对于每个样例，一定是由n个1~n的不同的数组成的。</p><p>所有样例的n总和不超过2 × 10<sup>5</sup>。</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">364 5 1 3 2 655 3 1 2 441 4 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">101011111111001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>乍一看会觉得这个题很麻烦，但是因为n的范围很大，所以不会是暴力。</li><li>直接考虑什么时候是美丽数不太好判断。考虑什么时候不是美丽数？我们会发现，如果一个长度为m的数，区间的长度如果是大于m的，那么一定不是美丽数（区间是指1到m所有数中最靠后的数的位置减去最靠前的数的位置）。</li><li>怎么判断一个长度为m的区间是美丽数？如果直接暴力判断会超时，考虑用前缀和。只要这m个数的和是1~m的和，那么一定是美丽数。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LL</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span>LL a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>LL c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>LL s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>LL t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>LL n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>LL f<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>c<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">//1和n一定是美丽数</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>LL l <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//l表示长度为i的区间中最小位置</span><span class="token keyword">for</span> <span class="token punctuation">(</span>LL i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>l <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>r <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">-</span> r<span class="token punctuation">)</span> <span class="token operator">&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> s<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span>LL i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题">第三题</h3><h4 id="题目：-Beautiful-Regional-Contest">题目： <a href="https://codeforces.com/problemset/problem/1265/C">Beautiful Regional Contest</a></h4><h4 id="题意：-3">题意：</h4><p>已知有n个人各自的做题数，根据他们的做题数给他们颁奖。有金银铜三种奖牌，要求奖牌总和不超过总人数的一半，向下取整。金牌的数量必须最少。在要求范围内尽量多颁奖。金牌做题要比银牌多，银牌要比铜牌多。</p><h4 id="输入格式-3">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例有两行，第一行是一个整数n，表示有n个人。</p><p>第二行是n个整数p<sub>1</sub>，p<sub>2</sub>，…，p<sub>n</sub>，表示每个人的做题数。</p><p>每个样例在一行上输出三个整数，用空格隔开，依次表示金银铜牌的数量。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ t ≤ 10000</p><p>1 ≤ n ≤ 4×10<sup>5</sup></p><p>0 ≤ p<sub>i</sub> ≤ 10<sup>6</sup></p><p>所有样例的总人数不会超过4×10<sup>5</sup>。</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5125 4 4 3 2 2 1 1 1 1 1 144 3 2 1110000002020 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 13264 64 63 58 58 58 58 58 37 37 37 37 34 34 28 28 28 28 28 28 24 24 19 17 17 17 17 16 16 16 16 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 2 30 0 00 0 02 5 32 6 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>首先我们看三种奖牌的要求：<ul><li>三种奖牌总和不超过总人数的一半，向下取整。</li><li>金牌的数量必须是最少的。银牌可以比铜牌多。</li><li>金牌，银牌，铜牌的做题数必须是严格减少的。</li><li>在可能范围内，尽量多颁奖。</li></ul></li><li>因为尽量多颁奖且颁奖人数不超过总人数一半，所以我们可以遍历前n/2个人。因为三种奖牌的做题数必须严格递减，我们可以记录前n/2个人有多少不同的解题数。</li><li>只要前n/2个人的不同解题数大于3，就说明有解，同时金牌的最少人数是解题最多的人数。最后判断一下银牌和铜牌的数量即可。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">4e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LL</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//因为最多只给前一半的人颁奖，所以只需要遍历到n/2即可</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//x,y,z分别是金牌，银牌，铜牌的人数。金牌至少要有b[1]个人。</span><span class="token keyword">int</span> x <span class="token operator">=</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cnt<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>y <span class="token operator">+=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>z <span class="token operator">=</span> b<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> y <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> z<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> z <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0 0 0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 13</title>
      <link href="/posts/820cd349.html"/>
      <url>/posts/820cd349.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>AC三个题根本不算什么，别骄傲的太早。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Sweet-Problem">题目： <a href="https://codeforces.com/problemset/problem/1263/A">Sweet Problem</a></h4><h4 id="题意：">题意：</h4><p>Alice有三堆不同的糖果，她每天只吃两颗糖，但是这两颗糖必须是不同，求解Alice最多可以吃几天。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例只有一行三个整数r，g，b，分别表示三堆糖果的数量。</p><h4 id="输出格式">输出格式</h4><p>每个样例占据一行，输出一个整数，表示Alice最多可以吃的天数。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 1000</p><p>1 ≤ r, g, b ≤ 10<sup>8</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">61 1 11 2 14 1 17 4 108 1 48 2 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1221059<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>首先将三堆糖果按数量从大到小排，便于后续处理，用a，b，c表示三堆糖果。</li><li>因为希望Alice可以多吃几天糖果，所以开始时最好是从最多的一组开始吃，如果最多的一组比另外两组糖果数量之和相同或更多，显然所吃的天数最多就是另外两堆糖果数量之和。</li><li>如果a小于b+c，那么可得c&gt;a-b，我们可以先用c将a和b的数量吃到相同，然后a和b分别与一半的c组合，最后a和b组合就是最佳的方案。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//a  b  c</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token comment">//a-b&gt;=c</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">+</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> n <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span><span class="token comment">//a-b&lt;c</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>c <span class="token operator">-=</span> n<span class="token punctuation">;</span>a <span class="token operator">-=</span> c <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>b <span class="token operator">-=</span> c <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>a<span class="token operator">--</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> c<span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-PIN-Codes">题目： <a href="https://codeforces.com/problemset/problem/1263/B">PIN Codes</a></h4><h4 id="题意：-2">题意：</h4><p>给我们n个密码，每个密码都是由4位组成，我们每次可以将其中一个密码的某位改成 <code>0~9</code> 的任意一位。要求输出将所有密码改到互不相同时最少的次数，同时<strong>按原来的输入顺序输出这n个密码</strong>。</p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数n，表示给定的数列有n个数。</p><p>每个样例第二行到n+2行是n个密码，每个密码都是由4位组成。</p><h4 id="输出格式-2">输出格式</h4><p>对于每个样例，第一行输出最少的操作次数，第2到n+1行按原顺序输出n位密码。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 100</p><p>2 ≤ n ≤ 10</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">321234060021337133743139313931393139<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">01234060011337123733139313839396139<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>由于每组样例最多有10个密码，所以我们只需要将这n个密码的首位改成 <code>0~9</code> 中没有被用过的数字就可以了。那么所需要的修改次数最多就是重复的密码个数。</li><li>需要注意的是题目要求按原顺序输出，所以我们只能改重复的，对于任意的只出现一次的密码是不允许进行修改的。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>string s<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//cnt记录修改次数</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//a数组用来存0~9那些数字还可以用</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>            <span class="token comment">//j==n说明该密码只出现过一次，那么该密码的首位所用的数字不允许被修改</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span>a<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment">//记录当前密码首位的数字</span>a<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment">//如果两个密码相同，修改其中一个密码的首位并记录修改后的数字</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题">第三题</h3><h4 id="题目：-Everyone-is-a-Winner">题目： <a href="https://codeforces.com/problemset/problem/1263/C">Everyone is a Winner!</a></h4><h4 id="题意">题意:</h4><p>给我们一个整数n，要求我们从小到大输出n除 <code>1 ~ n+1</code> 后的数。例如n=5，那么n除 <code>1 ~ n+1</code> 所得的数就是 0 1 2 5。</p><h4 id="输入格式-3">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>对于每个样例只有一行，一个整数n。</p><h4 id="输出格式-3">输出格式</h4><p>每个样例占一行，从小到大输出一个数列，两个整数之间用空格隔开。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ t ≤ 10</p><p>1 ≤ n ≤ 10<sup>9</sup></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">451113<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">40 1 2 5 60 1 2 3 5 11 20 1 30 1 3 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>由于n的范围是1 ~ 10<sup>9</sup>，暴力跑一定会超时。</li><li>我们其实可以在纸上写一下n从1开始除的情况，写着写着就会发现一个规律，开始时，除数和结果都是最终数列的一部分。同时当除数和结果开始重复时（例如：n / x = y ，x和y都已经出现过了），数列中的数不会再出现。</li><li>那么我们就可以用map来记录数列中哪些数出现过了，什么时候除数和结果都出现过，说明循环结束。</li><li>如何判断当前的x和y是我们想要的？只要 n / x == y 并且 n / y == x，那么就说明x和y都是数列中的数。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">long</span> <span class="token expression"><span class="token keyword">long</span> LL<span class="token punctuation">;</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> x <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> n <span class="token operator">/</span> i <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 12</title>
      <link href="/posts/f50be3df.html"/>
      <url>/posts/f50be3df.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>有思路就能AC的感觉太爽了。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Math-Problem">题目： <a href="https://codeforces.com/problemset/problem/1262/A">Math Problem</a></h4><h4 id="题意：">题意：</h4><p>给我们n个区间，找到一个最短的区间，将所有的区间连在一起（换句话说就是找到的区间和所有的区间都有共同的点）。所找到的区间长度可以为0，即只有一个点。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数n，表示有n个区间。</p><p>每个样例第2到n+1行每行是两个整数l和r，表示区间的左右端点。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示区间的长度。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 100</p><p>1 ≤ n ≤ 10<sup>5</sup></p><p>1 ≤ l<sub>i</sub> ≤ r<sub>i</sub> ≤ 10<sup>9</sup></p><p>数据保证所有的n总和不超过1×10<sup>5</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">434 55 97 7511 194 1716 163 1214 1711 1011 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2400<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>贪心。<s>每次遇到贪心我都不知道是怎么做出来的，迷迷糊糊的，完全凭感觉走，感觉这么做能AC于是就AC了。</s></li><li>将所有区间按右端点（即结束端点）升序排序。</li><li>将第一个区间的右端点记为max_r，从第二个区间开始遍历，每当第i个区间的左端点大于当前的max_r时，就更新max_r。</li><li>最后输出 <code>max_r - p[1].second</code> 。</li><li>贪心题做的越多越佩服yxc，讲贪心题都要当场证明。会做题只能说明很牛，但是和我有什么关系呢，自己会还能教会别人的才是大佬。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>a<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>l <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">-</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-Box">题目： <a href="https://codeforces.com/problemset/problem/1262/B">Box</a></h4><h4 id="题意：-2">题意：</h4><p>给我们一个长度为n的序列，要求我们根据给定的序列构建一个长度为n的序列，由数字1<sub>n构成，不能有重复的数字。所构建的序列前i个数的最大值要等于给定数列的第i个数q</sub>i~。如果所给数列无法构造输出-1。</p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数n，表示给定的数列有n个数。</p><p>每个样例第二行是n个整数。</p><h4 id="输出格式-2">输出格式</h4><p>如果能够构造出来，将所构造的数列输出，每个数字用空格间隔，否则输出-1。每个样例占一行。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>1 ≤ n ≤ 10<sup>5</sup></p><p>1 ≤ q<sub>i</sub> ≤ n</p><p>保证所给的样例是非下降数列，并且所有的n总和不超过1×10<sup>5</sup></p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">451 3 4 5 541 1 3 422 211<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 3 4 5 2 -12 1 1 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>用数组a存给定的数列，数组b存构建的数列，数组p记录1~n哪些数被加入到b数组中。</li><li>首先由于我们构建的数列不能有重复的数字，并且所给定的数列是非下降的，那么就可以得出，如果 <code>a[i]&lt;i</code> 一定是无解的，例如给定的数列第3个数是2，我们是无法构建出前三个数中最大值是2的数列的。而只要满足对于任意的i，都有 <code>a[i]&gt;=i</code> ，那么一定有解。</li><li>我们可以将所要构建的数组视为一个集合b，集合b初始时为空，遍历所给定的数列a来向集合b中添加数字。</li><li>我们用数组p来记录1~n中哪些数已经被我们加入到所构建的数组b中。当我们遍历所给数列a时，如果a[i]还没有被添加到b中，那么就直接加入，否则将当前未被添加的最小的数加入到集合b中。</li><li>因为如果是第一次遇到a[i]，说明a[i]是大于当前b集合中 <code>i-1</code> 个数的，所以我们直接将a[i]加入到b集合中。如果此时a[i]已经被加入，说明a[i]小于集合b中的某些数，那么我们直接将当前未放入的最小的数加入集合b中就好了。</li><li>这里就有一个问题，怎么找到当前最小的数，如果每次都遍历p数组，最坏情况下时间复杂度是O(n<sup>2</sup>)的，而n的范围最大是10<sup>5</sup>，也就是100亿的级别，一定会超时。我们可以用一个变量j来记录当前的最小值，每次加入集合b中一个数就判断一下j是否已经被加入集合，是的话就让j=j+1，这样时间复杂度就是O(n)，只用遍历一遍就可以。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a存给定的数列，b存构建的数列</span><span class="token keyword">bool</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//p[i]表示数字i是否已经加入到所构建的数列中</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四题">第四题</h3><h4 id="题目：-Optimal-Subsequences-Easy-Version">题目： <a href="https://codeforces.com/problemset/problem/1262/D1">Optimal Subsequences (Easy Version)</a></h4><h4 id="题意">题意:</h4><p>给我们一个长度为n的数列，然后是m次询问，每次询问给两个数k和pos，要求我们在给定的数列中找到长度是k的子序列中找到所有元素和最大的子序列，然后在找到的子序列中找到字典序最小的序列，然后在字典序最小的序列中找到第pos个数并输出。</p><h4 id="输入格式-3">输入格式</h4><p>输入第一行是一个整数n。</p><p>输入第二行是n个整数a<sub>1</sub> ~ a<sub>n</sub>，表示整个数列。</p><p>第三行是一个整数m。</p><p>接下来第4到m+4行是m次询问，每次询问给两个整数k和pos。</p><h4 id="输出格式-3">输出格式</h4><p>输出一个整数。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ n ≤ 100</p><p>1 ≤ a<sub>i</sub> ≤ 10<sup>9</sup></p><p>1 ≤ m ≤ 100</p><p>1 ≤ k ≤ n, 1 ≤ pos<sub>j</sub> ≤ k<sub>j</sub></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">310 20 1061 12 12 23 13 23 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">201020102010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>因为所给的m和n范围都很小，所以我们可以提前将长度1~n的所有子序列中值最大，且字典序最小的序列存下来，每次询问时直接输出就好了。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">1</span> <span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> k <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科目二注意事项</title>
      <link href="/posts/5fba54ac.html"/>
      <url>/posts/5fba54ac.html</url>
      
        <content type="html"><![CDATA[<h3 id="自己总结">自己总结</h3><p>1.倒库时后视镜下沿刚要碰到蓝色直线时立即打死，宁可早打不要晚打。<br>2.上坡时注意对齐箭头右侧。踩死刹车后要缓抬离合，如果熄火必须摘挡点火！<br>3.下坡时踩死离合，缓踩刹车。<br>4.直角拐弯记得开转向灯，内侧门把手对齐直角时打死，宁可早打不要晚打。<br>5.进出S弯时要慢，随时调整方向盘，不要压线。特别是出的时候。<br>6.侧方位停车出来时要提前开转向灯。</p><h3 id="教练发的">教练发的</h3><h4 id="倒车入库">倒车入库</h4><p>——<br>调座椅，踩紧离合，按按钮按手刹，挂倒挡，后退（先踩紧离合，挂挡，手刹按下）<br>1.后视镜距线40公分（因个人身高距离而定），左打满<br>2.后视镜里观察车身将盖满"中实线"，回半圈（方向盘正着）<br>3.后视镜里观察后轮将绕进车库线，左打满<br>4.后视镜里观察车身与车库线平行，方向盘完全回正<br>5.后视镜里观察后轮将过线停车</p><p>踩紧离合，挂1挡，前进<br>1.后视镜里观察后轮将压车库线，左打满<br>2.看前方将冲准红帽，方向盘完全回正<br>3.肩与线冲齐，踩紧离合，慢踩刹车，拉手刹（离合，手刹，摘挡）</p><p>右倒车<br>1.踩紧离合，挂1挡，后视镜里观察后轮将压线，右打满<br>2.看前方，车身将正前，左打半圈（方向盘正朝前），心中默数3秒，右打满，看左后视镜，看见第三个空格时，停车<br>3.踩紧离合，挂倒挡，右后视镜里观察车身将盖满线，左回半圈，继续观察右后视镜，车轮压右侧线，再右打满，（过窄左打，过宽提前右打）<br>4.看左后视镜，车身漏出车库线夹角，左回正，车轮将将过线，踩紧离合，停车</p><h4 id="坡道定点停车，起步">坡道定点停车，起步</h4><p>——<br>1.出库后，驾驶员对准虚线左打死<br>2.自己冲箭头线的右侧，右回正<br>3.上坡略松离合<br>4.看左后视镜，车轮压线，踩紧离合，刹车，拉手刹，停两秒，按下手刹<br>5.踩紧离合，踩好刹车，看仪盘表，缓松离合，指针下降发动机有异响，离合器有震动时离合器上的脚不动这时松刹车（车响声，开始哆嗦），松刹车，前进，略左调<br>6.车身朝下，踩紧离合，轻踩刹车控制速度，自己冲砖头<br>7.车身离坡</p><h4 id="直角拐弯">直角拐弯</h4><p>——<br>1.冲砖头<br>2.左转向灯<br>3当直角对准驾驶室门内内扣时，迅速左打满，看左后视镜里，车轮过线距离5–30公分，右回正</p><h4 id="S弯">S弯</h4><p>——<br>1.左车头凸起将触线，左打一圈，看左后视镜，车轮进线，看前方，车头进线，看左后视镜，与左线始终保持平行时，左竖方向盘<br>2.看前方，车头将触线时，方向盘右回正（1.25圈）<br>3.车头右前方将触线时，右打一圈，看右后视镜，与线始终保持平行时，右竖方向盘<br>（方向盘左回正，1.25圈）<br>4.方向盘将冲左侧直角线，左打满，看前方，自己冲白线，右回正，朝前行驶</p><h4 id="侧方位停车">侧方位停车</h4><p>——<br>1.冲白线前进中，驾驶员与左边边线北头对齐停车。<br>2.右后视镜看，<br>判断车身与白线的距离（一个白线是15厘米）几个白线的宽度就让车轮倒到角前几个白线的距离向右打死。<br>3.左后视镜看，可看见白柱子，左打半圈（方向盘冲前），可看见另一个柱子，左回一圈<br>4.左后视镜看，车轮将触线左打死，车身与线平行，远处窄</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 驾照 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 11</title>
      <link href="/posts/6c02b265.html"/>
      <url>/posts/6c02b265.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>数论比想象中重要。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-B-Practical-Computing-atcoder-jp">题目： <a href="https://atcoder.jp/contests/abc254/tasks/abc254_b?lang=en">B - Practical Computing (atcoder.jp)</a></h4><h4 id="题意：">题意：</h4><p>给一个整数n，输出前n行杨辉三角。</p><h4 id="输入格式">输入格式</h4><p>输入仅包含一个整数n。</p><h4 id="输出格式">输出格式</h4><p>输出前n行杨辉三角。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 30</p><p>N是一个整数。</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">11 11 2 11 3 3 11 4 6 4 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>简单模拟即可。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-C-K-Swap-atcoder-jp">题目： <a href="https://atcoder.jp/contests/abc254/tasks/abc254_c?lang=en">C - K Swap (atcoder.jp)</a></h4><h4 id="题意：-2">题意：</h4><p>给我们两个整数n和k，可以进行任意次交换，每次只能交换第i个数和第i+k个数。问是否可以将整个数列通过交换变为上升序列。</p><h4 id="输入格式-2">输入格式</h4><p>输入第一行是两个整数n和k。</p><p>第二行是n个整数。</p><h4 id="输出格式-2">输出格式</h4><p>如果可以通过交换得到上升数列，输出 <code>Yes</code> ，否则输出 <code>No</code> 。</p><h4 id="数据范围-2">数据范围</h4><p>2 ≤ N ≤ 2 × 10<sup>5</sup></p><p>1 ≤ K ≤ N−1</p><p>1 ≤ a<sub>i</sub> ≤ 10<sup>9</sup></p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 33 4 1 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">No<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>由于我们只能交换距离为k的两个数，所以可以将整个数列分为k个子序列，每个序列的开头依次是a<sub>1</sub>到a<sub>k</sub>。将所有子序列由小到大排序，然后将k个序列依次交叉排好，看整个数列是否有序即可。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//将整个数列分为k个子序列</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j <span class="token operator">+=</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment">//对每个子序列进行升序排序</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">//将k个子序列依次交叉排好。</span>    <span class="token comment">//例如序列一：[1，2,3]，序列二：[4,5,6]，序列三：[7,8,9]</span>    <span class="token comment">//则排好后数列为：1,4,7,2,5,8,3,6,9</span><span class="token keyword">int</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> h <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>h<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> v<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token comment">//判断整个数列是否有序。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题-赛后补题">第三题-赛后补题</h3><h4 id="题目：-D-Together-Square-atcoder-jp">题目： <a href="https://atcoder.jp/contests/abc254/tasks/abc254_d?lang=en">D - Together Square (atcoder.jp)</a></h4><h4 id="题意">题意:</h4><p>给定一个整数n，从1到n中找到两个整数i和j，使得i*j可以表示某个整数的平方。问最多可以找到多少不同的组合。[1,4]和[4,1]视为两种不同的组合。</p><h4 id="输入格式-3">输入格式</h4><p>输入只有一个整数n。</p><h4 id="输出格式-3">输出格式</h4><p>输出一个整数。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ N ≤ 2×10<sup>5</sup></p><h4 id="输入样例：-3">输入样例：</h4><p>输出一行n个整数，两个整数之间用空格间隔。</p><h4 id="数据范围-4">数据范围</h4><p>1≤<em>N</em>≤ 2×10<sup>5</sup></p><h4 id="输入样例：-4">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">254<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">896<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>详见<a href="https://www.cnblogs.com/tsrigo/p/16344714.html">此文</a>，解释的很好。</li><li>本题的核心点在于，令f(i)表示i因子中最大的平方数，如果<code>i*j</code> 是平方数，那么一定满足 <code>(i*j) / (f(i)*f(j))</code> 是平方数。</li><li>由上述性质推导出当<code>i*j</code>是平方数时，i/f(i)一定等于j/f(j)，可以证明这是一个充要条件。进而只要找到每个i/f(i)可以由多少个i转化而来即可。因为无论i是否等于j，只要i/f(i)等于j/f(j)，那么<code>i*j</code> 就是平方数。我们用cnt[k]来记录i可以由多少个i/f(i)转化而来，那么答案就是所有cnt[i]的平方和。</li><li>数论题就很离谱，往往看题解都看不懂。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//标记是否为平方数</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//v[i]存i的因数，包括1和n</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//cnt[i]表示符合i==k/f(k)==j/f(j)的数量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token comment">//标记1~n中所有的平方数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>st<span class="token punctuation">[</span>i <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">//记录每个数的因子</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j <span class="token operator">+=</span> i<span class="token punctuation">)</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>f <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//找到所有因子中最大的平方数</span>        <span class="token comment">//cnt[i]记录每个i可以由多少个j/f(j)转化而来</span>cnt<span class="token punctuation">[</span>i <span class="token operator">/</span> f<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//因为只要任意两个数，只要满足i/f(i)的值相等，那么就可以组合为平方数，所以答案是每个cnt[i]的平方</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>res <span class="token operator">+=</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 10</title>
      <link href="/posts/1b0582f3.html"/>
      <url>/posts/1b0582f3.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>过了样例不要着急，多测几组自己的数据，错一次20分钟的罚时还是很伤的。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Changing-Volume">题目： <a href="https://codeforces.com/problemset/problem/1255/A">Changing Volume</a></h4><h4 id="题意：">题意：</h4><p>给我们两个数a和b，每次可以在a上加 <code>[-5,-2,-1,1,2,5]</code> 六个数之一，问最少几次可以将a变为b。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例包含两个整数a和b。</p><h4 id="输出格式">输出格式</h4><p>对每个样例输出一个整数。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 1000</p><p>1 ≤ a, b ≤ 10<sup>9</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">34 05 143 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">232<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>思维题。因为可操作的六个数是对称的，所以我们可以将a变为b视为将a和b中较小的数变为较大的数。</li><li>从5到1每次贪心减去最多能减的数即可。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> a<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">/</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>num <span class="token operator">+=</span> t<span class="token punctuation">;</span>b <span class="token operator">-=</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_num</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-Fridge-Lockers">题目： <a href="https://codeforces.com/problemset/problem/1255/B">Fridge Lockers</a></h4><h4 id="题意：-2">题意：</h4><p>有n个住户，每个住户有一个房间，住户自己可以开自己的房间，每个房间会有一个代价。我们可以将n个房间上m把锁，每把锁会把两个房间连在一起。如果一个房间通过两把锁以上连接了另外两个以上不同的房间，那么这些房间的主人可以共同打开这个房间。但是代价是这些锁所连接的房间的代价之和。可以在两个房间之间上多把锁，问在没有任何一个房间是私有的前提下（私有是指只有房间主人可以打开该放房间），打开所有房间的最小代价。<s>感觉我描述的好繁琐晦涩，但是原文比这还难理解啊，起码这算是人话了</s></p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，代表有t个样例。</p><p>每个样例第一行是两个整数n和m，表示有n个房间和可以上m把锁。</p><p>每个样例第二行是n个整数，表示每个房间的代价。</p><h4 id="输出格式-2">输出格式</h4><p>对于每个样例，如果不存在输出<code>-1</code>。</p><p>否则第一行输出一个整数，表示总代价。</p><p>接下来m行每行两个整数，表示该锁所连接的两个房间。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 10</p><p>2 ≤ n ≤ 1000,  1 ≤ m ≤ n</p><p>0 ≤ a<sub>i</sub> ≤10<sup>4</sup></p><p><strong>保证所有的n之和不会大于2×10<sup>5</sup></strong></p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">34 41 1 1 13 11 2 33 31 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">81 24 33 24 1-1123 21 23 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>首先要满足所有房间都不是私有的，也就是说任何房间都起码有两把锁和两个不同的房间相连，那么n个房间最少需要n把锁。同时如果只有两个房间，是无法实现非私有化的。</li><li>如果满足 <code>m&gt;=n</code> ，首先为了满足非私有化需要所有房间两两上锁，然后将多余的锁都上在代价最小的两个房间即可。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e4</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>num <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>num <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;</span> n<span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">sort</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num <span class="token operator">+=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> y <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题-赛后补题">第三题-赛后补题</h3><h4 id="题目：-League-of-Leesins">题目： <a href="https://codeforces.com/problemset/problem/1255/C">League of Leesins</a></h4><h4 id="题意">题意:</h4><p>有n个整数组成的数列，每三个相邻的三个整数可以组成一个三元组，可以任意交换三元组内的元素和不同组的顺序，但是不能交换不同组内的元素，求出原序列。</p><h4 id="输入格式-3">输入格式</h4><p>输入第一行是一个整数n表示原数列有n个整数。</p><p>接下来有 <code>n-2</code> 行，每行是一个三元组。</p><h4 id="输出格式-3">输出格式</h4><p>输出一行n个整数，两个整数之间用空格间隔。</p><h4 id="数据范围-3">数据范围</h4><p>5 ≤ n ≤ 10<sup>5</sup></p><p>1 ≤ q<sub>i</sub>, q<sub>j</sub> ≤ n</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">54 3 22 3 54 1 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 4 2 3 5 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>首先我们可以会发现，原数列的开始位置和结束位置的数字都只出现了一次，第二个和倒数第二个数字都只出现了二次，中间所有数字都出现了三次。</li><li>因为正序输出还是倒序输出都是可接受的，所以我们可以先随便选一个只出现一次的数字作为起始位置，然后找到和它一组的另外两个元素，判断一下出现两次或者三次，起始位置先输出出现两次的，结束位置后输出出现两次的。而确定两个数之后，可以根据前两个数来找到后面那个元素，因为相邻三个数一定在一个三元组中。</li><li>这就涉及到一个问题，怎么判断两个三元组有两个元素相同，暴力遍历最终会超时。</li><li>考虑如何优化，如果通过三元组的关系将所有点画成图，我们会发现所谓出现的次数其实对应着每个点的入度，那么就可以用拓扑排序的做法来解决。需要注意的是在移去某个点时，可能会导致倒数第三个点和倒数第二点的入度同时变为1，为了使顺序不变，我们可以先将所有点根据初始入度排序。</li></ul><h4 id="超时代码：">超时代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> t <span class="token operator">:</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>second <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>res<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>first <span class="token operator">==</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>num <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>x <span class="token operator">=</span> i<span class="token punctuation">,</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>s<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> s <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token function">judge</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>b<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拓扑排序代码">拓扑排序代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果数组v[a]已经存在b，那么就不用再存</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//说明没有出现过，需要存b</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//建立一个在vector中a为下标的数组，存的数是和a有关的所有三元组的其它元素。</span><span class="token keyword">void</span> <span class="token function">rudu</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span>v<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> p<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">&gt;</span> p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">rudu</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rudu</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rudu</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//将入度大的排在前面，防止倒数第二个和倒数第三个入度同时变为1，导致顺序混乱。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找到起始位置和结束位置</span><span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>l <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">else</span> r <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> t <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//当三元组的某个元素出队后，与之相关的元素入度都要减一</span>p<span class="token punctuation">[</span>v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//不要忘记输出最后一个元素</span>cout <span class="token operator">&lt;&lt;</span> r<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 9</title>
      <link href="/posts/5967071.html"/>
      <url>/posts/5967071.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>做题的时候不要死磕一种思路，如果当前思路交不上去可以考虑换一种想法。改错有时比想新的解法更难。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Problem-1632A-Codeforces">题目： <a href="https://codeforces.com/problemset/problem/1632/A">Problem - 1632A - Codeforces</a></h4><h4 id="题意：">题意：</h4><p>给我们一个由0和1构成的字符串，问是否可以通过调整字符串的组成方式，使得整个串中没有长度大于1的回文子串。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数，表示字符串的长度。</p><p>每个样例第二行是一个字符串。</p><h4 id="输出格式">输出格式</h4><p>输出 <code>YES</code> 或 <code>NO</code> 。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 100</p><p>1 ≤ n ≤ 100</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">41121020141010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">YESYESYESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>思维题。直接判断当前字符串的长度，如果长度为2，那么只有当两个字符相同时才会有大于1的回文串。</li><li>如果长度大于2，因为字符串只会由0和1构成，那么一定会有大于1的回文串。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-Problem-1632B-Codeforces">题目： <a href="https://codeforces.com/problemset/problem/1632/B">Problem - 1632B - Codeforces</a></h4><h4 id="题意：-2">题意：</h4><p>给我们 <code>0~n-1</code> 共n个数字，可以任意组合它们位置，在排好位置后会将相邻的两个数字进行或操作，给出或操作后所有数字中最大值最小的排列方式。</p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，代表有t个样例。</p><p>每个样例是一个整数n，表示有 <code>0~n-1</code> 共n个数。</p><h4 id="输出格式-2">输出格式</h4><p>对于每个样例，输出一个由 <code>0~n-1</code> 组成的序列。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>2 ≤ n ≤ 2×10<sup>5</sup></p><p><strong>保证所有的n之和不会大于2×10<sup>5</sup></strong></p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">423510<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">0 12 0 13 2 1 0 44 6 3 2 0 8 9 1 7 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>我们会发现 <code>0~n-1</code> 这n个数中，有一个数字除了和0进行或操作外，无论和谁进行或操作都会变大，这个数字就是二进制只有1个1且在最高位的数字。显然无论怎么组合，都不能将其变的更小。</li><li>那么我们可以先将这个数字求出来和0配对，然后只要剩下的数字在进行或操作时不会变大就可以了。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>k <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>k <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题-赛后补题">第三题-赛后补题</h3><h4 id="题目：-Problem-1632C-Codeforces">题目： <a href="https://codeforces.com/problemset/problem/1632/C">Problem - 1632C - Codeforces</a></h4><h4 id="题意">题意:</h4><p>给我们两个整数a和b，每次可以选择三种操作之一进行操作：</p><ol><li>将a的值加1。</li><li>将b的值加1。</li><li>将a的值替换为a|b。</li></ol><p>问最少几次操作可以使得a==b。</p><h4 id="输入格式-3">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例包含两个整数a和b。</p><h4 id="输出格式-3">输出格式</h4><p>输出一个整数，表示最少操作次数。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ t ≤ 10<sup>4</sup></p><p>1 ≤ a &lt; b ≤ 10<sup>6</sup></p><p><strong>保证b的所有总和不超过10<sup>6</sup>。</strong></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">51 35 82 53 1956678 164422<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">132123329<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>因为b的总和不会超过10<sup>6</sup>，所以可以直接暴力(比赛的时候我人傻了，没看到b的范围，一直在考虑怎么优化时间)。</li><li>如果a和b直接或操作后结果为b，那么操作次数为1。</li><li>否则可以从a开始遍历，不断让a+1，直到a和b或操作后结果为b。</li><li>如果a和b或操作完结果大于b，那么我们就可以从b开始遍历，不断让b+1，直到b和a或操作后结果为b。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> b <span class="token operator">-</span> a<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">|</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">)</span>res <span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时i代表a</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//先让a=a|b</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">|</span> a<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时改变b，i代表b</span>cout <span class="token operator">&lt;&lt;</span> res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】AcWing - 第60场周赛</title>
      <link href="/posts/7d80e3b1.html"/>
      <url>/posts/7d80e3b1.html</url>
      
        <content type="html"><![CDATA[<h3 id="总地址：周赛60-AcWing">总地址：<a href="https://www.acwing.com/activity/content/introduction/2048/">周赛60 - AcWing</a></h3><blockquote><h3 id="前言">前言</h3><p>题目AC不是终点，做完后看看大佬们的解法，受益很大。unique去重就很好用。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-4494-吃饭-AcWing题库">题目： <a href="https://www.acwing.com/problem/content/4497/">4494. 吃饭 - AcWing题库</a></h4><h4 id="题意：">题意：</h4><p>n 个小朋友去食堂吃饭，食堂一共准备了 m 份饭和 k 瓶饮料。</p><p>请问，能否让每个小朋友都分到至少一份饭和一瓶饮料？</p><h4 id="输入格式">输入格式</h4><p>第一行包含三个整数 n,m,k。</p><h4 id="输出格式">输出格式</h4><p>如果可以让每个小朋友都分到至少一份饭和一瓶饮料，则输出 <code>Yes</code>，否则输出 <code>No</code>。</p><h4 id="数据范围">数据范围</h4><p>所有测试点满足 1≤n,m,k≤100。</p><h4 id="输入样例1：">输入样例1：</h4><pre class="line-numbers language-none"><code class="language-none">5 8 6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例1：">输出样例1：</h4><pre class="line-numbers language-none"><code class="language-none">Yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>简单判断一下两个条件是否符合就可以。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&gt;=</span>n<span class="token operator">&amp;&amp;</span>k<span class="token operator">&gt;=</span>n<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"Yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"No"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-4495-数组操作-AcWing题库">题目： <a href="https://www.acwing.com/problem/content/4498/">4495. 数组操作 - AcWing题库</a></h4><h4 id="题意：-2">题意：</h4><p>给定一个长度为 nn 的正整数数组 a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub>。</p><p>请你对该数组进行 k 次操作，每次操作具体如下：</p><ul><li>如果数组中存在非零元素，则找到其中的最小非零元素 x，将其输出，并让数组中的所有非零元素都减去 x。</li><li>如果数组中不存在非零元素，则输出 0 即可。</li></ul><h4 id="输入格式-2">输入格式</h4><p>第一行包含两个整数 n,k。</p><p>第二行包含 n 个整数 a<sub>1</sub>, a<sub>2</sub>, …, a<sub>n</sub>。</p><h4 id="输出格式-2">输出格式</h4><p>共 k 行，其中第 i 行输出第 i 次操作需要输出的值。</p><h4 id="数据范围-2">数据范围</h4><p>前四个测试点满足 1 ≤ n ≤ 10。<br>所有测试点满足 1 ≤ n, k ≤ 10<sub>5</sub>，1 ≤ a<sub>i</sub> ≤ 10<sub>9</sub>。</p><h4 id="输入样例1：-2">输入样例1：</h4><pre class="line-numbers language-none"><code class="language-none">3 51 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例1：-2">输出样例1：</h4><pre class="line-numbers language-none"><code class="language-none">11100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>因为要找到最小的非零数，我们可以先排序，然后从小到大依次输出。</li><li>这里有三个需要注意的细节：<ol><li>找到第一个非零数。</li><li>每次输出时只需要输出当前值和前一个数的差值即可。因为我们每次将所有非零数减去所输出的值，那么减去的总值其实就是上一个输出的数。</li><li>数组需要去重。</li></ol></li></ul><h4 id="比赛时代码">比赛时代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//丑陋的map去重方式</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>            p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        n<span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="unique优雅代码">unique优雅代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//使用unique对数组进行去重</span>    n<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//使用unique后求数组长度：n=unique(a,a+n)-a; 此处从a[1]开始，所以要额外减1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>i<span class="token operator">&lt;=</span>n<span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题">第三题</h3><h4 id="题目：-4496-吃水果-AcWing题库">题目： <a href="https://www.acwing.com/problem/content/4499/">4496. 吃水果 - AcWing题库</a></h4><h4 id="题意">题意:</h4><p>n 个小朋友站成一排，等着吃水果。</p><p>一共有 m 种水果，每种水果的数量都足够多。</p><p>现在，要给每个小朋友都发一个水果，要求：在所有小朋友都拿到水果后，恰好有 k 个小朋友拿到的水果和其<strong>左边相邻</strong>小朋友拿到的水果<strong>不同</strong>（最左边的小朋友当然<strong>不算数</strong>，即最左边的小朋友不包含在 k 个小朋友内）。</p><p>请你计算，一共有多少种不同的分发水果的方案。</p><h4 id="输入格式-3">输入格式</h4><p>一行，三个整数 n,m,k。</p><h4 id="输出格式-3">输出格式</h4><p>一个整数，表示合理的分发水果的方案总数量对 998244353 取模后的结果。</p><h4 id="数据范围-3">数据范围</h4><p>前 5 个测试点满足 1≤n,m≤5。<br>所有测试点满足 1 ≤ n,m ≤ 2000，0 ≤ k ≤ n−1。</p><h4 id="输入样例1：-3">输入样例1：</h4><pre class="line-numbers language-none"><code class="language-none">3 3 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例1：-3">输出样例1：</h4><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>其实有两种做法，数学做法和dp。这里只讲一下用dp的做法。</li><li>用 <code>f[i][j]</code> 表示在前i个小朋友中凑出j个不同的方案数。</li><li>前i个小朋友凑出j种不同的方案数，就等于前j-1个小朋友凑出j种不同的方案数，加上前i-1个小朋友凑出j-1种不同再乘第i位小朋友的选择数，而第i位小朋友的选择方案共有m-1种，因为他只需要和第i-1位小朋友不同就可以了。</li><li>综上可得状态转移方程：<code>f[i][j]=(f[i-1][j],f[i-1][j-1]*(m-1));</code></li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">2050</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">998244353</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>ll n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>k<span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i][j]在前i个小朋友中凑出j个不同的方案数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>ll i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">%</span>M<span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">;</span>                cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> AcWing周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 8</title>
      <link href="/posts/729140e7.html"/>
      <url>/posts/729140e7.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>牙疼，最近有点上火，两个后槽牙都得补了。再一次羡慕红唇皓齿的人。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-B-Distance-Between-Tokens-atcoder-jp">题目： <a href="https://atcoder.jp/contests/abc253/tasks/abc253_b?lang=en">B - Distance Between Tokens (atcoder.jp)</a></h4><h4 id="题意：">题意：</h4><p>给一个h行w列的图，图中有两个 <code>o</code> ，问从一个 <code>o</code> 到另一个 <code>o</code> 最少需要多少步。</p><h4 id="输入格式">输入格式</h4><p>第一行是两个整数h和w。</p><p>接下来h行，每行都是w个字符的字符串。</p><h4 id="数据范围">数据范围</h4><p>2 ≤ H, W ≤ 100</p><h4 id="输出格式">输出格式</h4><p>输出一个整数。</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 4-o---------------o--<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>BFS模板题。用队列记录当前走到了哪里，用两个数组分别记录是否走到过该点和走到该点的距离。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string s<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'o'</span><span class="token punctuation">)</span>x <span class="token operator">=</span> i<span class="token punctuation">,</span> y <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span>queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> dy<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>t<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'o'</span><span class="token operator">&amp;&amp;</span>d<span class="token punctuation">[</span>t<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>res <span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> xx <span class="token operator">=</span> t<span class="token punctuation">.</span>first <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> yy <span class="token operator">=</span> t<span class="token punctuation">.</span>second <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>xx <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> xx <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> yy <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> yy <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>st<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> xx<span class="token punctuation">,</span>yy <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>t<span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-C-Max-Min-Query-atcoder-jp">题目： <a href="https://atcoder.jp/contests/abc253/tasks/abc253_c?lang=en">C - Max - Min Query (atcoder.jp)</a></h4><h4 id="题意：-2">题意：</h4><p>我们有一个空集，对这个集合做n次操作，每次对集合有三种操作，1代表插入一个整数x，2代表删除集合中min(x的数量，c)个x，3代表求出当前集合的最大值和最小值的差。</p><h4 id="输入格式-2">输入格式</h4><p>第一行是一个整数n。</p><p>接下来有n行，每行都是 <code>1 x</code> ，<code>2 x c</code> 或者 <code>3</code> 的形式。</p><h4 id="输出格式-2">输出格式</h4><p>对于每个 <code>3</code> 的询问，输出一个整数。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 2 × 10<sup>4</sup></p><p>1 ≤ n ≤ 2 × 10<sup>5</sup></p><p>1 ≤ a<sub>i</sub> ≤ n</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">81 31 231 21 732 2 33<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">154<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>用unordered_map记录当前集合中的数，用两个优先队列分别记录最大值和最小值。</li><li>在求最大值和最小值之差时，要注意判断集合中是否还有当前这个数。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>k<span class="token punctuation">;</span><span class="token comment">//最大值</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>g<span class="token punctuation">;</span><span class="token comment">//最小值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>k<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>k<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>g<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> g<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> u<span class="token punctuation">;</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>k<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>u<span class="token punctuation">)</span>k<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>g<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>u<span class="token punctuation">)</span>g<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> e<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> w <span class="token operator">&gt;&gt;</span> e<span class="token punctuation">;</span>p<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token function">min</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题">第三题</h3><h4 id="题目：-D-FizzBuzz-Sum-Hard-atcoder-jp">题目： <a href="https://atcoder.jp/contests/abc253/tasks/abc253_d?lang=en">D - FizzBuzz Sum Hard (atcoder.jp)</a></h4><h4 id="题意">题意:</h4><p>给我们三个整数n，a，b，询问1~n中，不是a的倍数，也不是b的倍数的数之和。</p><h4 id="输入格式-3">输入格式</h4><p>输入只有三个整数，n，a，b。</p><h4 id="输出格式-3">输出格式</h4><p>每个样例如果能找到符合条件的 <code>n/2</code> 对整数，则每行输出一对，共 <code>n/2</code> 行。否则输出 <code>-1</code> 。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ N, A, B ≤ 10<sup>9</sup></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">1000000000 314 159<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">495273003954006262<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>可以先求出1<sub>n所有数的和，然后减去1</sub>n中所有a的倍数，减去1<sub>n中所有b的倍数，最后再加上1</sub>n中a和b的最小公倍数的所有倍数就是所求整数。</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>ll <span class="token function">gcd</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span> ll b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> b<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ll n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span> <span class="token operator">*</span>n<span class="token punctuation">;</span><span class="token keyword">else</span> sum <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>ll u <span class="token operator">=</span> n <span class="token operator">/</span> a<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>sum <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> u <span class="token operator">*</span> a<span class="token punctuation">;</span><span class="token keyword">else</span> sum <span class="token operator">-=</span> u <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>u <span class="token operator">=</span> n <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>sum <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> u <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token keyword">else</span> sum <span class="token operator">-=</span> u <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token operator">*</span>b<span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>u <span class="token operator">=</span> n <span class="token operator">/</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>u <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> u <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token keyword">else</span> sum <span class="token operator">+=</span> u <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> sum<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 7</title>
      <link href="/posts/e22e5d76.html"/>
      <url>/posts/e22e5d76.html</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="前言">前言</h3><p>果然还是要刷题，而且要刷难题，好久不刷题找不到思考的感觉了，看到题目有无从下手的感觉。</p></blockquote><h3 id="第一题">第一题</h3><h4 id="题目：-Problem-1631A-Codeforces">题目： <a href="https://codeforces.com/problemset/problem/1631/A">Problem - 1631A - Codeforces</a></h4><h4 id="题意：">题意：</h4><p>给两个数组a和b，可以任意交换a<sub>i</sub>和b<sub>i</sub>，求最后两个数组各自的最大值乘积。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，代表有t个样例。</p><p>每个样例第一行是一个整数，代表数组中的元素个数。</p><p>每个样例的第二行和第三行均是n个整数。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 100</p><p>1 ≤ n ≤ 100</p><p>1 ≤ a<sub>i</sub> ≤ 10000，1 ≤  b<sub>i</sub> ≤ 10000</p><h4 id="输出格式">输出格式</h4><p>输出一个整数。</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">361 2 6 5 1 23 4 3 2 2 533 3 33 3 321 22 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1892<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>无论怎么交换，两个数组中<strong>所有元素的最大值是无法避免被乘的</strong>，所以我们可以先确定总体的最大值，然后再依次遍历两个数组，看是否有两个同一位置的元素大于与总体最大值同一位置的元素，<strong>尽量将总体最大值对应位置的另一个数的值变小</strong>。</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>a<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>second <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span> <span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m1<span class="token punctuation">,</span>m2<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span>m1 <span class="token operator">=</span> p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span>m2<span class="token operator">=</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">else</span> m1 <span class="token operator">=</span> p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span>m2<span class="token operator">=</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> m2 <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&gt;</span> m2<span class="token punctuation">)</span>m2 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> m1 <span class="token operator">*</span> m2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目：-Problem-1631B-Codeforces">题目： <a href="https://codeforces.com/problemset/problem/1631/B">Problem - 1631B - Codeforces</a></h4><h4 id="题意：-2">题意：</h4><p>给定我们一个数组，每次可以选择两个数字l和k，然后将数组的[l, l+k-1]依次赋值为[l+k,l+2k-1]，要让数组中所有元素均相同最少需要几步。</p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数n，代表数列有n个整数。</p><p>每个样例第二行是n个整数，代表整个 数列。</p><h4 id="输出格式-2">输出格式</h4><p>一个整数，表示第几个字符串。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 2×10<sup>4</sup></p><p>1 ≤ n ≤ 2×10<sup>5</sup></p><p>1 ≤ a<sub>i</sub> ≤ n</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">531 1 122 154 4 4 2 444 2 1 311<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">01120<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-2">思路：</h4><ul><li>因为我们在将区间赋值时，只能从后向前赋值，所以如果整个数列所有元素均相同，那么值一定等于最后一个数。</li><li>所以我们从倒数第二个数出发，每次遇到与最后一个数不同的数，就将已经遍历的数组赋值到前面。</li></ul><h4 id="代码：-2">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span> <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span>i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> cnt <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题-赛后补题">第三题-赛后补题</h3><h4 id="题目：-Problem-1631C-Codeforces">题目： <a href="https://codeforces.com/problemset/problem/1631/C">Problem - 1631C - Codeforces</a></h4><h4 id="题意">题意:</h4><p>给我们两个整数n和k，n表示我们有0到n-1个整数，要求我们找到 <code>n/2</code> 对整数，使每一对数进行与操作后的和等于k。</p><h4 id="输入格式-3">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例只有两个整数n和k。</p><h4 id="输出格式-3">输出格式</h4><p>每个样例如果能找到符合条件的 <code>n/2</code> 对整数，则每行输出一对，共 <code>n/2</code> 行。否则输出 <code>-1</code> 。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ t ≤ 400</p><p>4 ≤ n ≤ 2<sup>16</sup>, 0 ≤ k ≤ n−1</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">44 04 14 24 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">0 31 20 21 30 12 3-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路：-3">思路：</h4><ul><li>分类讨论。</li><li>第一种情况，当 <code>k==0</code> 时，我们可以从 <code>[0, n-1]</code> 区间两侧开始向内一一配对。每对与操作后和为0。</li><li>第二种情况，当k不为0时：<ul><li>如果 <code>k&lt;n-1</code> ，那么我们显然可以将k与 <code>n-1</code> 放到一组，这时与的操作结果为k，我们只需要将剩下的数配对后与操作之和结果为0即可，我们会发现 <code>k&lt;n-1</code> 和 <code>k==0</code> 实际上只有两组不同，涉及到 <code>{0, n-1, k, n-k-1}</code> 四个数，而去除k和 <code>n-1</code> 后，0和 <code>n-k-1</code> 进行与操作结果同样为0，那么剩下的数和 <code>k==0</code> 进行相同操作即可。</li><li>如果 <code>k==n-1</code> ，我们需要凑出k，那么我们可以先用 <code>n-1</code> 和 <code>n-2</code> 与操作得到 <code>n-2</code> ，然后用 <code>n-3</code> 和1进行与操作得到1，然后将0和2配对得到0，这时我们会发现 <code>n-2+1=k</code> ，之后剩下的数和 <code>k==0</code> 时操作相同。</li></ul></li><li>注意需要特判当n==4&amp;&amp;k==3时这种情况，因为：n-1和n-2配对，n-3和0配对，还剩一个1无法实现</li></ul><h4 id="代码：-3">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token comment">//当n==4&amp;&amp;k==3时，n-1和n-2配对，n-3和0配对，还剩一个1无法实现</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"-1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//让k与n-1与操作，结果还是k</span>cout <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//0和n-k-1本来应该分别与n-1和k配对</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> k <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> n <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//n-2</span>cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//1  n是偶数，所以n-3是奇数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 6</title>
      <link href="/posts/95296de0.html"/>
      <url>/posts/95296de0.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一题">第一题</h3><h4 id="题目-Problem-1629A-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1629/A">Problem - 1629A - Codeforces</a></h4><h4 id="题意">题意:</h4><p>有n个数，每个数有两个属性W<sub>i</sub>和V<sub>i</sub>，给定我们一个初始值k。如果当前某个数的W<sub>i</sub> 小于k，那么就可以把V<sub>i</sub>加到k上，求k最大值为多少。</p><h4 id="输入格式">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，代表有t个整数。</p><p>每个样例第一行是两个整数n和k。</p><p>每个样例第二行有n个整数，分别为W<sub>1</sub> ~ W<sub>n</sub>。</p><p>每个样例第三行有n个整数，分别为V<sub>1</sub> ~ V<sub>n</sub>。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 100</p><p>1 ≤ n ≤ 100, 1 ≤ k ≤ 1000</p><p>1 ≤ W<sub>i</sub>, V<sub>i</sub> ≤ 1000</p><h4 id="输出格式">输出格式</h4><p>输出一个整数。</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">43 1020 30 109 100 105 11 1 5 1 11 1 1 1 15 12 2 2 2 2100 100 100 100 1005 8128 64 32 16 8128 64 32 16 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2961256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>水题，将所有数字按属性W从小到大排序，循环判断k是否大于W<sub>i</sub>，如果大于就加上V<sub>i</sub>，否则退出。</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>k<span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;=</span> k<span class="token punctuation">)</span>k <span class="token operator">+=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> k <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目-Problem-1629B-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1629/B">Problem - 1629B - Codeforces</a></h4><h4 id="题意-2">题意:</h4><p>给定我们一个集合和k次操作，集合中的数为区间[l, r]中的整数，每次操作可以从集合中取出两个数，并将两个数的积加入到集合中，直到k次操作结束或者集合中只有一个数。如果结束后集合中所有的数的最大公因数大于1，输出 <code>YES</code> ，否则输出 <code>NO</code></p><h4 id="输入格式-2">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例只有一行，有三个数，l，r，k。</p><h4 id="输出格式-2">输出格式</h4><p>一个整数，表示第几个字符串。</p><h4 id="数据范围-2">数据范围</h4><p>1≤ N ≤105</p><p><code>YES</code> 或 <code>NO</code></p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">91 1 03 5 113 13 04 4 03 7 44 10 32 4 01 7 31 5 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">NONOYESYESYESYESNONOYES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路-2">思路:</h4><ul><li>看上去好像很难（一眼以为不会，就去做D题了，结果D题连WA两次，一看榜发现B题通过率很高，痛！），其实很简单。</li><li>考虑这样一个问题，什么时候集合中所有数的最大公因子大于1，显然当集合中只有1个数且不为1或者集合中全部为偶数时一定符合。前者的最大公因子就是这个数本身，后者最小的公因子是2。</li><li>那么问题就转化为k次操作是否能将所有的所有的奇数转化为偶数，怎么转化？奇数乘奇数得到的是奇数，奇数乘偶数得到的是偶数。每次操作可以去掉一个奇数，直接比较集合中的奇数和k谁大就可以了。</li></ul><h4 id="代码-2">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r <span class="token operator">&amp;&amp;</span> l <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>m <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>m <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">else</span> m <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> k <span class="token operator">||</span> flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四题">第四题</h3><h4 id="题目-Problem-1629D-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1629/D">Problem - 1629D - Codeforces</a></h4><h4 id="题意-3">题意:</h4><p>有n个字符串，我们可以删除任意个字符串，问能否在不调整字符串的顺序的前提下，使得剩下的字符串成为回文串。</p><h4 id="输入格式-3">输入格式</h4><p>输入包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数n，表示有n个字符串。</p><p>接下来有n行字符串，每个字符串的长度为1~3。</p><h4 id="输出格式-3">输出格式</h4><p><code>YES</code> 或 <code>NO </code></p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ t ≤ 100</p><p>1 ≤ n ≤ 10<sup>5</sup></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">65zxabcczxba2abbad4codeforces3abc3abcdcba2abab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">YESNONOYESYESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路-3">思路:</h4><ul><li>很容易想到我们可以用map来存出现过的字符串，每个字符串根据串的长度分类讨论：<ul><li>如果字符串长度为1，显然它的逆序串就是本身，输出 <code>YES</code> 。</li><li>如果字符串长度为2，那么需要判断是否可以和长度为2或者长度为3的字符串组成回文串。</li><li>字符串长度为3，需要判断是否可以和长度为2或者长度为3的字符串组成回文串。同时要将字符串的前两个字符取出存好，以便于和后面长度为2的字符串组成回文。</li></ul></li><li>这里有个大坑，从长度为3的串中取出的子串不能和初始长度为2的串存在一起，否则将会造成混乱，比如会将abc，dba视为回文串。</li></ul><h4 id="代码-3">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//要将长度为2的字符串用两个map来存，作用主要体现在将2+3和3+3的匹配区分开。</span><span class="token comment">//如果用一个map存，会出现混乱，比如abc，dba会判断为回文子串</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p23<span class="token punctuation">,</span>pp2<span class="token punctuation">;</span><span class="token comment">//前者存原始长度为2和3的字符串，后者存从长度为3的字符串中截取的字符串</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string s1 <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p23<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">||</span>pp2<span class="token punctuation">[</span>s1<span class="token punctuation">]</span> <span class="token operator">||</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> s1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>p23<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>string s1 <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p23<span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">||</span>s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>s1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>string s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">reverse</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s2<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p23<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>s2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pp2<span class="token punctuation">[</span>s2<span class="token punctuation">]</span><span class="token operator">=</span>p23<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】货仓选址</title>
      <link href="/posts/eefbf7a4.html"/>
      <url>/posts/eefbf7a4.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：货仓选址">题目：<a href="https://www.acwing.com/problem/content/106/">货仓选址</a></h4><h4 id="题意：">题意：</h4><p>在一条数轴上有 N 家商店，它们的坐标分别为 A<sub>1</sub> ∼ A<sub>N</sub>。</p><p>现在需要在数轴上建立一家货仓，每天清晨，从货仓到每家商店都要运送一车商品。</p><p>为了提高效率，求把货仓建在何处，可以使得货仓到每家商店的距离之和最小。</p><h4 id="输入格式">输入格式</h4><p>第一行输入整数 N。</p><p>第二行 N 个整数 A<sub>1</sub> ∼ A<sub>N</sub>。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示距离之和的最小值。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 100000,<br>0 ≤ A<sub>i</sub> ≤ 40000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">46 2 9 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li><p><strong>选择方式：</strong> 如果有奇数个点，选择中位数；偶数个点则选择中心两个点之间的任意值。</p></li><li><p><strong>证明：</strong> 设 <code>0&lt;a&lt;b&lt;1</code> ，在a和b之间取一个点c，使得c到a和b的距离之和最小，显然当c取到a和b之间时距离之和最小，值为<code>b-a</code>。</p></li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>sum<span class="token operator">+=</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】耍杂技的牛</title>
      <link href="/posts/25577d66.html"/>
      <url>/posts/25577d66.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：耍杂技的牛">题目：<a href="https://www.acwing.com/problem/content/127/">耍杂技的牛</a></h4><h4 id="题意：">题意：</h4><p>农民约翰的 N 头奶牛（编号为 1…N）计划逃跑并加入马戏团，为此它们决定练习表演杂技。</p><p>奶牛们不是非常有创意，只提出了一个杂技表演：</p><p>叠罗汉，表演时，奶牛们站在彼此的身上，形成一个高高的垂直堆叠。</p><p>奶牛们正在试图找到自己在这个堆叠中应该所处的位置顺序。</p><p>这 N 头奶牛中的每一头都有着自己的重量 W<sub>i</sub> 以及自己的强壮程度 S<sub>i</sub>。</p><p>一头牛支撑不住的可能性取决于它头上所有牛的总重量（不包括它自己）减去它的身体强壮程度的值，现在称该数值为风险值，风险值越大，这只牛撑不住的可能性越高。</p><p>您的任务是确定奶牛的排序，使得所有奶牛的风险值中的最大值尽可能的小。</p><h4 id="输入格式">输入格式</h4><p>第一行输入整数 N，表示奶牛数量。</p><p>接下来 N 行，每行输入两个整数，表示牛的重量和强壮程度，第 i 行表示第 i 头牛的重量 W<sub>i</sub> 以及它的强壮程度 S<sub>i</sub>。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示最大风险值的最小可能值。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 50000,<br>1 ≤ W<sub>i</sub> ≤ 10,000,<br>1 ≤ S<sub>i</sub> ≤ 1,000,000,000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">310 32 53 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li><p><strong>排序方式：</strong> 将n头牛按照 <code>w[i]+s[i]</code> 从小到大排序。</p></li><li><p><strong>证明：</strong> 假如最优解中存在 <code>w[i]+s[i]&gt;w[i+1]+s[i+1]</code>（这里的下标指牛在最优解中的位置，不是输入时的下标），那么交换两头牛的位置可以得到</p></li></ul><pre class="line-numbers language-none"><code class="language-none">    第i个位置上的牛               第i+1个位置上的牛  交换前      w[1]+w[2]+...w[i-1]-s[i]       w[1]+w[2]+...w[i-1]+w[i]-s[i+1]交换后      w[1]+w[2]+...w[i-1]-s[i+1]     w[1]+w[2]+...w[i-1]+w[i+1]-s[i]四项同时减去 `w[1]+w[2]+...w[i-1]` 并加上 `s[i]+s[i+1]` 可以得到交换前               s[i+1]                       w[i]+s[i]交换后               s[i]                        w[i+1]+s[i+1] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>因为牛的体重和强壮值都是正数，所以<code>w[i]+s[i]&gt;s[i]</code>，又因为最优解存在<code>w[i]+s[i]&gt;w[i+1]+s[i+1]</code>，所以可以发现这四项的最大值不在交换后这两项中，从而得到两头牛交换位置后最大的风险值减小。而对于最优解中的任何两头牛都可以通过这样的方式交换两头牛的位置，所以根据<code>w[i]+s[i]</code>排序是最优的。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">50010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>PII a<span class="token punctuation">,</span>PII b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>first<span class="token operator">+</span>a<span class="token punctuation">.</span>second<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>first<span class="token operator">+</span>b<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>mm<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mm<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span>sum<span class="token operator">-</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>mm<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 5</title>
      <link href="/posts/c203c5a.html"/>
      <url>/posts/c203c5a.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一题">第一题</h3><h4 id="题目-Takahashi’s-Failure">题目: <a href="https://atcoder.jp/contests/abc252/tasks/abc252_b?lang=en">Takahashi’s Failure </a></h4><h4 id="题意">题意:</h4><p>给定n个数组成的数列，有k个询问，每个询问是一个序号，如果某一次询问的序号在原数列中是最大的数，输出 <code>Yes</code> 否则输出 <code>No</code> 。</p><h4 id="输入格式">输入格式</h4><p>输入有三行，第一行有两个整数n和k。</p><p>第二行是n个整数。</p><p>第三行是k个整数。</p><h4 id="输出格式">输出格式</h4><p><code> Yes</code> 或 <code>No </code></p><h4 id="数据范围">数据范围</h4><p>1 ≤ K ≤ N ≤ 100</p><p>1 ≤ A<sub>i</sub> ≤ 100</p><p>1 ≤ B<sub>i</sub> ≤ N</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 36 8 10 7 102 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">Yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>输入时维护一个最大值，询问时看对应的数是否等于最大值就可以。</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> mm<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>mm <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> mm<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>flag <span class="token operator">?</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Yes"</span> <span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题-赛后补题">第二题-赛后补题</h3><h4 id="题目-Slot-Strategy">题目: <a href="https://atcoder.jp/contests/abc252/tasks/abc252_c?lang=en">Slot Strategy</a></h4><h4 id="题意-2">题意:</h4><p>给我们一个由n列字符组成的老虎机，每列字符数量固定为10且列内字符互不相同，保证字符只会在 <code>‘0’~‘9’</code> 中出现。n列从第0秒开始一起转动，从第0秒开始可以令某一列停止，问当老虎机停下时，第一行全部为同一个字符最少需要经过多少秒。</p><h4 id="输入格式-2">输入格式</h4><p>第一行是一个整数n。</p><p>第2行到第n+1行均为10个字符组成的字符串。</p><h4 id="输出格式-2">输出格式</h4><p>一个整数。</p><h4 id="数据范围-2">数据范围</h4><p>2 ≤ N ≤ 100</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">501234567890123456789012345678901234567890123456789<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">40<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-2">思路:</h4><ul><li>因为数据范围很小且只有10中字符，所以我们可以从 <code>'0'</code> 到 <code>'9'</code> 依次遍历，找到代价最小的情况。</li><li>我们先看字符 <code>'0'</code> ，因为我们每秒只能停下一列，同时老虎机每秒走一个字符，容易想到的是，当两个字符 <code>'0'</code> 在同一行时，为了让这两列停止时两个字符依然在同一行，那么至少需要等10秒。这样令字符 <code>'0'</code> 在老虎机停止时全部对齐的最小的花费，其实就是找到字符 <code>'0'</code> 在哪一行的数量最多，然后加上这一行到起始位置的距离就可以。</li><li>思路很简单，但是比赛时写的代码却怎么也不对，很奇怪也很懊恼。果然不够优雅的代码终将被淘汰。</li></ul><h4 id="AC代码">AC代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>a<span class="token punctuation">[</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="26-0-32-0的WA代码">26.0/32.0的WA代码</h4><p>不知道错在哪了，虽然确实有点丑，但是实在找不到错误了，32个样例对了26个，唉</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>string s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a[i]表示全不对齐的情况下，让某个数字对齐的花费</span><span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//d[i]表示的是在同一位置出现次数最多的数字出现的位置</span><span class="token keyword">int</span> mm<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> u <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>mm <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> u <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> mm<span class="token punctuation">)</span><span class="token punctuation">{</span>mm <span class="token operator">=</span> c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题-赛后补题">第三题-赛后补题</h3><h4 id="题目-Distinct-Trio">题目: <a href="https://atcoder.jp/contests/abc252/tasks/abc252_d?lang=en">Distinct Trio </a></h4><h4 id="题意-3">题意:</h4><p>给我们n个数组成的数列，然后问我们从中挑出三个数，且三个数各不相同的组合有多少种。</p><h4 id="输出格式-3">输出格式</h4><p>第一行有1个整数n。</p><p>第二行有n个整数。</p><h4 id="输出格式-4">输出格式</h4><p>一个整数。</p><h4 id="数据范围-3">数据范围</h4><p>3 ≤ N ≤ 2×10<sup>5</sup></p><p>1 ≤ A<sub>i</sub> ≤ 2×10<sup>5</sup></p><p>1 ≤ ai ≤ 10<sup>4</sup></p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">153 1 4 1 5 9 2 6 5 3 5 8 9 7 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">355<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-3">思路:</h4><ul><li>首先我们可以先不看条件的限制，单看从n个数中取出3个数有多少种取法，很容易得到方案数为：C<sup>3</sup><sub>n</sub> ，然后从中去掉有重复元素的组数就可以了。</li><li>因为这是个三元组，所以重复元素个数只能为2或3，分别减去对应的数量就可以了。</li><li>需要注意的是当重复元素个数是2时的算法，例如 <code>aab</code> 这种组合，b的可选方案是 <code>n-cnt[a]</code> ，不要忘记乘。</li></ul><h4 id="代码-2">代码:</h4><h4 id="代码-3">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a坐标，b每公里路程所花时间</span><span class="token comment">//f[i][j]是从起点走到第i个路牌时，恰好选了j个路牌（可以包含第i个路牌）的方式所花时间的集合，属性取所有时间中的最小值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token comment">//n个路牌，m段路程，删除k个</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token comment">//</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//走到第一个路牌并且选了一个路牌所花费时间为0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment">//我们将终点处视为一个路牌</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---组队赛 1</title>
      <link href="/posts/a7edd591.html"/>
      <url>/posts/a7edd591.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：-A-Sorting-Problem">题目： <a href="https://codeforces.com/gym/103373/problem/C">A Sorting Problem</a></h4><h4 id="题意：">题意：</h4><p>给定由n个互不相同的正整数（1~n）组成的序列，每次选择两个差的绝对值为1的整数，交换它们的位置，问最少交换几次可以使得整个数列有序。</p><h4 id="输入格式">输入格式</h4><p>输入第一行是一个整数n。</p><p>第二行有n个整数。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示最小交换次数。</p><h4 id="数据范围">数据范围</h4><p>1 &lt; n ≤ 200000</p><p>1 ≤ p[i] ≤ n</p><p>所有的p[i]都是不同的</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">55 3 2 1 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>我们可以思考这样一个问题，如何通过交换，将样例中的1放到第一位？显然如果想要将1放到第一位，那么必须先将2放到第一位，然后让2和1交换位置，同理，要将2放到第一位需要先将3放到第一位…，那么我们就会发现，将1放到第一位需要交换的次数就是 <code>5-1 = 4</code> 次，而交换后与第一位交换过的数都要变为比自己大1的数，为什么？因为我们将5变小到1的过程中，与第一位进行交换的数都比第一位小1。</li><li>容易想到的是恒有 <code>a[i]&gt;=i </code>，因为我们是从前向后遍历的每一位，所以前 <code>i-1</code> 位都已经放好了。</li><li>那么就可以得到<ul><li>第一步：第 <code>i</code> 位交换的次数就是 <code>a[i]-i</code> 。</li><li>第二步：将第 <code>i</code> 位后面 <code>[i+1, a[i]]</code> 每个数加1。</li></ul></li><li>因为 <code>n</code> 最大有 10<sup>5</sup> ，直接遍历会超时~~，痛！~~。</li><li>如何优化？我们重新审视上面两步会发现第一步∑为0，因为数列的组成元素就是 <code>[1, n]</code> ，两个相同的集合相减结果显然为∅。</li><li>那么就只用考虑第二步，依次去找每个数后面比他小的数似乎很难，那么我们可以将问题转为求∑区间[1, i-1]小于a[i]的数量，我们会惊讶的发现，这实际上就是求整个数列的逆序对！直接套用 <a href="http://xinyi127.cn/2022/07/11/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E6%A8%A1%E6%9D%BF/">归并排序模板</a> 的模板就可以。</li><li>虽然当时这道题做出来了，但是时间错了6次才最终看明白是在考察逆序对。顺便提醒一下模板的重要性。</li></ul><h4 id="代码：">代码：</h4><h4 id="直接做，TLE">直接做，TLE</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//a数组存原数列，b[i]表示i在a数组中的位置</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll res<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token comment">//第一步</span>        res <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>        <span class="token comment">//第二步</span>        <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> t<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>a<span class="token punctuation">[</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//滚动数组，逆序修改b数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> t<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span>i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>b<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区间合并求逆序对">区间合并求逆序对</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>tmp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll res<span class="token punctuation">;</span><span class="token comment">//区间合并模板</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            res <span class="token operator">+=</span> mid<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】区间分组</title>
      <link href="/posts/91fc4670.html"/>
      <url>/posts/91fc4670.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：区间分组">题目：<a href="https://www.acwing.com/problem/content/908/">区间分组</a></h4><h4 id="题意：">题意：</h4><p>给定 N 个闭区间 [ai,bi]，请你将这些区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使得组数尽可能小。</p><p>输出最小组数。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 N，表示区间数。</p><p>接下来 N 行，每行包含两个整数 ai,bi，表示一个区间的两个端点。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示最小组数。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 10<sup>5</sup> ,<br>−10<sup>9</sup> ≤ ai ≤ bi ≤ 10<sup>9</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3-1 12 43 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>首先我们要明确，涉及区间的贪心问题一般都是<strong>先排序，后处理</strong>。至于是根据左端点排序还是根据右端点，需要我们根据实际情况来判断。可以是直觉，也可以根据现实情况或者试一试样例，反正能过就可以了，贪心问题难就难在证明，<s>这么做肯定对，为什么对？说不出来。</s></li><li>第一步：将所有区间按左端点从小到大排序（第一步就很奇怪，也许有同学会觉得这道题和 <a href="http://xinyi127.cn/2022/07/11/%E6%9C%80%E5%A4%A7%E4%B8%8D%E7%9B%B8%E4%BA%A4%E5%8C%BA%E9%97%B4%E6%95%B0%E9%87%8F/">最大不相交区间数量</a> 很像，根据传递性那么这道题应该也根据右端点排序才对，但事实就是需要根据左端点）。</li><li>第二步：依次枚举每个区间，判断是否能将其放入现有的某个组中 <code>L[i] &gt; Max_r</code> 。<ul><li>如果不存在这样的组，说明当前区间与现有所有组有冲突，开辟新的组并放入该区间。</li><li>如果存在这样的组，<strong>将该区间随意放入任何一个可以放入的组中</strong>（为什么可以随便放？首先无论我们放入哪个合法的组中，放入后该组的 <code>Max_r</code> 都会更新为该区间的 <code>R[i]</code> ，其次因为我们是根据左端点排序的，所以一定有 <code>L[i+1]&gt;=L[i]</code>，那么这个区间能放入的组后面的区间也一定能放入），并更新该组的 <code>Max_r</code>。</li></ul></li><li>如何实现这样的分组？优先队列。因为我们需要维护每个组的 <code>Max_r</code> ，所以我们只需要存每个组的 <code>Max_r</code> 即可，然后每次与队中的首元素比较，如果可以加入就该区间 <code>L[i]</code> 入队并将首元素出队。否则就直接将 <code>L[i]</code> 入队。队列中<strong>每个元素表示一个分组</strong>。</li><li>注意，优先队列默认大根堆，如果想让元素从小到大排序需要在定义时补充<code>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;q;</code></li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 区间问题 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】区间合并</title>
      <link href="/posts/d8d60a6c.html"/>
      <url>/posts/d8d60a6c.html</url>
      
        <content type="html"><![CDATA[<h3 id="区间合并代码模板">区间合并代码模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>segs<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>segs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>segs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">,</span>ed<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> seg<span class="token operator">:</span>segs<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span>first <span class="token operator">&gt;</span> ed<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>seg<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ed<span class="token operator">=</span>seg<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> ed<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span>seg<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        segs<span class="token operator">=</span>res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="区间合并思想：">区间合并思想：</h3><ul><li>维护一个区间，如果无法继续维护，就更新为新的区间</li></ul><h3 id="区间合并图示：">区间合并图示：</h3><p><img src="https://s2.loli.net/2022/07/11/G1s9RF4CNM3p8mx.png" alt="区间合并步骤"></p><h3 id="区间合并细节">区间合并细节</h3><ul><li>通常我们用pair来存每个区间</li><li>首先对vector进行排序，sort默认对pair第一个元素进行排序</li><li>然后进行区间合并，需要注意我们开始维护的区间要设为极小值</li></ul><h3 id="用法：">用法：</h3><h4 id="题目链接：区间合并">题目链接：<a href="https://www.acwing.com/problem/content/805/">区间合并</a></h4><h4 id="题意：">题意：</h4><p>给定 n 个区间 [li,ri]，要求合并所有有交集的区间。</p><p>注意如果在端点处相交，也算有交集。</p><p>输出合并完成后的区间个数。</p><p>例如：[1,3] 和 [2,6] 可以合并为一个区间 [1,6]。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含两个整数 l 和 r。</p><h4 id="输出格式">输出格式</h4><p>共一行，包含一个整数，表示合并区间完成后的区间个数。</p><h4 id="数据范围">数据范围</h4><p>1≤n≤100000<br>−10<sup>9</sup> ≤ li ≤ ri ≤ 10<sup>9</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">51 22 45 67 87 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> segs<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>segs<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>segs<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>segs<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一定要排序，sort对pair排序时默认先对first排序</span>    <span class="token keyword">int</span> st<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">,</span>ed<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">;</span><span class="token comment">//开始时一定要将左右区间设为极小值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> seg<span class="token operator">:</span>segs<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//如果新的区间严格大于我们所维护区间，更新所维护区间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>seg<span class="token punctuation">.</span>first <span class="token operator">&gt;</span> ed<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment">//如果一个区间已经维护完毕，将其加入到seg，//特判第一个区间，注意是st是否为-2e9，</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>seg<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ed<span class="token operator">=</span>seg<span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//否则我们就更新所维护区间的右端点</span>        <span class="token keyword">else</span> ed<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span>seg<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//特判最后一个区间，防止一个区间也没有的情况</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        segs<span class="token operator">=</span>res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>l<span class="token operator">&gt;&gt;</span>r<span class="token punctuation">;</span>        segs<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//区间和并</span>    <span class="token function">merge</span><span class="token punctuation">(</span>segs<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>segs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span>  <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 区间问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】区间覆盖</title>
      <link href="/posts/35ae9121.html"/>
      <url>/posts/35ae9121.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：区间覆盖">题目：<a href="https://www.acwing.com/problem/content/909/">区间覆盖</a></h4><h4 id="题意：">题意：</h4><p>给定 N 个闭区间 [ai,bi] 以及一个线段区间 [s,t]，请你选择尽量少的区间，将指定线段区间完全覆盖。</p><p>输出最少区间数，如果无法完全覆盖则输出 −1。</p><h4 id="输入格式">输入格式</h4><p>第一行包含两个整数 s 和 t，表示给定线段区间的两个端点。</p><p>第二行包含整数 N，表示给定区间数。</p><p>接下来 N 行，每行包含两个整数 ai,bi，表示一个区间的两个端点。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示所需最少区间数。</p><p>如果无解，则输出 −1。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 10<sup>5</sup>,<br>−10<sup>9</sup> ≤ ai ≤ bi ≤ 10<sup>9</sup>,<br>−10<sup>9</sup> ≤ s ≤ t ≤ 10<sup>9</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 53-1 32 43 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>第一步：将所有区间按左端点排序。</li><li>第二步：依次枚举每个区间，在所有能覆盖 <code>start</code> 的区间中，选择右端点最大的区间，然后更新 <code>start</code> 为右端点的最大值。</li><li><img src="https://s2.loli.net/2022/07/11/MvZfHN3ITJwphml.png" alt="区间覆盖第二步"></li></ul><h4 id="代码">代码</h4><p><strong>特判第一个区间，更容易理解</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>st<span class="token operator">&gt;&gt;</span>ed<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token comment">//排序</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>max_r<span class="token punctuation">;</span>    <span class="token comment">//特判第一个区间，如果第一个区间都不能覆盖start，说明无法将给定区间全部覆盖</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;</span>st<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>        max_r<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//已经全部覆盖</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max_r<span class="token operator">&gt;=</span>ed<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment">//能够覆盖start，更新max_r</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;=</span>st<span class="token punctuation">)</span>            max_r<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>max_r<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//不能覆盖start，那么记录新的start，并更新max_r</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;</span>st <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;=</span>max_r <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">&gt;</span>max_r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>max_r<span class="token punctuation">;</span>            max_r<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果更新完后依然无法覆盖给定区间的右端点，那么输出-1</span>    <span class="token punctuation">(</span>max_r<span class="token operator">&lt;</span>ed<span class="token punctuation">)</span><span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>不特判第一个区间，代码更优雅</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">,</span>st<span class="token punctuation">,</span>ed<span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>st<span class="token operator">&gt;&gt;</span>ed<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>max_r<span class="token operator">=</span>st<span class="token punctuation">,</span>st<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;=</span>st<span class="token punctuation">)</span>            max_r<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>max_r<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//注意，p[i].second&gt;=max_r这里比较难理解，可以在纸上画一下帮助理解</span>        <span class="token comment">//或者在这个if前后输出st,ed,p[i].first,p[i].second看一下更为直观</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;</span>st <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&lt;=</span>max_r <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token operator">&gt;=</span>max_r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            st<span class="token operator">=</span>max_r<span class="token punctuation">;</span>            max_r<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token comment">//当覆盖区间的最大右端点已经能够覆盖给定区间的右端点时退出</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>max_r<span class="token operator">&gt;=</span>ed<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//如果res为0或者无法覆盖整个区间，输出-1</span>    <span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token operator">||</span>max_r<span class="token operator">&lt;</span>ed<span class="token punctuation">)</span><span class="token operator">?</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 区间问题 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】区间选点</title>
      <link href="/posts/d8c11c37.html"/>
      <url>/posts/d8c11c37.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：-区间选点">题目： <a href="https://www.acwing.com/problem/content/907/">区间选点</a></h4><h4 id="题意：">题意：</h4><p>给定 N 个闭区间 [ai,bi]，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。</p><p>输出选择的点的最小数量。</p><p>位于区间端点上的点也算作区间内。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 N，表示区间数。</p><p>接下来 N 行，每行包含两个整数 ai,bi，表示一个区间的两个端点。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示所需的点的最小数量。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 10^5,<br>−10^9 ≤ ai ≤ bi ≤ 10^9</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3-1 12 43 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>涉及区间的贪心题目一般都要先排序再逐个对区间进行操作，要么根据左端点排序，要么根据右端点排序，或者双关键字排序。</li><li>第一步：将每个区间按右端点从小到大排序。</li><li>第二步：从前向后依次枚举每个区间。如果当前区间中已经包含点（实际意义就是被维护的“右值”覆盖），就直接跳过。否则选择当前区间的右端点，更新所维护的“右值”。</li><li>这里的“右值”就是指某个点所能延伸到的最右端，在这个范围内的区间都将包含点。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>PII a<span class="token punctuation">,</span>PII b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            r<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 区间问题 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】合并果子</title>
      <link href="/posts/9717c293.html"/>
      <url>/posts/9717c293.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：合并果子">题目：<a href="https://www.acwing.com/problem/content/150/">合并果子</a></h4><h4 id="题意：">题意：</h4><p>在一个果园里，达达已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。</p><p>达达决定把所有的果子合成一堆。</p><p>每一次合并，达达可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。</p><p>可以看出，所有的果子经过 n−1 次合并之后，就只剩下一堆了。</p><p>达达在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以达达在合并果子时要尽可能地节省体力。</p><p>假定每个果子重量都为 1，并且已知果子的种类数和每种果子的数目，你的任务是设计出合并的次序方案，使达达耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 3 种果子，数目依次为 1，2，9。</p><p>可以先将 1、2 堆合并，新堆数目为 3，耗费体力为 3。</p><p>接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 12，耗费体力为 12。</p><p>所以达达总共耗费体力=3+12=15。</p><p>可以证明 15 为最小的体力耗费值。</p><h4 id="输入格式">输入格式</h4><p>输入包括两行，第一行是一个整数 n，表示果子的种类数。</p><p>第二行包含 n 个整数，用空格分隔，第 i 个整数 ai 是第 i 种果子的数目。</p><h4 id="输出格式">输出格式</h4><p>输出包括一行，这一行只包含一个整数，也就是最小的体力耗费值。</p><p>输入数据保证这个值小于 2<sup>31</sup>。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ n ≤ 10000,<br>1 ≤ ai ≤ 20000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3 1 2 9 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>考虑对于当前步骤最优的行动，显然是取当前的两个最小值相加。</li><li>而通过合并的哈夫曼树可以证明将较小值从浅层交换到深层一定会导致哈夫曼树的代权路径长度变小，这就说明了每次选最小的两个是全局最优。</li><li>所以最优解就是每次将两个最小值从集合中取出相加，并将新的数加入到集合中，直到集合中只剩下一个数时，就是所求值。</li><li>可能有同学会觉得这道题和 <a href="http://xinyi127.cn/2022/07/11/%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/">石子合并</a> 这道题很像，但其实不一样。<ul><li>1.<em>石子合并</em> 只允许合并两个相邻的石子。而本题则允许合并任意两堆。</li><li>2.<em>石子合并</em> 的数据范围 <code>n</code> 不大于300，而这道题 <code>n</code> 的范围是不大于10<sup>4</sup>。</li></ul></li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">10010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token comment">//优先队列相当于自己实现了一个哈夫曼树</span>priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ll sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>x<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>y<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span>        <span class="token comment">//提前判断队列是否为空，否则会一直循环</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>sum<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
            <tag> Huffman树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模板】归并排序</title>
      <link href="/posts/41540c62.html"/>
      <url>/posts/41540c62.html</url>
      
        <content type="html"><![CDATA[<h3 id="归并排序代码模板">归并排序代码模板</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void merge_sort(int l, int r){    if(l &gt;= r)return ;    int mid = (l + r)&gt;&gt;1;    merge_sort(l, mid),merge_sort(mid + 1, r);        int k = 0, i = l, j = mid + 1;    while(i &lt;= mid&amp;&amp;j &lt;= r)    {        if(a[i] &lt; a[j])temp[k ++] = a[i ++];        else temp[k ++] = a[j ++]; //要求逆序对的话，在else的作用域中额外加 ans+=(mid-i+1)    }    while(i &lt;= mid) temp[k ++] = a[i ++];    while(j &lt;= r) temp[k ++] = a[j ++];        for(i = l, j = 0; i &lt;= r; ++ i, ++ j)a[i] = temp[j];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="归并图示步骤：">归并图示步骤：</h3><p><img src="https://s2.loli.net/2022/07/11/ZfEq4P3UDMIAtJk.png" alt="归并排序图示"></p><ol><li>确定分界点：数列中点， <code>mid=(l+r)/2</code> 。</li><li>归并排序左半边和右半边。</li><li>将排序好的左右两边归并，合二为一。</li></ol><h3 id="归并细节">归并细节</h3><ul><li>确定递归终结条件 <code>l&gt;=r</code> 。</li><li>分别递归左右两边。</li><li>将排序好的两边合二为一，排序实际上就隐含在合并的过程中了。</li><li>合并排序是稳定O(n*log(n))的复杂度，而且是稳定的，但是相对于快排需要额外开辟一个数组。</li><li>归并排序的思想 - 基于分治。</li></ul><h3 id=""></h3><h4 id="题目：归并排序">题目：<a href="https://www.acwing.com/problem/content/789/">归并排序</a></h4><h4 id="题意：">题意：</h4><p>给定你一个长度为 n 的整数数列。</p><p>请你使用归并排序对这个数列按照从小到大进行排序。</p><p>并将排好序的数列按顺序输出。</p><h4 id="输入格式">输入格式</h4><p>输入共两行，第一行包含整数 n。</p><p>第二行包含 n 个整数（所有整数均在 1∼10<sup>9</sup> 范围内），表示整个数列。</p><h4 id="输出格式">输出格式</h4><p>输出共一行，包含 n 个整数，表示排好序的数列。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ n ≤ 100000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">53 1 2 4 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 2 3 4 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="排序代码">排序代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//中点</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">merge_sort</span><span class="token punctuation">(</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归左右两半边</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//i和j分别作为左右两边的起点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token operator">&amp;&amp;</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment">//两边都还有剩余</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//左半边有剩余</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j <span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//右半边有剩余</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">,</span> <span class="token operator">++</span> j<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//合并好后返回给原数组</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span> i<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="利用归并排序寻找给定数列的逆序对的数量">利用归并排序寻找给定数列的逆序对的数量</h4><h4 id="题目：逆序对的数量">题目：<a href="https://www.acwing.com/problem/content/790/">逆序对的数量</a></h4><h4 id="题意：-2">题意：</h4><p>给定一个长度为 n 的整数数列，请你计算数列中的逆序对的数量。</p><p>逆序对的定义如下：对于数列的第 i 个和第 j 个元素，如果满足 i&lt;j 且 a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p><h4 id="输入格式-2">输入格式</h4><p>第一行包含整数 n，表示数列的长度。</p><p>第二行包含 n 个整数，表示整个数列。</p><h4 id="输出格式-2">输出格式</h4><p>输出一个整数，表示逆序对的个数。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ n ≤ 100000，<br>数列中的元素的取值范围 [1,  10<sup>9</sup>]。</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">62 3 4 5 6 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><p><img src="https://s2.loli.net/2022/07/11/ZPVdxeqK8tDGr2E.png" alt="逆序对图示"></p><ul><li>根据上图我们可以发现，实际上所有的逆序对可以分为三种情况，我们重点分析第三种情况（后面会说原因）</li><li>分别在左右两侧的逆序对数量实际上在归并的过程中就可以得到，因为左右两侧都是有序数列</li><li>那么怎么去得到左边和右边的逆序对数量呢，我们会发现如果只看左边，问题回到了开始：求给定数列的逆序对</li><li>所以我们在不断向下递归的过程中就已经将情况1和情况2解决</li><li>注意：两个数字如果大小相同则不属于逆序对</li></ul><h4 id="逆序对代码">逆序对代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">&gt;=</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">merge_sort</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">merge_sort</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//务必注意，两个数字相同时不属于逆序对，必须严格符合前大后小</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//条件必须是a[i] &lt;= a[j]</span>        <span class="token comment">//如果数列1中第i个数大于数列2中第j个数，那么数列1中i之后的所有均大于j，那么就会产生(mid-i+1)个逆序对</span>        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ans<span class="token operator">+=</span><span class="token punctuation">(</span>mid<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>l<span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】最大不相交区间数量</title>
      <link href="/posts/2c36b9fe.html"/>
      <url>/posts/2c36b9fe.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：最大不相交区间数量">题目：<a href="https://www.acwing.com/problem/content/910/">最大不相交区间数量</a></h4><h4 id="题意：">题意：</h4><p>给定 N 个闭区间 [ai,bi]，请你在数轴上选择若干区间，使得选中的区间之间互不相交（包括端点）。</p><p>输出可选取区间的最大数量。</p><h4 id="输入格式">输入格式</h4><p>第一行包含整数 N，表示区间数。</p><p>接下来 N 行，每行包含两个整数 ai,bi，表示一个区间的两个端点。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示可选取区间的最大数量。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 10<sup>5</sup>,<br>−10<sup>9</sup> ≤ ai ≤ bi ≤ 10<sup>9</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3-1 12 43 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>第一步：将每个区间按右端点从小到大排序。</li><li>第二步：从前向后依次枚举每个区间。如果当前区间中已经包含点（实际意义就是被维护的“右值”覆盖），就直接跳过。否则选择当前区间的右端点，更新所维护的“右值”。</li><li>这里的“右值”就是指某个点所能延伸到的最右端，在这个范围内的区间都将包含点。</li><li>我们会发现和 <a href="http://xinyi127.cn/2022/07/11/%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9/">区间选点</a> 这道题思路是一样，甚至代码也一样，为什么会这样？我们来看这道题的题意，题目要求我们找到最多的互不相交的区间，而 <a href="http://xinyi127.cn/2022/07/11/%E5%8C%BA%E9%97%B4%E9%80%89%E7%82%B9/">区间选点</a> 这道题则是要求我们找到最少的点来覆盖所有区间，我们在做这两道题时都是维护了一个“右值”，如果某个区间包含了“右值”，说明他被覆盖了，为了保证点的数量最少，我们尽可能的多的让互相覆盖的区间属于一个点，那么点与点之间就相当于两个互不相交的区间，所以当我们在找最少的点来覆盖所有区间时，实际上就找出了最多的互不相交的区间，数量就等于点的数量。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>PII a<span class="token punctuation">,</span>PII b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>ed<span class="token operator">=</span><span class="token operator">-</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token operator">&gt;</span>ed<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            ed<span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 区间问题 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】石子合并</title>
      <link href="/posts/3627bcdd.html"/>
      <url>/posts/3627bcdd.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：石子合并">题目：<a href="https://www.acwing.com/problem/content/284/">石子合并</a></h4><h4 id="题意：">题意：</h4><p>设有 N 堆石子排成一排，其编号为 1，2，3，…，N。</p><p>每堆石子有一定的质量，可以用一个整数来描述，现在要将这 N 堆石子合并成为一堆。</p><p>每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。</p><p>例如有 4 堆石子分别为 <code>1 3 5 2</code>， 我们可以先合并 1、2 堆，代价为 4，得到 <code>4 5 2</code>， 又合并 1，2 堆，代价为 9，得到 <code>9 2</code> ，再合并得到 11，总代价为 4+9+11=24；</p><p>如果第二步是先合并 2，3 堆，则代价为 7，得到 <code>4 7</code>，最后一次合并代价为 11，总代价为 4+7+11=22。</p><p>问题是：找出一种合理的方法，使总的代价最小，输出最小代价。</p><h4 id="输入格式">输入格式</h4><p>第一行一个数 N 表示石子的堆数 N。</p><p>第二行 N 个数，表示每堆石子的质量(均不超过 1000)。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示最小代价。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ N ≤ 300</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">41 3 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">22<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><ul><li>容易想到，最后一次合并一定是将两堆石子合并为一堆，并且无论怎么分组代价都一样。虽然分组影响不了最后一次合并，但是可以影响合并到最后一步之前的代价，所以我们可以考虑通过遍历不同的分组，找到最后一次合并之前的代价最小值。</li><li>通过上述分析我们可以发现，任意合并为一堆的两堆都可以通过不同的划分方式来找到最小的代价，那么就得到了状态转移方程： <code>f[l][r]=min(f[l][r],f[l][k]+f[k+1][r]+s[r]-s[l-1]);</code> 其中 <code>f[l][r]</code> 表示从 <code> l</code> 合并到 <code> r</code> 花费的代价。</li><li>需要注意 <code>f[l][r]</code> 初始化的时机。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">310</span><span class="token punctuation">;</span><span class="token keyword">int</span> s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//前缀和</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i][j]表示将第i堆到第j堆石子合并的所有方式中代价的最小值</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//枚举石子堆的长度</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>len<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>len<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//石子堆的起点和终点</span>            <span class="token keyword">int</span> l<span class="token operator">=</span>i<span class="token punctuation">,</span>r<span class="token operator">=</span>i<span class="token operator">+</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//要在比较f[l][r]之前初始化f[l][r], 因为单独一堆石子是不需要体力的, 如果用memset就破坏了这个条件</span>            f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>            <span class="token comment">//石子堆的分割线</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>i<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>r<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>                f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 区间问题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 3</title>
      <link href="/posts/e543996f.html"/>
      <url>/posts/e543996f.html</url>
      
        <content type="html"><![CDATA[<p><s>我TM怎么这么垃圾，我要是有技术，会是这个吊样？</s></p><p><s>不过元气骑士要更新了，期待。</s></p><h3 id="第一题">第一题</h3><h4 id="题目-Problem-1625A-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1625/A">Problem - 1625A - Codeforces</a></h4><h4 id="题意">题意:</h4><p>给n个数字，让我们找到一个转化为二进制后恰好为L位的数字y，使得n个数字与求得的数字y误差之和最小。规定两个数字的误差等于两个数字二进制中不同位的数量。例如：1011和1111的误差为1，因为只有1位不同。</p><h4 id="输入格式">输入格式</h4><p>输入有多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是两个整数n和L。</p><p>每个样例第二行是n个整数，表示给定的n个数字。</p><h4 id="输出格式">输出格式</h4><p>一个十进制整数y。</p><p>样例数 1 &lt;= t &lt;=10<sup>4</sup> ，其余均小于100。</p><h4 id="输出格式-2">输出格式</h4><p>输出一个整数。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ t ≤ 100</p><p>1 ≤ n ≤ 100, 1 ≤ ℓ ≤ 30</p><p>0 ≤ xi ≤2<sup>ℓ−1</sup></p><p>0 ≤ y ≤ 2<sup>ℓ−1</sup></p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">73 518 9 213 518 18 181 115 301 2 3 4 56 1099 35 85 46 78 552 10 18 85 16 42 15 83 65 78 42<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1718113902<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>其实这个题难点在于读懂题意，<s>原文里鬼扯半天火星、陌生语言、科学家、石板等等，看得我云里雾里的，我到底是来做题的还是来看小说的。</s></li><li>题目规定误差就是两个数字二进制下的不同位数，那么显然要用到位操作，题目要求我们找到一个数字y使得y与所有数字的误差最小，那么我们可以从这里入手，建立一个数组表示所有数字在某一位上1的数量，例如a[1]，就表示所有数字二进制表示下，第一位有多少个1。因为具体到某一位要么是1要么是0，那么所谓的误差也就是0和1的数量区别，记录下所有数字的每一位后。遍历数组，如果某个位上1的数量大于n/2，那么我们就加上这一位的权重，求和就是答案。</li><li><strong>务必看清题目给的数据范围</strong>，因为看错n和L的范围导致一直用40的数组在存数，结果痛wrong两次！</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>l<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> l<span class="token punctuation">;</span><span class="token comment">//n个数，l位</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>w<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> l<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span>k<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> n <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">+=</span> k<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目-Problem-1625B-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1625/B">Problem - 1625B - Codeforces</a></h4><h4 id="题意-2">题意:</h4><p>在一个数列中找两个长度相同的子数列，这两个子数列必须有相同的成员，相同成员指在两个子数列同一位置有相同的数字。两个子数列的起点必须不同。</p><h4 id="输入格式-2">输入格式</h4><p>数据包含多个样例，第一行是一个整数t，表示有t个样例。</p><p>每个样例第一行是一个整数n。</p><p>每个样例第二行是n个正整数，表示整个数列。</p><h4 id="输出格式-3">输出格式</h4><p>一个整数，表示子数列的最大长度。如果找不到则输出-1。</p><h4 id="数据范围-2">数据范围</h4><p>1 ≤ t ≤ 100</p><p>2 ≤ n ≤ 150000</p><p>1 ≤ ai ≤ 150000</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">473 1 5 2 1 3 461 1 1 1 1 161 4 2 8 5 7215 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">45-11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路-2">思路:</h4><ul><li>首先明确一点，题目要求两个子数列必须有相同成员，但是没有要求相同成员的长度，易得相同成员长度为1时得到的两个子数列长度一定是最长的。</li><li>那么问题就转化为找到两个相同的数字，然后围绕两个相同数字生成两个长度相同，起点不同的数列。什么时候两个子数列长度最大呢？答案是当两个相同字符的距离最近时。</li><li>为什么？我们先来看如何根据两个数字生成子数列，子数列的长度就等于第一个数字到起点的距离加第二个数字到末尾的距离。因为第二个数字到起点的距离一定小于第一个到起点的距离，而第一个数字到结尾的距离一定小于第二个到结尾的距离。</li><li>那么就可以得到答案，当两个相同字符，距离最近时，得到的一定是最优解。</li></ul><h4 id="代码-2">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">150010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//cout &lt;&lt;"??" &lt;&lt; p[a[i]] &lt;&lt; endl;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//cout &lt;&lt; res &lt;&lt; endl;</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> n<span class="token operator">-</span>res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题-赛后补题">第三题-赛后补题</h3><h4 id="题目-Problem-1625C-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1625/C">Problem - 1625C - Codeforces</a></h4><h4 id="题意-3">题意:</h4><p>在一段路程为L的路上有n个路牌，在位置d[i]处有一个路牌，上面记录的数字代表从路牌d[i]走到路牌d[i+1]每公里花费的时间，现在我们最多可以去掉k个路牌，要求给出能够将总时间缩短到多少。注意，第一个路牌不可以去掉。</p><h4 id="输出格式-4">输出格式</h4><p>第一行有三个整数n, L, k，分别表示有n个路牌，公路长L公里，最多可以去掉k个路牌。</p><p>第二行有n个数，表示路牌的位置。</p><p>第三行有n个正整数，表示从当前路牌走到下一个路牌每公里所花费的时间。</p><h4 id="输出格式-5">输出格式</h4><p>一个整数，表示缩短后的时间。</p><h4 id="数据范围-3">数据范围</h4><p>1 ≤ n ≤ 500, 1 ≤ ℓ ≤ 10^5, 0 ≤ k ≤ n −1</p><p>d1=0, di &lt; di+1, 0 ≤ di ≤ ℓ−1</p><p>1 ≤ ai ≤ 10^4</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">4 10 00 3 4 85 8 3 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">47<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-3">思路:</h4><ul><li><p><s>一眼贪心，不出所料wrong answer</s></p></li><li><p>说说为什么不能贪心来做，首先要清晰的明白贪心局部最优，是不能保证整体最优意味着什么。贪心的做法：我们可以将所有路牌按照从大到小排序，然后去掉前j个路牌，如果两个路牌时间相同，那么就比较两者的前一个路牌，去掉前一个路牌数字更小的路牌，虽然确实将时间缩短了，但是无法保证一定是最优解。我们来看这个例子：有3个路牌，路程为10，要求去掉1个路牌。路牌位置：<code>0,5,9 </code>，路牌速度：<code> 5,10,11</code> 。如果按照贪心来做我们应该去掉数字为 <code>11</code> 的路牌，结果为 <code>5*5+10*5=75</code> ，但是显然我们可以通过去掉数字为 <code>10</code> 的路牌将时间缩短到 <code>5*9+11=56</code> 。可见贪心是不能保证得到最优解的。</p></li><li><p>考虑动态规划，既然有两个变量，那么一般就要用到二维数组。</p></li><li><p>用<code>f[i][j]</code> 表示走到第i个路牌已经选择了 <code>j</code> 个路牌所花费的时间的集合，属性是所有时间中的最小值。</p></li><li><p>如何计算状态？从选择了 <code>j</code> 个路牌入手，既然当前我们走到第 <code>i</code> 个路牌已经选择了 <code>j</code> 个路牌，那么一定是从选择了 <code>j-1</code> 个路牌处转移过来的，问题在于我们无法确定选择的第 <code>j-1</code> 块路牌是哪一块，不过没关系，不知道那就暴力跑一边好了，它一定在前 <code>i-1</code>个路牌中。</p></li><li><p>那么就得到了状态转移方程：<code>f[i][j] = min(f[i][j], f[u][j-1] + (a[i] - a[u]) * b[u]);</code> u表示遍历前 <code>i-1</code> 路牌。</p></li><li><p>务必将极大值写成 <code>0x3f3f3f3f </code>或者 <code>1e9</code> ，<code>0x3f3f </code>只有可怜的 <code>16191 </code>，别问我怎么知道的，问就是 <code>wrong answer</code> 。</p></li></ul><h4 id="代码-3">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">510</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a坐标，b每公里路程所花时间</span><span class="token comment">//f[i][j]是从起点走到第i个路牌时，恰好选了j个路牌（可以包含第i个路牌）的方式所花时间的集合，属性取所有时间中的最小值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token comment">//n个路牌，m段路程，删除k个</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token comment">//</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//走到第一个路牌并且选了一个路牌所花费时间为0</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> u <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>u<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token comment">//我们将终点处视为一个路牌</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> f<span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】整数划分</title>
      <link href="/posts/8259a278.html"/>
      <url>/posts/8259a278.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-整数划分">题目: <a href="https://www.acwing.com/problem/content/description/902/">整数划分</a></h4><h4 id="题意">题意:</h4><p>一个正整数 n 可以表示成若干个正整数之和，形如：n=n1+n2+…+nk，其中 n1≥n2≥…≥nk,k≥1。</p><p>我们将这样的一种表示称为正整数 n 的一种划分。</p><p>现在给定一个正整数 n，请你求出 n 共有多少种不同的划分方法。</p><h4 id="输入格式">输入格式</h4><p>共一行，包含一个整数 n。</p><h4 id="输出格式">输出格式</h4><p>共一行，包含一个整数，表示总划分数量。</p><p>由于答案可能很大，输出结果请对 10^9+7 取模。</p><h4 id="数据范围">数据范围</h4><p><code>1 ≤ n ≤ 1000</code></p><h4 id="输入样例">输入样例:</h4><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解法一：视为完全背包问题">解法一：视为完全背包问题</h4><p>将给定的数视为背包的体积，那么题目就转变为了给我们n个体积和价值均为从1到n的物品，要求我们可以刚好将背包填满，问有多少种填法。<br>原本的完全背包是将集合中的所有方案比较出一个最大值，状态转移方程：<code>f[j]=max(f[j],f[j-v[i]]+w[i]);</code><br>现在则是将完全背包集合中所有方案加在一起，状态转移方程：<code>f[j]=f[j]+f[j-i];</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        <span class="token comment">//当n==0时，只有一种选法，就是什么也不选</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//完全背包容易被忽略的一点是j的起始值要注意，通常是当前物品的体积</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="解法二：其它解法">解法二：其它解法</h4><p>将f[i][j]的集合视为两个子集，分别是方案中含有数字的最小值是1和方案中所含数字最小值大于1两个。<br>状态转移方程就是两者之和：<code>f[i][j]=f[i-1][j-1]+f[i-j][j];</code><br>关键点就在于不重不漏的分割集合</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token comment">//f[i][j]表示所有总和是i，且刚好有j个数的方案  </span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>        f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;=</span>j<span class="token punctuation">)</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        res<span class="token operator">=</span><span class="token punctuation">(</span>res<span class="token operator">+</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 计数类dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】滑雪</title>
      <link href="/posts/324b1e5c.html"/>
      <url>/posts/324b1e5c.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-滑雪">题目: <a href="https://www.acwing.com/problem/content/903/">滑雪</a></h4><h4 id="题意">题意:</h4><p>给定一个 R 行 C 列的矩阵，表示一个矩形网格滑雪场。</p><p>矩阵中第 i 行第 j 列的点表示滑雪场的第 i 行第 j 列区域的高度。</p><p>一个人从滑雪场中的某个区域内出发，每次可以向上下左右任意一个方向滑动一个单位距离。</p><p>当然，一个人能够滑动到某相邻区域的前提是该区域的高度低于自己目前所在区域的高度。</p><p>下面给出一个矩阵作为例子：</p><pre class="line-numbers language-none"><code class="language-none"> 1  2  3  4 516 17 18 19 615 24 25 20 714 23 22 21 813 12 11 10 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在给定矩阵中，一条可行的滑行轨迹为 24−17−2−1。</p><p>在给定矩阵中，最长的滑行轨迹为 25−24−23−…−3−2−1，沿途共经过 25 个区域。</p><p>现在给定你一个二维矩阵表示滑雪场各区域的高度，请你找出在该滑雪场中能够完成的最长滑雪轨迹，并输出其长度(可经过最大区域数)。</p><h4 id="输入格式">输入格式</h4><p>第一行包含两个整数 R 和 C。</p><p>接下来 R 行，每行包含 C 个整数，表示完整的二维矩阵。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示可完成的最长滑雪长度。</p><h4 id="数据范围">数据范围</h4><p>1 ≤ R,C ≤ 300,<br>0 ≤ 矩阵中整数 ≤ 10000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 51 2 3 4 516 17 18 19 615 24 25 20 714 23 22 21 813 12 11 10 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">25<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>为什么要用记忆化搜索？我相信绝大部分人在接触BFS时已经做过这道题，递归广搜然后记录最长路径就可以了，但是现在题目的数据范围扩大了，暴力广搜就不再适用。</li><li>什么是记忆化搜索？我们会发现在广搜整个图时，有很多点其实已经搜过了，如果反复对其搜索会造成很大的时间浪费，所以我们可以用一个记忆化数组记录每个点是否已经搜索过，然后下次又走到这里时可以直接用。</li><li>再次感叹y总的代码习惯真的很优雅，不仅体现在格式上，更重要的是思路上。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">310</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记忆化数组</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dy<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//当前格子最小是1</span>    f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> xx<span class="token operator">=</span>x<span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>yy<span class="token operator">=</span>y<span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xx<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>xx<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>yy<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>yy<span class="token operator">&lt;=</span>m<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>xx<span class="token punctuation">]</span><span class="token punctuation">[</span>yy<span class="token punctuation">]</span><span class="token operator">&lt;</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//为什么不能写成f[x][y]=dp(xx,yy)+1?因为f[x][y]可以由四个方向走过来，要保留最大的那个</span>            f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span>yy<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//记得返回当前格子的高度</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题模板</title>
      <link href="/posts/7746aefe.html"/>
      <url>/posts/7746aefe.html</url>
      
        <content type="html"><![CDATA[<h3 id="什么是背包问题？">什么是背包问题？</h3><ul><li>背包问题简单讲就是我们有一个确定容量的背包，有n件物品，每件物品的有确定的价值和体积，问我们在不超出背包容量的前提下，可以带走物品的最大价值是多少。虽然问题很简单，但是根据物品的选择要求不同，可以细分为：01背包问题、完全背包问题、多重背包问题、分组背包问题和混合背包问题。我们一个一个来看。</li></ul><h3 id="01背包问题">01背包问题</h3><h4 id="什么是完全背包？">什么是完全背包？</h4><ul><li>01背包是背包问题中最基础的问题。<code>01</code>，顾名思义就是每个物品要么不选，要么只能选1次。</li></ul><h4 id="一个陷阱！">一个陷阱！</h4><ul><li>有同学可能已经想到了贪心，求出所有物品的性价比，然后从高到低排序，依次取性价比最高的物品放入背包直到不能再放入物品。看样子没有任何问题，但是这位同学已经陷入了误区，让我们看这个例子：背包容量80，有3种物品，价值和体积分别是：<code>30 50</code>  <code>50 90</code>  <code>60 120</code> ，如果贪心来做显然只能取体积为60的物品，价值为120，而实际上我们可以取体积为30和50的物品，价值有140！问题出在哪里？贪心不能保证将背包填满，导致背包中的空闲部分拉低了整个背包中物品的平均价值。</li></ul><h4 id="如何求解？">如何求解？</h4><ul><li>我们用 <code>f[i][j]</code> 表示前 <code>i</code> 个物品在不超过体积 <code>j</code> 的前提下的所有方案的集合，然后取集合的最大值。</li><li>因为每个物品要么不选，要么只能选1次，所以我们可以根据是否选第 <code>i</code> 件物品来将整个集合分为两个子集，不选第 <code>i</code> 件物品的最大价值：<code>f[i-1][j]</code> ，选第 <code>i</code> 件物品的最大价值：<code>f[i-1][j-vi]+wi</code> 。<code>v[i]</code> 和 <code>w[i]</code> 分别是第 <code>i</code> 件物品的价值和体积。</li><li>那么就得到状态转移方程：<code>f[i][j]=max(f[i-1][j],f[i-1][j-v[i]]+w[i]);</code></li></ul><h4 id="如何优化？">如何优化？</h4><ul><li>考虑进行优化，我们可以发现状态转移方程中只用到了上一层的计算结果，那么我们开二维数组其实是浪费了很多空间的。如何优化？考虑用滚动数组，既然<strong>只用到了上一层的结果</strong>，那么我们直接将所有的数据都存在一个一维数组中。</li><li>注意方程的左值是 <code>f[j]</code> ，右值中含有 <code>f[j-vi]</code> 如果我们将仍旧将容量从小到大更新 <code>f[j]</code> ，那么将会有在某次更新 <code>f[j]</code> 用到的 <code>f[j-vi]</code> 是之前被更新过的 <code>f[j]</code> ，那么我们就无法保证数据的正确性。如何解决？我们的目的是保证每次用到的 <code>f[j-vi]</code> 都是上一层的，那么每次更新数据时我们可以从后向前更新，因为 <code>f[j-vi]</code> 是一定<strong>不大于</strong> <code>f[j]</code> 的，那么就能保证状态转移方程中的 <code>f[j-vi]</code> 的正确性。</li></ul><h4 id="未优化代码"><strong>未优化代码</strong></h4><p>状态转移方程：<code>f[i][j]=max(f[i-1][j],f[i-1][j-v[i]]+w[i]);</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继承上一次循环的结果 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="状态压缩优化代码"><strong>状态压缩优化代码</strong></h4><p>状态转移方程：<code>f[j]=max(f[j],f[j-v[i]]+w[i]);</code></p><p>为了保证状态转移方程用到的 <code>f[j-v[i]]</code> 是上一次的结果，j（容量）要从大到小循环</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完全背包问题">完全背包问题</h3><p><strong>有趣的小技巧</strong> ：将优化后01背包代码中的 <code>for(int j=m;j&gt;=v[i];--j)</code> 改成 <code>for(int j=v[i];j&lt;=m;++j)</code> 可以直接拿来当完全背包用。也许有同学觉得，诶这怎么啦，不都是背包问题嘛，可以求解很正常吧。但是看完什么是完全背包问题也许就会觉得，<s>哇这好离谱啊</s>。而看完为什么后也许又会觉得，<s>确实是这么回事，就该这样</s>。</p><h4 id="什么是完全背包？-2">什么是完全背包？</h4><ul><li>完全背包问题就是所有物品不再有数量限制，每种物品均可以在容量范围内无限取。</li></ul><h4 id="如何求解？-2">如何求解？</h4><ul><li><p>我们可以发现完全背包实际上就是01背包的基础上取消了物品的数量限制，那么我们就可以用01背包的思路来求解完全背包问题。</p></li><li><p>仍然用 <code>f[i][j]</code> 表示前i个物品在不超过j容量的前提下，所有取法的集合。</p></li><li><p>完全背包问题同样根据第i件物品划分子集。但由于每件物品可以取无限件，那么在划分子集时就不能像01背包那样简单分为两个子集，完全背包问题根据第i件物品取的件数不同，划分为k个集合，k∈[0, V/v[i]]，也即第i件物品可以不取（<code> f[i-1][j]</code>），也可以一直取到仅用第i件物品填满背包（<code>f[i-1][j-v[i]*k]+w[i]*k; k=V/v[i]</code>）。</p></li><li><p>那么我们就可以得到状态转移方程：</p><p><code>f[i][j]=max(f[i-1][j],f[i-1][j-v[i]]+w[i],f[i-1][j-v[i]*2]+w[i]*2,...,f[i-1][j-v[i]*k]+w[i]*k);</code></p></li><li><p>看上去似乎有些长？别急，我们根据上式继续写出 <code>f[i][j-v[i]]</code> 的状态转移方程：</p><p><code>f[i][j-v[i]]=max(     f[i-1][j-v[i]],f[i-1][j-v[i]*2]+w[i],...,f[i-1][j-v[i]*(k-1)]+w[i]*(k-1));</code></p></li><li><p>对比两式是否发现了什么端倪？是的，下式与上式除去第一项外的部分<strong>几乎</strong>相同，那么我们就可以将 <code> f[i][j]</code> 的状态转移方程简化为 <code>f[i][j]=max(f[i-1][j],f[i][j-v[i]]+w[i]);</code></p></li></ul><h4 id="如何优化？-2">如何优化？</h4><ul><li>因为完全背包同样只用到两层，所以可以用滚动数组优化。</li><li>直接去掉前i个物品这一维，原式变为：<code>f[j]=max(f[j],f[j-v[i]]+w[i]);</code> 似乎和01背包相同，但是但是要明确两者是由谁转移过来的，01背包是由上一层的结果转移过来，而完全背包是由当前这一层转移过来的（注意观察初始状态转移方程中前i个物品这一维），所以在循环空间时，01要由大到小保证当前层没有被计算过，而完全背包要由小到大保证当前层已经计算过。</li></ul><h4 id="未优化代码-2">未优化代码</h4><p><strong>未优化版本仅用来助于理解思路</strong>，因为涉及三种循环一般必超时，01背包优化属于为了美观而优化，而完全背包不得不优化。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">*</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>j<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="状态压缩优化代码-2">状态压缩优化代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结">总结</h4><ul><li>01背包问题：    <code>f[i][j]=max(f[i-1][j],f[i-1][j-v[i]]+w[i]);</code></li><li>优化版本：        <code>f[j]=max(f[j],f[j-v[i]]+w[i]);</code></li><li>完全背包问题：<code>f[i][j]=max(f[i-1][j],f[i][j-v[i]]+w[i]);</code></li><li>优化版本：        <code>f[j]=max(f[j],f[j-v[i]]+w[i]);</code></li></ul><h3 id="多重背包问题">多重背包问题</h3><p>二进制优化多重背包：<a href="https://xinyi127.cn/posts/3021fb5b.html">梧桐苑|多重背包 II</a></p><h3 id="分组背包问题">分组背包问题</h3>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】计数问题</title>
      <link href="/posts/1255788c.html"/>
      <url>/posts/1255788c.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-计数问题">题目: <a href="https://www.acwing.com/problem/content/340/">计数问题</a></h4><h4 id="题意">题意:</h4><p>给定两个整数 a 和 b，求 a 和 b 之间的所有数字中 0∼9 的出现次数。</p><p>例如，a=1024，b=1032，则 a 和 b 之间共有 9 个数如下：</p><pre class="line-numbers language-none"><code class="language-none">1024 1025 1026 1027 1028 1029 1030 1031 1032<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>0</code> 出现 10 次，<code>1</code> 出现 10 次，<code>2</code> 出现 7 次，<code>3</code> 出现 3 次等等…</p><h4 id="输入格式">输入格式</h4><p>输入包含多组测试数据。</p><p>每组测试数据占一行，包含两个整数 a 和 b。</p><p>当读入一行为 <code>0 0</code> 时，表示输入终止，且该行不作处理。</p><h4 id="输出格式">输出格式</h4><p>每组数据输出一个结果，每个结果占一行。</p><p>每个结果包含十个用空格隔开的数字，第一个数字表示 <code>0</code> 出现的次数，第二个数字表示 <code>1</code> 出现的次数，以此类推。</p><h4 id="数据范围">数据范围</h4><p>0&lt;a,b&lt;100000000</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 1044 497346 5421199 17481496 14031004 5031714 1901317 8541976 4941001 19600 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 2 1 1 1 1 1 1 1 185 185 185 185 190 96 96 96 95 9340 40 40 93 136 82 40 40 40 40115 666 215 215 214 205 205 154 105 10616 113 19 20 114 20 20 19 19 16107 105 100 101 101 197 200 200 200 200413 1133 503 503 503 502 502 417 402 412196 512 186 104 87 93 97 97 142 196398 1375 398 398 405 499 499 495 488 471294 1256 296 296 296 296 287 286 286 247<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>首先我们明确题意，让我们找到0<sub>9这十个数字在确定区间中出现的次数。暴力跑很简单，就是遍历区间，然后询问每个数字，看出现了哪些0</sub>9的数，最后加在一起就好了。但是考虑到上亿级别的数据范围，暴力必然超时。</li><li>怎么优化？考虑数位dp。首先计算区间[A, B]，可以转化为计算[1, B] - [1, A-1]，可能有人会问，本来计算[A, B]都已经超时，现在计算两个区间不是更完蛋吗，这是因为当我们转化为求[1, B]之后，问题就开始变得简单了。</li><li>假设我们要计算0~9在区间[1, B]中的所有数字中出现的次数，因为每一位都可以取0~9，所以我们逐位来看。</li><li>设B这个数字是abcdefg，我们正在求d这一位的数字，考虑这样一种情况，前三位的值小于abc，那么显然d这一位可以取0~9任意值，而efg这三位取值范围是[000, 999]，显然此时d这一位无论取什么（不能取零，原因下面会说），都有[000，abc - 1] * [000, 999]种可能。</li><li>为什么不能取0？我们要明确一点，abcdefg是给定的区间的最大范围，而我们在自己构造一个小于这个值的数字，d是第四位，这里的四是从后向前数的，既然是我们自己构造的属于这个区间的数字，那么它就必须有意义，<strong>如果d取零，那么abc这三位就不能取000，必须从001开始，否则d这一位的0就失去意义</strong>了。</li><li>再考虑abc三位的取值就等于abc，那么显然d这一位的取值有三种情况，大于d，等于d或者小于d。</li><li>大于d显然超出了区间范围，不符合要求。</li><li>等于d时，后三位的取值范围是[000, efg]，从零开始，值是efg+1。</li><li>小于d时，后三位的取值范围是[000, 999]。</li><li>综上，将所有的取值可能加在一起就可以了。</li><li>另外要注意的一点是，<strong>当求最高位a取值范围时，a不能为零</strong>，原因同上。</li><li>此时我们就能理解，为什么求解两边[1, B]要比求解[A, B]更快，数位dp将整个区间的所有数字视为了一个数字。讨论一个数字各个位的所有可能。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//还原num数组中，从l到r的数字</span><span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>num<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//从高位到低位</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span>r<span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token comment">//</span>    <span class="token punctuation">{</span>        sum<span class="token operator">=</span>sum<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//计算10^i</span><span class="token keyword">int</span> <span class="token function">power10</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        sum<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//计算1到n中（n是个很大的数），x（x取值0~9）在所有数字中出现的次数之和。</span><span class="token keyword">int</span> <span class="token function">get_num</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//将n的每一位取出来存到数组中</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>num<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    n<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//i=n-1-!x等价于当i==n-1时判断x是否等于0，如果是就直接--i</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token operator">!</span>x<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token comment">//</span>    <span class="token punctuation">{</span>        <span class="token comment">//假设给定的数是abcdefg</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//如果当前位之前的数小于给定值，那么取值范围是 (000~abc) * (000~999)</span>            res<span class="token operator">+=</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">power10</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//当我们在判断第i位时，如果第i位为零，那么是不能存在前导零的，否则第i位就没有意义了</span>            <span class="token comment">//取值范围变为 (001~abc) * (000~999)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>res<span class="token operator">-=</span><span class="token function">power10</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//从000到efg，所以要＋1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span>res<span class="token operator">+=</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token comment">//如果当前位取值小于这一位的给定值，那么efg的取值范围是000~999</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>x<span class="token punctuation">)</span> res<span class="token operator">+=</span><span class="token function">power10</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">,</span>a<span class="token operator">||</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//依次计算0~9每个数字出现次数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//计算a到b，就是计算1到b减去1到a</span>            cout<span class="token operator">&lt;&lt;</span><span class="token function">get_num</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">get_num</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token punctuation">}</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 数位统计dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】SDTBU-ACM集训队暑期集训---个人赛 2</title>
      <link href="/posts/5cfbc568.html"/>
      <url>/posts/5cfbc568.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一题">第一题</h3><h4 id="题目-B-At-Most-3-Judge-ver-atcoder-jp">题目: <a href="https://atcoder.jp/contests/abc251/tasks/abc251_b?lang=en">B - At Most 3 (Judge ver.) (atcoder.jp)</a></h4><h4 id="题意">题意:</h4><p>在数列中找最多3个数，使这几个数的和不超过给定值m，问有多少种选法。</p><h4 id="输入格式">输入格式</h4><p>第一行是两个整数n和m。</p><p>第二行有n个整数。</p><p>输出一个整数，代表经过多少秒可以清理垃圾。</p><h4 id="数据范围">数据范围</h4><p>样例数 1 &lt;= t &lt;=1e4 ，其余均小于100。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数。</p><h4 id="数据范围-2">数据范围</h4><p>1≤ N ≤300</p><p>1≤ W ≤106</p><p>1≤ Ai ≤106</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">7 251202 20 5 1 4 2 100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">48<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>暴力模拟，但是不能用map，否则会超时。</li><li>可以用unordered_map或者直接用数组存。</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e7</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目-C-Poem-Online-Judge-atcoder-jp">题目: <a href="https://atcoder.jp/contests/abc251/tasks/abc251_c?lang=en">C - Poem Online Judge (atcoder.jp)</a></h4><h4 id="题意-2">题意:</h4><p>给n个字符串和各自的价值，每个字符串会出现多次，但是只有第一次出现的有意义，可能有多个字符串有相同价值，那么只有第一次出现的字符串有意义。问有意义的字符串最大价值是多少。</p><h4 id="输入格式-2">输入格式</h4><p>第一行是一个整数n。</p><p>n行，每行是一个字符串和一个整数。</p><h4 id="输出格式-2">输出格式</h4><p>一个整数，表示第几个字符串。</p><h4 id="数据范围-3">数据范围</h4><p>1≤ N ≤105</p><p>字符串的长度在1和10 之间</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">10bb 3ba 1aa 4bb 1ba 5aa 9aa 2ab 6bb 5ab 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-2">思路:</h4><ul><li>水题，直接用map记录一下就好了。</li></ul><h4 id="代码-2">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">310</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> s <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>res <span class="token operator">=</span> m<span class="token punctuation">;</span>ans <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第四题">第四题</h3><h4 id="题目-E-Takahashi-and-Animals-atcoder-jp">题目: <a href="https://atcoder.jp/contests/abc251/tasks/abc251_e?lang=en">E - Takahashi and Animals (atcoder.jp)</a></h4><h4 id="题意-3">题意:</h4><p>有n个动物，喂养每个动物都有一定的代价，喂养第Ai只动物可以顺便将Ai+1只动物喂饱，如果想要将所有动物喂饱，那么最小代价是多少</p><h4 id="输出格式-3">输出格式</h4><p>第一行只有一个整数n。</p><p>第二行有n个整数，每个表示喂养第i个动物的代价。</p><h4 id="输出格式-4">输出格式</h4><p>一个整数。</p><h4 id="数据范围-4">数据范围</h4><p>2≤ N ≤3×10^5</p><p>1≤ Ai ≤10^9</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">2029 27 79 27 30 4 93 89 44 88 70 75 96 3 78 39 97 12 53 62<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">426<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路-3">思路:</h4><ul><li><s>一眼动态规划，但是做不出来。</s></li><li>很容易想到，用数组f[i]表示前i个动物都已经喂过的所有方式的集合。然后取集合的最小值即可。</li><li>这里有个问题，怎么转移？既然我们已经用f[i]表示喂前i个动物的最小代价，那么f[i+1]直接f[i] + a[i+1]不就好了？这是个陷阱，我们不能确定f[i]是否直接喂过Ai，如果Ai是被Ai-1被动喂养的，那么就必须喂养Ai+1；而如果是直接喂养的Ai，就不需要再喂养Ai+1。那么我们可以用f[i] [1]表示直接喂养了Ai，f[i] [0]被动喂养了Ai，那么转移方程就很简单了。</li><li>还有一个陷阱，如果我们没有直接喂养A1，那么是必须直接喂养An的，而如果直接喂养了A1，那么An喂养与否都可以，最后取值时怎么判断？很简单，跑两遍循环就好了，第一遍不选A1，第二遍选A1。</li><li>做题时还是不够稳啊，都写出状态转移方程了怎么就是做不对呢！</li></ul><h4 id="代码-3">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N <span class="token operator">=</span> <span class="token number">300010</span><span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ll n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>ll ans <span class="token operator">=</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//此时必须有n</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>ll i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此时n可有可无</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】最短Hamilton路径</title>
      <link href="/posts/fa798aa0.html"/>
      <url>/posts/fa798aa0.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-最短Hamilton路径">题目: <a href="https://www.acwing.com/problem/content/93/">最短Hamilton路径</a></h4><h4 id="题意">题意:</h4><p>给定一张 n 个点的带权无向图，点从 0∼n−1 标号，求起点 0 到终点 n−1 的最短 Hamilton 路径。</p><p>Hamilton 路径的定义是从 0 到 n−1不重不漏地经过每个点恰好一次。</p><h4 id="输入格式">输入格式</h4><p>第一行输入整数 n。</p><p>接下来 n 行每行 n 个整数，其中第 i 行第 j 个整数表示点 i到 j 的距离（记为 a[i,j]）。</p><p>对于任意的 x,y,z，数据保证 a[x,x]=0，a[x,y]=a[y,x] 并且 a[x,y]+a[y,z]≥a[x,z]。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示最短 Hamilton 路径的长度。</p><h4 id="数据范围">数据范围</h4><p>1≤n≤20<br>0≤a[i,j]≤10^7</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">50 2 4 5 12 0 6 5 34 6 0 8 35 5 8 0 51 3 3 5 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">18<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>为什么要用状态压缩dp？<br>因为暴力来求的话要从第二个点（起点是0）开始遍历所有点，第二个点有n-2（除去起点和终点）种可能，第三个点有n-3种可能，最后还要根据路径求长度，那么时间复杂度将是(n-1)!，而n最大是20，所以会超时。而状态压缩dp用二进制表示路径，最大不会超过2^20次方，时间复杂度远远小于 (19)！</li><li>为什么可以用状态压缩dp？<br>状态压缩dp归根结底还是dp，我们正常去思考这个问题时可能会想到因为我们要走遍所有点，那么因为根据的变化将会有(18)! 种可能。但是状态压缩dp将这(18)!种可能视为一种可能，而这一种可能是由2^20个子状态（或者我们应该称之为集合）逐步优化得到的。这就是压缩的本质！它将问题从如何在所有排列中找到最优解转化为了如何从有限个子状态中直接优化到最优解，所以它的速度可以比暴力做法快很多很多。<br>状态压缩的思考层次简直高了一个维度。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>N<span class="token punctuation">;</span><span class="token keyword">int</span> w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i][j]表示从0走到j这个点，路径是i的所有方案 比如：(1100100)B表示0, 1, 3, 4号点没有走</span><span class="token comment">//我们只关心起点和终点是否是0和j，怎么走的不关心，只要0到n-1个点按顺序摆成二进制大小是i就可以</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            cin<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//1代表从0号点走到0号点，只有0这个点是1</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//第一重循环遍历从0出发到每个点的所有路径：1 ~ (1&lt;&lt;n)-1 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//第二重循环是终点</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//用i的二进制表示路径，1&lt;&lt;j的含义是在i的二进制上表示出这个点，代表这个点走过了</span>            <span class="token comment">//两者与操作表示判断i是否走过j，因为我们f[i] [j]的含义是从0走到j并且路径大小是i</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment">//k代表从0走到j的路径上的倒数第二个点（倒数第一个是j）</span>                <span class="token comment">//我们要将f[i] [j]从f[i-(1&lt;&lt;j)] [k]+w[k][j]转移过来</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token comment">//i-(1&lt;&lt;j)就是在i这条路径上删除j这个点，要时刻注意我们是在用二进制表示路径</span>                    <span class="token comment">//1&lt;&lt;k同上，表示k这个点在二进制路径中的位置，两者与操作表示从0到j的路径上删除j后仍然包含k这个点</span>                    <span class="token comment">//为什么要删除j这个点？因为我们要从倒数第二步转移到f[i] [j]，此时还没有走到j这个点</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//(1&lt;&lt;n)-1表示所有点都为1，也即走过所有点</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 状态压缩dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】没有上司的舞会</title>
      <link href="/posts/d4b3d34d.html"/>
      <url>/posts/d4b3d34d.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-没有上司的舞会">题目: <a href="https://www.acwing.com/problem/content/287/">没有上司的舞会</a></h4><h4 id="题意">题意:</h4><p>Ural 大学有 N 名职员，编号为 1∼N。</p><p>他们的关系就像一棵以校长为根的树，父节点就是子节点的直接上司。</p><p>每个职员有一个快乐指数，用整数 Hi 给出，其中 1≤i≤N。</p><p>现在要召开一场周年庆宴会，不过，没有职员愿意和直接上司一起参会。</p><p>在满足这个条件的前提下，主办方希望邀请一部分职员参会，使得所有参会职员的快乐指数总和最大，求这个最大值。</p><h4 id="输入格式">输入格式</h4><p>第一行一个整数 N。</p><p>接下来 N 行，第 i 行表示 ii 号职员的快乐指数 Hi。</p><p>接下来N−1 行，每行输入一对整数 L,K，表示 K 是 L 的直接上司。</p><h4 id="输出格式">输出格式</h4><p>输出最大的快乐指数。</p><h4 id="数据范围">数据范围</h4><p>1≤N≤6000,<br>−128≤Hi≤127</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">711111111 32 36 47 44 53 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>首先什么是树形dp？其实主要就是指存储方式是以树的形式存储，在优化时是在树的基础上进行优化的。</li><li>怎么去找到最优解？对于一个结点来说，以它为根节点的树的最大快乐值就是它的所有子树的最大值之和。分为两种情况，要么不含这个根节点，要么含有这个根节点。如果含有这个根节点，显然它的子树在计算最大值时，都不能含有与这个根节点直接相连的结点。如果不含这个根节点，那么它的子树既可以含有与这个根节点直接相连的，也可以不含有与这个根节点直接相连的结点，最后取最大值即可（在计算子树的最大值时，计算方式与根节点的计算方式相同）。</li><li>对于树的dfs，每个结点可以保证只遍历一次。</li></ul><h4 id="代码">代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">6010</span><span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>ne<span class="token punctuation">[</span>N<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>idx<span class="token punctuation">;</span><span class="token comment">//这里其实没有必要乘2，不过一般来讲是个好习惯</span><span class="token keyword">int</span> hp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i] [0]表示不选i结点的情况下以i为根节点的树的最大快乐值</span><span class="token comment">//f[i] [1]是选择i结点的前提下以i为根节点的数的最大快乐值</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> has_f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录是否有父节点，以此确定整棵树的根节点</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//本质上是插入一个头结点，h数组实际上是由许多链表的头结点组成</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">,</span>ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>h<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//树形dp的搜索通常要比图简单，因为不需要去考虑是否会反复搜索的问题，树的深搜遍历每个结点只会遍历一遍</span>    f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>hp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> j<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>hp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        has_f<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> root<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>has_f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span>root<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 树形dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022.7.5杂感</title>
      <link href="/posts/25e63058.html"/>
      <url>/posts/25e63058.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6cafaaff4dba868b460a249d9324bc22c012134e346c0e3194a11b528746b5f7">ac439700f54d20aeea6b5bc240dbdd3a719300ee5bb49709a8d79712753e75e81045cb1ca9380c3387f9361be65cebba02b477e0a91bbbf019dc0b0e9dca279887de4861cb4df7db03932ee1c94b1dd5469242da73179ca8fd7a3c18c233673e72350fc293c387be823a7fcf2385308e7d154aa4362ba8065e30b354d4f3de9b57d0454ec9db8fd2a47dc08cdf441afc1079b99801d9aae62a912aff1b0877fbfd59f24bc04e8f285abb0d49421af330b0ff0d2189b7378d7123a52ce5140b086ef895bc9946708b8ab8343897e49bef86499fa1afe71b1b71f30784ab47ef34c006f92f3a80f333feedf12b51de923ff291228d5f09a39358bb5b7d5f902737c228286098791dafb47856dd71cf1eda8a2f4719caf2912c6be574cdda098ca22de0068b8bcb5dcec21ac37bc599b1d4e90be9d1c108d6a6bb33234f9f3d6b61dcdd9a0c93cd1548e4466ecde21de87b94eff5701d7d4ea0601119a01b91ef264346b0854d085a80c881f2928927e086f8de37a7a8047aee9d1f710e9cc1c5d3766b02f6043ea6156b638fc693b077fb23aa8ee73c2abfd5b3ffc2a84d34d3689c965bba3ae6f56b3dddd51b126859da46377587262ab518147892e1d430f41cd8fa4d114d811547055bc703dac6653de494893595303834df06b79a873833ff5efc86085c6835f678e4d78ff2314127da629240de8251c48bbd71a972f82f1ed0bfdbdb1ee03e662207701fe734d0f92873724b572e5c19fa9706dcee5d43b1f7c1733a0568f83d13f0575f56527d3d2193d53429fdf1e6cdf8e88f2805ae9ffe9d7c09d6a76f811a8280dffa190821e838e18d3417a41bef2c9ba4ca79964950126af9be90f05f7b03b0a2d208af28cb0f26507f0cc3dbba02abceb110f74e642a79771054dafacf4c47250570296722c4c286aefd63e77676fa2d2bfa2313c82410d659840cf1a3a394097feba2d80d606ded8ebd1f787cb3dde1b0826ac78dcb400ae838c88d34c54e3972a65a705ab01aefd3a259eac2afbd8ad0f73ee76ba985788a702c7cbad4d033328237c2f50f4df911e39c202bbc33ea2753f733c2f6f791ecd15e4e57429ad56107def1959d143a516731fb2ad02140fa24e9efc42a2d69d24080aa8391877b9de25b565037897aa8459fc973430489e334216b4a3cc6787879de972e488842fa934d8917d292aa7e385fcf7fde600cf2071b58cc7858176a9dd89aea89ad56b69cd6b2c209e3090131b3fedd7ebbac441d025008a43ddc041c527dc13ab4d032046162cdd5036bff095d19466fdfcce5629b379a318ded8c5cfb4a0212d73f52a6e11a2993294779b44549fff863c2021f5559</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">前面高能，非工作人员请勿靠近！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDTBU-ACM集训队暑期集训---个人赛 1</title>
      <link href="/posts/b4df843.html"/>
      <url>/posts/b4df843.html</url>
      
        <content type="html"><![CDATA[<h3 id="第一题">第一题</h3><h4 id="题目-Problem-1623A-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1623/A">Problem - 1623A - Codeforces</a></h4><h4 id="题意">题意:</h4><p>数学题，给定一个n行m列的棋盘，左上角方格坐标是（1,1），然后给定一个机器人的坐标和垃圾的坐标，机器人可以清理当前格子所在的行和列，同时每秒钟向右下角移动（1,1）个方格，如果碰到了墙壁则向相反的方向移动，问多少秒后可以将垃圾清理掉。</p><h4 id="输入格式">输入格式</h4><p>输入包含多组测试用例。</p><p>每组测试用例占一行，包含六个整数，分别是棋盘的行和列数，然后分别是机器人的坐标和垃圾的坐标。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，代表经过多少秒可以清理垃圾。</p><h4 id="数据范围">数据范围</h4><p>1≤ N ≤300</p><p>1≤ m ≤106</p><p>1≤ Ai ≤106</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">510 10 6 1 2 810 10 9 9 1 19 8 5 6 2 16 9 2 2 5 82 2 1 1 2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">710930<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>水题，模拟就完了。</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> rb<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> rd<span class="token punctuation">,</span> cd<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> rb <span class="token operator">&gt;&gt;</span> cb <span class="token operator">&gt;&gt;</span> rd <span class="token operator">&gt;&gt;</span> cd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rb <span class="token operator">&lt;=</span> rd <span class="token operator">&amp;&amp;</span> cb <span class="token operator">&lt;=</span> cd<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>rd <span class="token operator">-</span> rb<span class="token punctuation">,</span> cd <span class="token operator">-</span> cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rb <span class="token operator">&gt;</span> rd<span class="token operator">&amp;&amp;</span> cb<span class="token operator">&lt;=</span>cd<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>n <span class="token operator">-</span> rb <span class="token operator">+</span> n <span class="token operator">-</span> rd<span class="token punctuation">,</span>cd <span class="token operator">-</span> cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cb <span class="token operator">&gt;</span> cd<span class="token operator">&amp;&amp;</span>rb<span class="token operator">&lt;=</span>rd<span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>m <span class="token operator">-</span> cb <span class="token operator">+</span> m <span class="token operator">-</span> cd<span class="token punctuation">,</span>rd <span class="token operator">-</span> rb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>m <span class="token operator">-</span> cb <span class="token operator">+</span> m <span class="token operator">-</span> cd<span class="token punctuation">,</span> n <span class="token operator">-</span> rb <span class="token operator">+</span> n <span class="token operator">-</span> rd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第二题">第二题</h3><h4 id="题目-Problem-1623B-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1623/B">Problem - 1623B - Codeforces</a></h4><h4 id="题意-2">题意:</h4><p>思维题，Alice有一个集合，开始时集合中只有一个区间[1, n]。Alice每次从集合中拿出一个区间[l, r]，Bob可以在当前区间中挑一个数d，然后Alice将原区间从集合中删除，将符合区间规则的[l, d-1]，[d+1, r]加入集合中，当Bob挑过所有数时，游戏结束。</p><h4 id="输入格式-2">输入格式</h4><p>输入包含多组测试用例。</p><p>每组测试用例第一行给定一个整数n，然后有n行。每行代表Alice的一个区间。</p><h4 id="输出格式-2">输出格式</h4><p>对于Alice的每个区间，给出Bob所挑的数。</p><p>可以用任意的排列方式输出结果，因为结果是唯一的。同时两个样例之间不需要有换行，给定的输出样例中的换行是为了方便观察样例。</p><h4 id="数据范围-2">数据范围</h4><p>均小于1000</p><h4 id="输入样例：-2">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">411 131 32 32 261 13 54 43 64 51 651 51 24 52 24 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-2">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 1 11 3 12 2 22 3 31 1 13 5 34 4 43 6 64 5 51 6 21 5 31 2 14 5 52 2 24 4 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路-2">思路:</h4><ul><li>水题！（其实是懒不想写=^=，反正这题也挺简单的，有空再写吧~）</li></ul><h4 id="代码-2">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//起点，终点，长度，匹配点</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>a<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&gt;</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>second<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second <span class="token operator">-</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first<span class="token punctuation">,</span> y <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> x<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second <span class="token operator">=</span> j<span class="token punctuation">;</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三题">第三题</h3><h4 id="题目-Problem-1623C-Codeforces">题目: <a href="https://codeforces.com/problemset/problem/1623/C">Problem - 1623C - Codeforces</a></h4><h4 id="题意-3">题意:</h4><p>有n堆石头，从第三堆石头开始可以往其自身前两堆分石头，同时第二堆分得的石头必须比第一堆少一半。要求我们从头开始分石头，将所有堆中石头数的最小值最大化。</p><h4 id="输入格式-3">输入格式</h4><p>输入包含多组测试用例。</p><p>每组测试用例第一行是一个整数代表有多少堆石头。第二行是n个整数代表每堆石头初始的石头数量。</p><h4 id="输出格式-3">输出格式</h4><p>输出一个整数，表示最大化后的最小值。</p><h4 id="数据范围-3">数据范围</h4><p>样例数和石头堆数 1 &lt;= t &lt;= n&lt;= 2e5</p><p>每堆的石头数量 1 &lt;= hi &lt;=1e9</p><h4 id="输入样例：-3">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">441 2 10 1004100 100 100 155 1 1 1 861 2 3 4 5 6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：-3">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">7113<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路-3">思路:</h4><ul><li>让我们通过一次分石头将最小值最大化，那么很显然可以二分寻找目标值。</li><li>二分判断的条件？既然目标值是最小值，那么它一定满足小于等于所有堆的数量。</li><li>如何保证二分值是否合法？我们要保证所有的堆一定是大于等于二分值的，那么就必须保证在判断时不能被其它因素干扰，从第三堆开始的石头可以分给前面的石头，所以我们可以从后向前遍历保证在判断每一堆石头时都不会被其它堆影响，然后记录原来堆的值保证不会与从头开始遍历冲突。</li><li>跟贪心沾边的题目多少都有点反人类…</li></ul><h4 id="代码-3">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">200010</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cherk</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//为什么要从后向前遍历？因为我们是在二分区间寻找答案，目标值首先要满足是所有堆中的最小值</span><span class="token comment">//而一个堆的石头数量是可以被后面的堆影响的，我们从后向前遍历可以保证当前堆在检查与二分值的关系时不会被后面的堆影响。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//因为我们希望将最小值最大化，那么首先要满足就是这个值必须是所有堆的最小值</span><span class="token comment">//所以如果二分值大于当前值说明目标值在左边（也即小的那边），返回0</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//虽然我们是从后向前遍历，但是有些正向搬运带来的隐性规则要遵守，比如要保证所搬运的石头不能超过该堆的初始值</span><span class="token comment">//其次所能搬运的石头是富余的值，什么是富余的石头，就是在满足当前二分最小值的前提下所能分给前面的堆</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> d <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> d<span class="token punctuation">;</span>b<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> d <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//, b[i] = a[i];</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//如果条件满足就说明在右边，否则在左边</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">cherk</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>l <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> l <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> ACM集训队暑期集训 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】蒙德里安的梦想</title>
      <link href="/posts/1ce2175d.html"/>
      <url>/posts/1ce2175d.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-蒙德里安的梦想">题目: <a href="https://www.acwing.com/problem/content/description/293/">蒙德里安的梦想</a></h4><h4 id="题意">题意:</h4><p>求把 N×M 的棋盘分割成若干个 1×2 的长方形，有多少种方案。</p><p>例如当 N=2，M=4 时，共有 5 种方案。当 N=2，M=3 时，共有 3 种方案。</p><p>如下图所示：</p><p><img src="https://www.acwing.com/media/article/image/2019/01/26/19_4dd1644c20-2411_1.jpg" alt="方案示例"></p><h4 id="输入格式">输入格式</h4><p>输入包含多组测试用例。</p><p>每组测试用例占一行，包含两个整数 N 和 M。</p><p>当输入用例 N=0，M=0 时，表示输入终止，且该用例无需处理。</p><h4 id="输出格式">输出格式</h4><p>每个测试用例输出一个结果，每个结果占一行。</p><h4 id="数据范围">数据范围</h4><p>1≤N,M≤11</p><h4 id="输入样例：">输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 21 31 42 22 32 42 114 110 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">10123514451205<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="思路">思路:</h4><ul><li>我们会发现，对于任意一种情况，只要它的横向方块确定了，那么竖向的方块只有一种可能，所以我们只需要枚举横向方块的情况就可以。总方案数：等于只放横向方块的合法方案数。</li><li>怎么判断是否合法？其实就是看剩余的位置是否能用竖向方块填满，如果可以就说明是合法的。可以每一列来看，如果有连续的奇数个方格没有放，那么说明不合法。</li><li>另外在dp时需要保证上一列和下一列不能存在 “冲突” ，也即不能让某列的一个格子被两个方块都放过。</li><li>用M来表示每列最多有多少种情况，M是对应的二进制数。因为我们用二进制的形式表示某种情况，所以M的取值范围是[000…0, 111…1]。</li><li>这里的某个 “情况” 指的是从上一列凸出来的方块摆放 “情况” 。</li><li>因为我们要额外向后询问一列，所以N要设置为12。</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdio&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> M <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> N<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span>ll f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//对于f[i][(10010)B]表示第i列的第一行和第四行有方块凸出来，存的是这种情况下的方案数。</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//记录第i种情况是否符合条件: 也即不存在连续奇数个零</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">,</span> n <span class="token operator">||</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对于每一列进行预处理，遍历所有情况将含有奇数个连续零的可能剔除。</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录连续零的个数</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//注意是询问i的二进制数中有多少个0，所以应该是右移</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> j <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//如果最后没有遇到零那么不会在循环里判断，所以要特判</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//因为第1列不存在前面的列，所以不可能有方块凸出来，于是只有(000...0)B这一种情况</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//遍历所有列</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//st[j | k]表示的是两种情况合并后的情况</span><span class="token comment">//注意，比较运算符的优先级高于按位运算符</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j <span class="token operator">&amp;</span> k<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>j <span class="token operator">|</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//我们是从0开始枚举的，所以只需要枚举到m-1行合法的情况即可。那么对应的就是第m行没有任何方块凸出来。</span>cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 状态压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论期末预习大纲</title>
      <link href="/posts/ff08f0c4.html"/>
      <url>/posts/ff08f0c4.html</url>
      
        <content type="html"><![CDATA[<h3 id="概率论预习大纲">概率论预习大纲</h3><h4 id="前言：">前言：</h4><p>​本文是根据b站up汤姆说的速成视频资料整理而成，视频链接如下。</p><p>​<strong>视频连接：</strong> <a href="https://www.bilibili.com/video/BV1TJ411y7Zp?spm_id_from=333.851.header_right.fav_list.click&amp;vd_source=4c641295e18917e9d2cad4d846182614">可能是全网最好的《概率统计》期末速成，2小时不到冲刺60分，概率论与数理统计_哔哩哔哩_bilibili</a></p><h4 id="第一章">第一章</h4><p><img src="https://s2.loli.net/2022/06/26/EL16jUau8Pq5leo.png" alt="考点一 概率的性质.png"></p><p><img src="https://s2.loli.net/2022/06/26/M718aybUGHLpvnZ.png" alt="考点二 条件概率.png"></p><p><img src="https://s2.loli.net/2022/06/26/LxdZ32OQwh1kDRl.png" alt="考点三 古典概型.png"></p><p><img src="https://s2.loli.net/2022/06/26/myukihAQ6ctrYdj.png" alt="考点四 全概率与贝叶斯公式.png"></p><p><img src="https://s2.loli.net/2022/06/26/FcqVAj5N2Mn7DpI.png" alt="考点五 事件的独立性.png"></p><h4 id="第二章">第二章</h4><p><img src="https://s2.loli.net/2022/06/26/bK8Vs3ZuFjkHqg9.png" alt="考点六 离散型随机变量分布律与分布函数互求.png"></p><p><img src="https://s2.loli.net/2022/06/26/QSnO1zJ9Lh5FVyx.png" alt="考点七 二项分布和泊松分布.png"></p><p><img src="https://s2.loli.net/2022/06/26/BkpPAvwuyYm9rgM.png" alt="考点八 关于连续型随机.png"></p><p><img src="https://s2.loli.net/2022/06/26/mrNJTCqyxSbL43s.png" alt="考点九 均匀分布.png"></p><p><img src="https://s2.loli.net/2022/06/26/Toiw5fGJBsVHzF4.png" alt="考点十 正态分布1.png"></p><p><img src="https://s2.loli.net/2022/06/26/hNYSXkA3lJpREdU.png" alt="考点十 正态分布2.png"></p><p><img src="https://s2.loli.net/2022/06/26/8phcTIoER9gzPiB.png" alt="考点十 正态分布3.png"></p><p><img src="https://s2.loli.net/2022/06/26/36VJ7DgPCLriQYK.png" alt="考点十一 离散型随机变量函数的分布.png"></p><p><img src="https://s2.loli.net/2022/06/26/9K1rGhYeH6iCQSt.png" alt="考点十二 连续型随机变量函数的分布.png"></p><h4 id="第四章">第四章</h4><p><img src="https://s2.loli.net/2022/06/26/WOfwgZ1Yn6a4VuS.png" alt="考点十六 数学期望.png"></p><p><img src="https://s2.loli.net/2022/06/26/ctrJYI9RST58j4P.png" alt="考点十七 方差和标准差.png"></p><p><img src="https://s2.loli.net/2022/06/26/QhavLzXElD6uGZm.png" alt="考点十八 常用分布的期望和方差.png"></p><h4 id="第五章">第五章</h4><p><strong>视频链接：</strong><a href="https://www.bilibili.com/video/BV1Yi4y1Z7iq/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=4c641295e18917e9d2cad4d846182614">考前必须记住的切比雪夫不等式_哔哩哔哩_bilibili</a></p><p><img src="https://s2.loli.net/2022/06/26/aqCfKjXmGMx975B.png" alt="切比雪夫不等式.png"></p><h4 id="第六章">第六章</h4><p><img src="https://s2.loli.net/2022/06/26/24DnOlR7WxwQMNt.png" alt="考点二十一 三大分布.png"></p><p><img src="https://s2.loli.net/2022/06/26/ck5snQBuHoteVdR.png" alt="考点二十二 点估计.png"></p><h4 id="第七章">第七章</h4><p><img src="https://s2.loli.net/2022/06/26/b9oVjdsfZF1e36m.png" alt="考点二十三 极大似然估计.png"></p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象程序设计例题</title>
      <link href="/posts/3c44299d.html"/>
      <url>/posts/3c44299d.html</url>
      
        <content type="html"><![CDATA[<h3 id="程序分析题">程序分析题</h3><p><strong>分析下列程序运行后的输出结果：</strong></p><h4 id="第一题：">第一题：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span>”in <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span>”<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>string st<span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span>”in <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>string st<span class="token punctuation">)</span>”<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  string st<span class="token operator">=</span>”acb”<span class="token punctuation">;</span>      <span class="token function">f1</span><span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">f1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*答案：in void f1(string st)in void f1(int i)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二题：">第二题：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">C1</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">C1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">incI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>C1 c<span class="token punctuation">)</span><span class="token punctuation">{</span>  c<span class="token punctuation">.</span><span class="token function">incI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"in f1  "</span><span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span>C1 <span class="token operator">*</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>  c<span class="token operator">-&gt;</span><span class="token function">incI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"in f1 *  "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">-&gt;</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span>C1 <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>  c<span class="token punctuation">.</span><span class="token function">incI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span><span class="token string">"in f2 &amp;  "</span><span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  C1 c<span class="token punctuation">;</span>  <span class="token function">f1</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">f1</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">f2</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*答案：in f1  2in f1 *  2in f2 &amp;  3*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三题：">第三题：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BC1</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">BC1</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> sBC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"BC1 allocates 3 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">~</span><span class="token function">BC1</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> sBC<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"BC1 free 3 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span> <span class="token keyword">char</span><span class="token operator">*</span> sBC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BC2</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">BC2</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> sBC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"BC2 allocates 5 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">~</span><span class="token function">BC2</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> sBC<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"BC2 free 5 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span> BC1 bc1<span class="token punctuation">;</span> <span class="token keyword">char</span><span class="token operator">*</span> sBC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> BC1 bc1<span class="token punctuation">;</span> BC2 bc2<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> “<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>” <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*答案：BC1 allocates 3 bytes.BC1 allocates 3 bytes.BC2 allocates 5 bytes.-------BC2 free 5 bytes.BC1 free 3 bytes.BC1 free 3 bytes.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第四题：">第四题：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BC</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">BC</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> sBC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"BC allocates 3 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">~</span><span class="token function">BC</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> sBC<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"BC free 3 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span> <span class="token keyword">char</span><span class="token operator">*</span> sBC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DC</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BC</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span> <span class="token function">DC</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> sDC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"DC allocates 5 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">~</span><span class="token function">DC</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> sDC<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"DC free 5 bytes.\n"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span> <span class="token keyword">char</span><span class="token operator">*</span> sDC<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> DC d<span class="token punctuation">;</span> cout <span class="token operator">&lt;&lt;</span> “<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>” <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*答案：BC allocates 3 bytes.DC allocates 5 bytes.-------DC free 5 bytes.BC free 3 bytes.*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第五题：">第五题：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">TradesPerson</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Just hi."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Base::run "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tinker</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TradesPerson</span></span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tinker."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tinker::run "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Tailor</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">TradesPerson</span></span> <span class="token punctuation">{</span> <span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tailor."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Tailor::run "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    TradesPerson<span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">int</span> which <span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1 == TradesPerson, 2 == Tinker, 3 == Tailor "</span><span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> which<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span> which <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> p <span class="token operator">=</span> <span class="token keyword">new</span> TradesPerson<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> p <span class="token operator">=</span> <span class="token keyword">new</span> Tinker<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> p <span class="token operator">=</span> <span class="token keyword">new</span> Tailor<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p<span class="token operator">-&gt;</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   p<span class="token operator">-&gt;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">delete</span> p<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*答案：1 == TradesPerson, 2 == Tinker, 3 == Tailor 3  cin&gt;&gt;3Tailor.Base::run*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编程题">编程题</h3><h4 id="第一题：-2">第一题：</h4><p>采用面向对象的方式编写一个通迅录管理程序，通迅录中的信息包括：姓名，公司，联系电话，邮编。要求的操作有：添加一个联系人，列表显示所有联系人。先给出类定义，然后给出类实现。（提示：可以设计二个类，一个通迅录条目类CommEntry，一个通讯录类Commus）</p><p><strong>注意：</strong></p><p>在存个人信息时最好是在Comms类中定义一个CommEntry的数组指针，用来存个人信息。</p><p>其次要在Comms类中定义一个变量来记录当前有多少联系人。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">CommEntry</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>string name<span class="token punctuation">;</span>string qiye<span class="token punctuation">;</span>string tel<span class="token punctuation">;</span>string mail<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入名字，公司，电话，邮箱:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> name <span class="token operator">&gt;&gt;</span> qiye <span class="token operator">&gt;&gt;</span> tel <span class="token operator">&gt;&gt;</span> mail<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"名字："</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"  公司："</span> <span class="token operator">&lt;&lt;</span> qiye <span class="token operator">&lt;&lt;</span> <span class="token string">"  电话："</span> <span class="token operator">&lt;&lt;</span> tel <span class="token operator">&lt;&lt;</span> <span class="token string">"  邮箱："</span> <span class="token operator">&lt;&lt;</span> mail <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Comms</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">CommEntry</span></span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>CommEntry<span class="token operator">*</span> p<span class="token punctuation">;</span><span class="token keyword">int</span> total<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token function">Comms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p <span class="token operator">=</span> <span class="token keyword">new</span> CommEntry<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Comms</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SHOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ADD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>total<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>total<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">caidan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"添加一个人的信息：1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"列表显示所有人：2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"退出程序：0"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>Comms p<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> flag<span class="token punctuation">;</span><span class="token function">caidan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入操作："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> flag<span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>p<span class="token punctuation">.</span><span class="token function">ADD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>p<span class="token punctuation">.</span><span class="token function">SHOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二题：-2">第二题：</h4><p>在一个公司中有两个类型的人员：雇员（employee）和管理者（manager），注意管理也是一个（is a）雇员。每个雇员有以下基本信息：姓名（name）、年龄（age）、工作年限（workYear）和部门号（depNo）。并且一个管理者还有更多的属性：级别（level）和管理的雇员（numOfEmployee，可以用数组定义）。一个雇员或是管理者具有以下的行为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      Employee  <span class="token function">e</span><span class="token punctuation">(</span>“Jack”<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> “Development”<span class="token punctuation">)</span><span class="token punctuation">;</span>      Manager  <span class="token function">m</span><span class="token punctuation">(</span>“Tom”<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> “Development”<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      m<span class="token punctuation">.</span><span class="token function">addMember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// m管理e  </span>    e<span class="token punctuation">.</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 显示Jack所有数据成员的信息  </span>    m<span class="token punctuation">.</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//显示Tom所有数据成员的信息  </span>    Employee<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>e<span class="token punctuation">;</span>      <span class="token keyword">bool</span> b <span class="token operator">=</span> p<span class="token operator">-&gt;</span><span class="token function">retire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 如果雇员的年龄是55,则b为true  </span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>m<span class="token punctuation">;</span>      b <span class="token operator">=</span> p<span class="token operator">-&gt;</span><span class="token function">retire</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果管理者的年龄是60，则 b为true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别定义并实现类Employee 和 Manager。</p><p><strong>注意：</strong></p><p>判断退休要用到多态，所以两个退休函数都要加 <code>virtual</code> 关键字</p><p>析构函数和构造函数都尽量写上，析构函数最好加上 <code>virtual</code>。</p><p>继承自父类的子类，在写构造函数时，必须将不带缺省构造函数的父类的构造函数写在初始化列表中。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> workage<span class="token punctuation">;</span>    string dep<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">retire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Employee</span><span class="token punctuation">(</span>string n<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> string d<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">,</span> age <span class="token operator">=</span> a<span class="token punctuation">,</span> workage <span class="token operator">=</span> w<span class="token punctuation">,</span> dep <span class="token operator">=</span> d<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"名字："</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"  年龄："</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">"  工作年龄："</span> <span class="token operator">&lt;&lt;</span> workage <span class="token operator">&lt;&lt;</span> <span class="token string">"  部门号："</span> <span class="token operator">&lt;&lt;</span> dep <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Employee</span></span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> level<span class="token punctuation">;</span>    Employee <span class="token operator">*</span>num<span class="token punctuation">;</span>    <span class="token keyword">int</span> total<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Manager</span><span class="token punctuation">(</span>string n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> w<span class="token punctuation">,</span>string d<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">Employee</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>w<span class="token punctuation">,</span>d<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token keyword">new</span> Employee<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token keyword">new</span> Employee<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">delete</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">addMember</span><span class="token punctuation">(</span>Employee <span class="token operator">*</span> k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num<span class="token punctuation">[</span>total<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>k<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Employee</span><span class="token double-colon punctuation">::</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">" 等级："</span> <span class="token operator">&lt;&lt;</span>level<span class="token operator">&lt;&lt;</span> <span class="token string">"  管理的人："</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">retire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Employee  <span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Development"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Manager  <span class="token function">m</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Developmen"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">addMember</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// m管理e  </span>    e<span class="token punctuation">.</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 显示Jack所有数据成员的信息  </span>    m<span class="token punctuation">.</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//显示Tom所有数据成员的信息  </span>    Employee<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>e<span class="token punctuation">;</span>    <span class="token keyword">bool</span> b <span class="token operator">=</span> p<span class="token operator">-&gt;</span><span class="token function">retire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 如果雇员的年龄是55,则b为true  </span>    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">&amp;</span>m<span class="token punctuation">;</span>    b <span class="token operator">=</span> p<span class="token operator">-&gt;</span><span class="token function">retire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果管理者的年龄是60，则 b为true*/</span>    cout <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三题：-2">第三题：</h4><p>已知类的定义如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>  <span class="token keyword">int</span> iBody<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">iBody</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>iBody <span class="token operator">=</span> x；<span class="token keyword">return</span> iBody<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sub1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>  <span class="token comment">// …</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">// …</span>  <span class="token function">Sub1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> string s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sub2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span>  <span class="token comment">// … </span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token comment">// …</span>  <span class="token function">Sub2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">short</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>试完成类Sub1和Sub2的定义和操作的实现代码，使之能符合下面程序及在注释中描述的运行结果的要求：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Sub1 <span class="token function">s1</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"This is an object of Sub1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Sub2 <span class="token function">s2</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  s1<span class="token punctuation">.</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 此时显示出: 1000: This is an object of Sub1</span>  s2<span class="token punctuation">.</span><span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 此时显示出: 20 and 1000</span>  cout<span class="token operator">&lt;&lt;</span>s2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此时显示出: 20</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><p>当基类中给出纯虚函数时，派生类必须给出该虚函数具体的函数定义，否则无法定义具体实例。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token keyword">int</span> iBody<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//纯虚函数，必须在派生类中给出具体函数定义</span>    <span class="token function">Base</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">iBody</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        iBody <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">return</span> iBody<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sub1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Sub1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> string s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        iBody <span class="token operator">=</span> i<span class="token punctuation">;</span>        name <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> iBody <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Sub2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> name<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Sub2</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">short</span> s<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        iBody <span class="token operator">=</span> i<span class="token punctuation">;</span>        name <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">printOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> iBody <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第四题：-2">第四题：</h4><p>在一个GUI程序中,有一系列相关的类,如circle,triangle,square等等,其中square由二个triangle对象构成. circle,triangle,square等类的对象都有相似的行为print(string)(打印出该类对象的相应信息,如类circler的此函数输出”Circle”),draw()(画出相应的类对象的图形),我们应如何组织这些类,使得系统易于扩充和维护?请用UML语言画出类图,并给出相应类中方法的界面(头文件).</p><p><strong>注意：</strong></p><p>这个题实在是不太明白，现在学性价比太低，就在网上找了张图，感觉也不太对，聊胜于无吧。</p><p><img src="https://s2.loli.net/2022/06/22/CIEd1m7FpOaYsAW.png" alt="1358881-20190628204631590-1044474682.png"></p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象期末复习大纲</title>
      <link href="/posts/6dc9891f.html"/>
      <url>/posts/6dc9891f.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言">前言</h3><p>​本文重点在理清简答题的概念。根据老师发的课件整理了一下，因为我们学校简答题占60%，所以这里全部整理了出来，其他学校的同学可以根据需要看一看。实际上这门语言还是很重实战的，有时候看很久课本或网课不如上手打一个类效果来的好。</p><h3 id="复习大纲：">复习大纲：</h3><h4 id="1-用代码说明在标准C-中如何进行输入输出，并解释各语句的含义是什么？">1.用代码说明在标准C++中如何进行输入输出，并解释各语句的含义是什么？</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cout&lt;&lt;"hello!"&lt;&lt;"world";cin&gt;&gt;a&gt;&gt;b;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在输入时，从键盘输入的数据先放在键盘缓冲区中，当按回车键时，<strong>键盘缓冲区中的数据输入到程序中的输入缓冲区，形成<code>cin</code>流</strong>，然后用流提取运算符“<code>&gt;&gt;</code>”从输入缓冲区中提取数据送给程序中的有关变量。</li><li>当用**<code>cout</code>和流插入运算符“<code>&lt;&lt;</code>”向显示器输出数据时，先将这些数据送到程序中的输出缓冲区保存，直到缓冲区满了或遇到<code>endl</code>，就将缓冲区中的全部数据送到显示器显示出来。**</li></ul><h4 id="2-阐述C＋＋中函数三种调用方式的实现机制、特点及其实参、形参格式，最好用代码说明。试比较三种方式的执行效率。（提示：传址、传值、引用传递）">2.阐述<code>C＋＋</code>中函数三种调用方式的实现机制、特点及其实参、形参格式，最好用代码说明。试比较三种方式的执行效率。（提示：传址、传值、引用传递）</h4><ul><li>这里所说的执行效率，是指在被调用的函数体内执行时的效率。 因为<strong>传值调用时，当值被传到函数体内，临时对象生成以后，所有的执行任务都是通过直接寻址的方式执行的</strong>，而<strong>指针和大多数情况下的引用则是以间接寻址的方式执行的</strong>，所以实际的执行效率会比传值调用要低。如果函数体内对参数传过来的变量进行操作比较频繁，执行总次数又多的情况下，传址调用和大多数情况下的引用参数传递会造成比较明显的执行效率损失。</li><li>总结：<strong>传值调用后，函数体内的对象通过直接寻址方式执行，而传址和引用调用则是通过间接寻址方式执行，执行效率不如传值调用，但具体的执行效率要具体来看，我们推荐大部分传递优先采用引用传递。</strong></li></ul><h4 id="3-什么是内联函数？为什么要使用内联函数？"><strong>3.什么是内联函数？为什么要使用内联函数？</strong></h4><ul><li>在编译时将所调用函数的代码直接嵌入到主调函数中。</li><li>实现代码的重用，提高开发效率。</li></ul><h4 id="4-什么是类的前向声明？使用类的前向声明时，要注意什么？">4.什么是类的前向声明？使用类的前向声明时，要注意什么？</h4><ul><li>引用未定义的类之前，声明该类。</li><li>在没有定义完整的类之前，不能使用这个类创建对象。</li></ul><h4 id="5-什么是先验条件-Precondition-，什么是后置条件-Postcondition-？">5.什么是先验条件(<code>Precondition</code>)，什么是后置条件(<code>Postcondition</code>)？</h4><ul><li>**先验条件是在执行某段代码或正式规范操作之前必须始终为真的条件或谓词。**比如输入一个时间必须小于24。</li><li>**后置条件是在执行某段代码或正式规范操作之后必须始终为真的条件或谓词。**比如计算输入数字的平方根程序可能具有结果为数字的后置条件，且其平方等于输入。</li></ul><h4 id="6-什么是名称空间-namespace-？它的主要作用是什么？要使用一个名称空间中声明的标识符，方式有哪些？">6.什么是名称空间(<code>namespace</code>)？它的主要作用是什么？要使用一个名称空间中声明的标识符，方式有哪些？</h4><ul><li><p><strong>名字空间实质上是一种作用域。<strong>名字空间是一种描述逻辑分组的机制，是为了</strong>解决<code>C++</code>中的变量、函数命名冲突</strong>而服务的。</p></li><li><p><strong>直接指定标识符</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hello!!"</span><span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>使用using关键字</strong>进行声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>cout<span class="token punctuation">;</span><span class="token keyword">using</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>最方便的就是<strong>使用指令<code>using namespace std;</code></strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="7-什么是重载-Overloading-，解释并举例说明？能否根据返回值不同，对函数进行重载，为什么？">7.什么是重载(<code>Overloading</code>)，解释并举例说明？能否根据返回值不同，对函数进行重载，为什么？</h4><ul><li><p><code>C++</code><strong>允许用同一函数名定义多个函数，这些函数的参数个数和参数类型不同。</strong></p><p><code>int max(int a，int b, int c);</code></p><p><code>double max(double a，double b，double c);</code></p><p><code>long  max(long a，long b，long c);</code></p></li><li><p><strong>不能根据返回值不同进行重载。</strong></p><p>因为调用时不能指定类型信息，编译器不知道你要调用哪个函数。</p></li></ul><h4 id="8-如何防止一个头文件被多重包含？举例说明。">8.如何防止一个头文件被多重包含？举例说明。</h4><ul><li><p>如果<code>a.h</code>和<code>b.h</code>都包含了一个头文件<code>x.h</code>。那么<code>x.h</code>在此也同样被包含了两次，只不过它的形式不是那么明显而已。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"a.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"b.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>可以<strong>使用条件编译。</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_X_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_X_H</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//(头文件内容)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当头文件第一次被包含时，它被正常处理，符号<code>_X_H</code>被定义为1。如果头文件被再次包含，通过条件编译，它的内容被忽略。</p></li></ul><h4 id="9-dynamic-cast的作用是什么？试举例说明。">9.<code>dynamic-cast</code>的作用是什么？试举例说明。</h4><ul><li><p><code>dynamic_cast &lt; Type-id &gt; ( expression )</code> <strong>该运算符把expression转换为type-id类型</strong>，并且可以在运行期间检测类型转换是否安全。<code>dynamic_cast</code>要求转型的目的类型必须是指针或者引用。将基类指针转换为派生类指针，将基类引用转换为派生类引用；</p></li><li><p>转换是有条件的</p><p>如果指针（或引用）所指对象的实际类型与转换的目的类型兼容，则转换成功进行；</p><p><strong>否则</strong>如执行的是指针类型的转换，则得到空指针；如执行的是引用类型的转换，则抛出异常。</p></li></ul><h4 id="10-叙述面向对象编程的特点是什么？-提示：封装、继承、多态。">10.叙述面向对象编程的特点是什么？(提示：封装、继承、多态。)</h4><ul><li><p>对比面向过程具有<strong>抽象、封装、继承和多态</strong>的特点。</p><p>封装是将抽象得到的数据和行为相结合，形成了一个有机整体，使得一部分成员充当类与外部的接口，而将其他成员隐藏了起来达到了对成员访问权限的合理控制，使得不同类之间的影响最小，加强数据安全，简化编程。</p><p>继承允许在保持原有类特性的基础上，进行更具体、更详细的说明，能够很好反映出特殊概念和一般概念之间的关系，是代码复用的基础机制。</p><p>多态使得一段程序能够具有处理多种类型对象的能力，相同的消息在不同的对象下会有不同的动作，增强了编程的灵活性。</p></li></ul><h4 id="11-什么是封装？其作用是什么？">11.什么是封装？其作用是什么？</h4><ul><li><p><strong>封装就是将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体</strong>，也就是将数据与操作数据的函数代码进行有机结合，形成类。</p></li><li><p>作用：<strong>使一部分成员充当类与外部的接口，而将其他成员隐藏起来</strong>，这样就达到了对成员访问权限的合理控制，使不同类之间的相互影响减少到最低限度，进而保护数据增强数据的安全性和简化程序编写工作。</p></li></ul><h4 id="12-什么是类？通常一个类中，包含什么样的内容？定义一个类的语法是什么，试举例说明。">12.什么是类？通常一个类中，包含什么样的内容？定义一个类的语法是什么，试举例说明。</h4><ul><li>类是逻辑上相关的函数与数据的封装，描述了所创建对象共同的属性和方法。</li><li>类中声明或定义的变量和函数称为成员，类的成员包括数据成员和函数成员，数据成员描述问题的属性，函数成员描述问题的行为。</li></ul><h4 id="13-什么是对象？什么是类？类与对象的关系是什么？">13.什么是对象？什么是类？类与对象的关系是什么？</h4><ul><li>类是逻辑上相关的函数与数据的封装，它是对问题的抽象描述。</li><li>对象是类的某一特定实体。</li><li>类对象的关系：类是对象的抽象，而对象是类的具体实例。类是抽象的，不占用内存，而对象是具体的，占用存储空间。类是用于创建对象的蓝图，它是一个定义包括在特定类型的对象中的方法和变量的软件模板。</li></ul><h4 id="14-类中的成员可以用public-protected-private分别进行修饰，这三种成员在什么情况下是可以被访问的？类中没有用public-protected-private修饰的成员，其可访问性是什么，结构体中没有用public-protected-private修饰的成员，其可访问性是什么？">14.类中的成员可以用<code>public</code> / <code>protected</code> / <code>private</code>分别进行修饰，这三种成员在什么情况下是可以被访问的？类中没有用<code>public</code> / <code>protected</code> / <code>private</code>修饰的成员，其可访问性是什么，结构体中没有用<code>public</code> / <code>protected</code> / <code>private</code>修饰的成员，其可访问性是什么？</h4><ul><li><code>public</code>修饰的成员可以在任何地方被访问</li><li><code>private</code>修饰的成员只能由该类中的函数、其友元函数访问；不能被任何其他访问，该类对象也不能访问。</li><li><code>protected</code>修饰的成员可以被该类中函数、子类函数、友元函数访问；但不能被该类对象访问。</li><li>类的默认为<code>private</code>，<code>struct</code>默认为<code>public</code>。</li></ul><h4 id="15-什么是类作用域-Class-scope-、文件作用域-file-scope-、函数作用域（function-scope）？">15.什么是类作用域(<code>Class scope</code>)、文件作用域(<code>file scope</code>)、函数作用域（<code>function scope</code>）？</h4><ul><li>类作用域：类是有名成员的集合，类X的成员m具有类作用域，对成员m的访问方式有如下三种：<ul><li>如果X的成员函数中没有声明同名的局部作用域标识符，那么可以直接使用成员m</li><li>通过表达式<code>x.m</code>或<code>X::m</code>(访问静态成员)</li><li>通过<code>ptr-&gt;m</code>，其中<code>ptr</code>为指向X类的一个对象的指针</li></ul></li><li>文件作用域：<ul><li>在函数外部声明的变量只在当前文件范围内（包括文件内所有定义的函数）可用</li><li>在其他文件不可用。要使变量具有文件作用域，必须在变量的声明前加<code>static</code>关键字。</li><li>当多个源文件链接成一个程序时，<code>static</code>可以避免一个文件中的全局变量与其它文件中的变量同名而发生冲突。</li></ul></li><li>函数作用域：指在函数定义或者复合语句中，从标识符的定义点开始到函数或者一对花括号之间的程序段。<ul><li>在同一个局部作用域内不能出现相同名字的两个局部变量（包括形参）。</li><li>一个函数内的复合语句又是一个局部作用域，也就是在函数内有某个变量时，复合语句中可以有另外一个同名字的变量。</li></ul></li></ul><h4 id="16-什么是this指针，其作用是什么？">16.什么是<code>this</code>指针，其作用是什么？</h4><ul><li><code>this</code>指针是一个隐含于每一个成员函数中的特殊指针。它是一个指向正在被该成员函数操作的对象，也就是要操作该成员函数的对象。通过this指针可以访问当前对象的所有成员。</li></ul><h4 id="17-在一个类中，为什么静态成员函数（-static-member-function-）中不能使用-this-指针？">17.在一个类中，为什么静态成员函数（ <code>static member function</code> ）中不能使用 <code>this</code> 指针？</h4><ul><li>静态成员函数并不是针对某个类的实例对象，而是属于整个类的，为所有的对象实例所共有。他在作用域的范围内是全局的，独立于类的对象之外的。他只对类内部的静态成员变量做操作。当实例化一个类的对象时候，里面不存在静态成员的。<code>this</code>指针是相当于一个类的实例的指针，<code>this</code>是用来操作对象实例的内容的，既然静态成员函数和变量都是独立于类的实例对象之外的，他就不能用<code>this</code>指针。也不能操作非静态成员。</li></ul><h4 id="18-什么是构造函数？构造函数有返回值吗？构造函数如何命名？构造函数可以重载吗？什么是缺省构造函数-default-constructor-？什么情况下，类中会有缺省构造函数？">18.什么是构造函数？构造函数有返回值吗？构造函数如何命名？构造函数可以重载吗？什么是缺省构造函数(<code>default constructor</code>)？什么情况下，类中会有缺省构造函数？</h4><ul><li>构造函数主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值。</li><li>构造函数没有返回值。</li><li>构造函数是一个与其所在的类同名的函数。</li><li>构造函数可以重载。但是, 每个构造函数必须有不同的函数签名。</li><li>如果构造函数没有参数，或者构造函数的所有参数都有默认值，就可以称其为缺省构造函数。一个类中，只能有一个缺省构造函数。</li><li>当没有定义构造函数或者定义的构造函数没有参数时，类中会有缺省构造函数。</li></ul><h4 id="19-构造函数的作用是什么？什么时候会被调用？构造函数的执行顺序是什么（父类与子类的构造函数、类自身与其数据成员的构造函数）？">19.构造函数的作用是什么？什么时候会被调用？构造函数的执行顺序是什么（父类与子类的构造函数、类自身与其数据成员的构造函数）？</h4><ul><li>构造函数主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值。</li><li>当类被创建时，自动调用。</li><li>执行构造函数的顺序：<ul><li>1.父类的构造函数</li><li>2.数据成员的初始化（成员中有类，执行该类的构造函数）</li><li>3.子类的构造函数</li></ul></li></ul><h4 id="20-为什么拷贝构造函数（copy-constructor）的参数必须是按引用传递-by-reference-而不能是按值传递-by-value-？">20.为什么拷贝构造函数（<code>copy constructor</code>）的参数必须是按引用传递(<code>by reference</code>)而不能是按值传递(<code>by value</code>)？</h4><ul><li>无限递归调用：当一个对象需要以值方式传递时编译器会生成代码调用它的拷贝构造函数以生成一个复本。如果类 <code>A</code>的拷贝构造函数是以值方式传递一个类 <code>A</code> 对象作为参数的话，当需要调用类 <code>A</code> 的拷贝构造函数时，需要以值方式传进一个 <code>A</code> 的对象作为实参；而以值方式传递需要调用类 <code>A</code> 的拷贝构造函数；结果就是调用类 <code>A</code> 的拷贝构造函数导致又一次调用类A的拷贝构造函数，这就是一个无限递归。</li><li>在某些状况下，类内成员变量需要动态开辟堆内存，如果实行位拷贝，也就是把对象里的值完全复制给另一个对象，如<code>A=B</code>。这时，如果B中有一个成员变量指针已经申请了内存，那 <code>A</code> 中的那个成员变量也指向同一块内存。这就出现了问题：当B把内存释放了（如：析构），这时 <code>A</code> 内的指针就是野指针了，出现运行错误。</li></ul><h4 id="21-拷贝构造函数-复制构造函数-的作用是什么？什么是浅拷贝？什么是深拷贝？">21.拷贝构造函数(复制构造函数)的作用是什么？什么是浅拷贝？什么是深拷贝？</h4><ul><li>复制构造函数由编译器调用来完成一些基于同一类的其他对象的构建及初始化。</li><li>浅拷贝只是对指针的拷贝，拷贝后两个指针指向同一个内存空间，深拷贝不但对指针进行拷贝，而且对指针指向的内容进行拷贝，经深拷贝后的指针是指向两个不同地址的指针。</li></ul><h4 id="22-全局对象-Global-scope-objects-的构造函数、析构函数分别是什么时候被调用的？自动局部对象-Automatic-local-objects-的构造函数、析构函数分别是什么时候被调用的？静态局部对象-static-local-objects-的构造函数、析构函数分别是什么时候被调用的？">22.全局对象(<code>Global scope objects</code>)的构造函数、析构函数分别是什么时候被调用的？自动局部对象(<code>Automatic local objects</code>)的构造函数、析构函数分别是什么时候被调用的？静态局部对象(<code>static local objects</code>)的构造函数、析构函数分别是什么时候被调用的？</h4><ul><li>全局变量构造函数程序运行前被调用，在<code>main()</code>函数返回后全局对象才被销毁，析构函数在程序结束前最后被调用。</li><li>自动局部变量，当程序执行到对象定义时，调用自动局部对象的构造函数。该对象的析构函数在对象离开范围时调用(即离开定义对象的块时)。自动对象的构造函数与析构函数在每次对象进人和离开范围时调用。</li><li>静态局部对象的构造函数只在程序执行首次到达对象定义时调用一次，对应的析构函数在<code>main</code>终止或调用<code>exit</code>函数时调用。</li></ul><h4 id="23-什么是初始化列表-Initialization-Sections-？它的作用是什么？（提示：一般数据成员的初始化、常量成员的初始化，对象成员构造函数的选择、父类构造函数的选择等）。">23.什么是初始化列表(<code>Initialization Sections</code>)？它的作用是什么？（提示：一般数据成员的初始化、常量成员的初始化，对象成员构造函数的选择、父类构造函数的选择等）。</h4><ul><li><p>构造函数初始化列表以一个冒号开始，接着是以逗号分隔的数据成员列表，每个数据成员后面跟一个放在括号中的初始化式。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">float</span> b<span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">9.9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//构造函数初始化列表</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>初始化列表作用：一般数据成员的初始化、常量成员的初始化，对象成员构造函数的选择、父类构造函数的选择。</p></li></ul><h4 id="24-什么是析构函数？析构函数有返回值吗？析构函数如何命名？析构函数可以重载吗？">24.什么是析构函数？析构函数有返回值吗？析构函数如何命名？析构函数可以重载吗？</h4><ul><li>与构造函数相反，当对象结束其生命周期，如果对象所在的函数已调用完毕时，系统会自动执行析构函数。</li><li>析构函数没有返回值。</li><li>名字与类名相同，在前面加‘ <code>~</code> ’。</li><li>析构函数不返回任何值，没有函数类型，也没有函数参数，因此它不能被重载。</li></ul><h4 id="25-析构函数的作用是什么？什么时候会被调用？为什么析构函数通常是虚函数，如果不是虚函数，会如何？">25.析构函数的作用是什么？什么时候会被调用？为什么析构函数通常是虚函数，如果不是虚函数，会如何？</h4><ul><li><p>作用：清空并释放对象先前创建或者占用的内存资源。</p></li><li><p>析构函数对象消亡时即自动被调用。</p></li><li><p>如果析构函数不被声明成虚函数，则编译器采用的绑定方式是静态绑定，在删除基类指针时，只会调用基类析构函数，而不调用派生类析构函数，这样就会导致基类指针指向的派生类对象析构不完全。</p></li><li><p>若是将析构函数声明为虚函数，不管派生类的析构函数前是否加<code>virtual</code>（可以理解为编译器优化），都构成重写。基类的指针指向派生类的对象，然后调用重写虚函数——析构函数，构成了多态，而多态与类型无关，只与对象有关，所以就能够调用的就是派生类的析构函数了。</p></li></ul><h4 id="26-如果要编写一段程序，跟踪类A所创建的实例的个数，请叙述编写程序的大体思路。">26.如果要编写一段程序，跟踪类A所创建的实例的个数，请叙述编写程序的大体思路。</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> i<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token class-name">A</span><span class="token double-colon punctuation">::</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  A c<span class="token punctuation">;</span>  A b<span class="token punctuation">;</span>  A e<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  A <span class="token operator">*</span>p<span class="token operator">=</span><span class="token keyword">new</span> A<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">delete</span> p<span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="27-什么是C-中的三大函数-The-Big-Three-？">27.什么是<code>C++</code>中的三大函数(<code>The Big Three</code>)？</h4><ul><li><code>Big Three</code>: 是指 如果一个类要实现下面某一个成员函数，一般都要一起实现另外两个：<ul><li><code>Desconstructor</code>    析构函数</li><li><code>copy constructor</code>   拷贝构造函数</li><li><code>operator =</code>      赋值函数</li></ul></li></ul><h4 id="28-使用const定义常量与用使用define定义常量相比，有什么优点？">28.使用<code>const</code>定义常量与用使用<code>define</code>定义常量相比，有什么优点？</h4><ul><li><code>const</code>常量有数据类型，而宏常量没有数据类型。编译器可以对<code>const</code>常量进行类型安全检查，而对宏常量只能字符替换</li><li>有些集成化的调试工具能对<code>const</code>常量进行调试，对宏常量不能调试</li><li><code>const</code>定义的常量在程序运行的过程中只有一份拷贝，而<code>define</code>定义的常量在内存中有若干拷贝。</li></ul><h4 id="29-C-中如何进行静态类型转换，解释并举例说明。">29.<code>C++</code>中如何进行静态类型转换，解释并举例说明。</h4><ul><li><p>用于类层次结构中基类和派生类之间指针或引用的转换。进行上行转换（把派生类的指针或引用转换成基类表示）是安全的；进行下行转换（把基类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token operator">:</span><span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Base</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  Derived D<span class="token punctuation">;</span>  Base<span class="token operator">*</span> B <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Base<span class="token operator">*</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>D<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将派生类型的指针转化为基类型的指针。</p></li><li><p>用于基本数据类型之间的转换，如把<code>int</code>转换成<code>char</code>，把<code>int</code>转换成<code>enum</code>。这种转换的安全性也要开发人员来保证。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="30-关键字const的用法有哪些">30.关键字const的用法有哪些?</h4><ul><li><p>定义常量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">5</span>；<span class="token keyword">int</span> <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修饰指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> p；     <span class="token comment">//指针p指向的内容是常量，不可改变。</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> p<span class="token punctuation">;</span>      <span class="token comment">//指针本身是一个常量，不可改变。</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> p；  <span class="token comment">//指针本身和指向的内容都是常量，都不可以改变。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修饰函数参数 <code>void function(const int Var);</code> 表明参数在函数体内不能被修改，但此处没有任何意义，<code>Var</code>本身就是形参，在函数内不会改变。</p><ul><li>使用引用参数，可以防止创建副本，减少内存开销，同时可以在函数中对引用参数修改，函数结束后，引用参数的修改仍然存在。</li><li>如果为了防止对引用参数进行修改，可以对该参数加上<code>const</code>关键字。</li></ul></li><li><p>修饰函数返回值：与修饰普通变量和指针意义差不多，而在传引用时，如果不希望函数返回值被改变，就可以添加关键字 <code>const</code> 。</p></li></ul><p><strong>在类中使用<code>const</code></strong></p><ul><li><p>修饰类成员变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">int</span> nValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>成员常量不可被修改。只能在初始化列表中被赋值。</li></ul></li><li><p>修饰类成员函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>常成员函数, 它不改变对象的成员变量. 代表只读函数，增加程序的可读性。</p></li><li><p>常成员函数不能调用类中任何非<code>const</code>成员函数。</p></li></ul></li></ul><h4 id="31-C-中，static静态变量的初始化和取值问题？">31.<code>C++</code>中，<code>static</code>静态变量的初始化和取值问题？</h4><ul><li>初始化：不能在<code>main()</code>函数和类的构造函数中定义，必须在类外定义。</li></ul><h4 id="32-操作符new的作用是什么？如何申请单个空间？如何申请动态数组？用new创建类的对象时，会发生哪些操作？必要时，请用代码说明。">32.操作符<code>new</code>的作用是什么？如何申请单个空间？如何申请动态数组？用<code>new</code>创建类的对象时，会发生哪些操作？必要时，请用代码说明。</h4><ul><li><p>作用：在堆中申请一段空间，动态分配内存。</p></li><li><p>申请单个空间 <code>int *i = new int;</code></p></li><li><p>申请动态数组 <code>int *a = new int[10];</code></p></li><li><p><code>new</code>创建类对象需要指针接收，一处初始化，多处使用，作用域是全局，且需要手动释放空间，在堆中动态分配内存，调用构造函数。</p></li></ul><h4 id="33-操作符delete的作用是什么？如何删除单个用new申请的空间？如何删除申请的动态数组？用delete删除一个类的对象时，会发生哪些操作？必要时，请用代码说明。">33.操作符<code>delete</code>的作用是什么？如何删除单个用<code>new</code>申请的空间？如何删除申请的动态数组？用<code>delete</code>删除一个类的对象时，会发生哪些操作？必要时，请用代码说明。</h4><ul><li>作用：释放所申请的空间</li><li>释放单个空间<code>delete i;</code></li><li>释放动态数组<code>delete []a;</code></li><li>释放在堆中分配的内存，调用析构函数。</li></ul><h4 id="34-什么是悬挂指针-又称为野指针，Dangling-Pointers-，其危害是什么？">34.什么是悬挂指针(又称为野指针，<code>Dangling Pointers</code>)，其危害是什么？</h4><ul><li>指针指向非法的内存地址，那么这个指针就是悬挂指针，也叫野指针。意为无法正常使用的指针。</li><li>野指针造成的危害程度和危害时间未知，因为野指针指向的内存空间，有可能是某个重要的数据或其他程序。严重的情况下会造成程序崩溃。</li></ul><h4 id="35-什么是切片-Slicing-？-注意参考讲义">35.什么是切片(<code>Slicing</code>)？(注意参考讲义)</h4><ul><li>派生类的存储结构与基类的存储结构存在着“粘接（<code>splice</code>）”关系：当子类对象拷贝到父类对象时，父类对象中只存在父类定义的成员，而不会出现任何子类中的成员。</li></ul><h4 id="36-若父类中没有缺省构造函数，则对派生类的构造函数有什么要求？">36.若父类中没有缺省构造函数，则对派生类的构造函数有什么要求？</h4><ul><li>如果父类是一个无缺省参数的构造函数，那么对于派生类一旦没有构造函数，那么就不会自动的先构造父类的构造函数，这是不允许的。</li><li>派生类中一定要有构造函数。</li><li><code>BaseballTeam(const string s[], int si) : Team(si)</code></li><li>派生类的构造函数通过初始化列表，对基类进行初始化。</li></ul><h4 id="37-父类成员中的public、protected、private成员，哪些在子类中是可以访问的？在公有继承、私有继承、受保护继承三种继承方式下，父类成员中的public、protected、private成员被继承到子类后，其可访问性分别是什么？派生类是否可以继承父类的构造函数和析构函数？">37.父类成员中的<code>public</code>、<code>protected</code>、<code>private</code>成员，哪些在子类中是可以访问的？在公有继承、私有继承、受保护继承三种继承方式下，父类成员中的<code>public</code>、<code>protected</code>、<code>private</code>成员被继承到子类后，其可访问性分别是什么？派生类是否可以继承父类的构造函数和析构函数？</h4><ul><li><code>public</code> 和<code>protected</code>是可以访问的，<code>private</code>不可访问。</li><li>公有继承：<code>public</code>、<code>protected</code>、<code>private</code></li><li>私有继承：<code>private</code>、<code>private</code>、<code>private</code></li><li>保护继承：<code>protected</code>、<code>protected</code>、<code>private</code></li><li>派生类不能继承父类的构造函数和析构函数。</li></ul><h4 id="38-多重继承会带来什么问题？在C-中是如何解决的？">38.多重继承会带来什么问题？在<code>C++</code>中是如何解决的？</h4><ul><li><p>问题1：类DC的对象中存在多个同名成员 <code>x</code>， 应如何使用？</p></li><li><p>解决方案：在DC对象调用x时，用作用域标识符说明 <code>x </code> 是属于哪个类的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BC0</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> K<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BC1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">BC0</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BC2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">BC0</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DC</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BC1</span><span class="token punctuation">,</span><span class="token keyword">public</span> <span class="token class-name">BC2</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>DC d<span class="token punctuation">;</span>    <span class="token comment">//虚继承使得BC0仅被DC间接继承一份</span>d<span class="token punctuation">.</span>K <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span>d<span class="token punctuation">.</span>BC1<span class="token double-colon punctuation">::</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    d<span class="token punctuation">.</span>BC2<span class="token double-colon punctuation">::</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>问题2：类DC的对象中，存在两份来自类 <code>BC0</code> 的成员 <code>K</code>，如何区分？</p></li><li><p>解决方案：在<code>BC1</code>类和<code>BC2</code>类继承<code>BC0</code>时，其前面加上<code>virtual</code>关键字就可以实现虚拟继承，使用虚拟继承后，当系统碰到多重继承的时候就会先自动加一个<code>BC0</code>的拷贝，当再次请求一个<code>BC0</code>的拷贝时就会被忽略，以保证继承类成员函数的唯一性。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BC0</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> K<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BC1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">BC0</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BC2</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">BC0</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>  <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">DC</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">BC1</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">BC2</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>  DC d<span class="token punctuation">;</span>    <span class="token comment">//虚继承使得BC0仅被DC间接继承一份</span>  d<span class="token punctuation">.</span>K <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="39-什么是纯虚函数？什么是抽象数据类型-ADT-？抽象类的作用是什么？抽象类是否可实例化？抽象类的什么样子类可以实例化？">39.什么是纯虚函数？什么是抽象数据类型(<code>ADT</code>)？抽象类的作用是什么？抽象类是否可实例化？抽象类的什么样子类可以实例化？</h4><ul><li>纯虚函数是没有函数体的虚函数，它的实现留给该基类的派生类去做，这就是纯虚函数的作用。</li><li>抽象类是一种特殊的类，它是为了抽象和设计的目的而建立的，它处于继承层次结构的较上层。</li><li>抽象类不可实例化，只可以派生。</li><li>抽象类派生的子类必须重置基类的纯虚函数才能实现实例化。</li><li>抽象数据类型是具有类似行为的特定类型的数据结构的数学模型：或者具有类似语义的一种或者多种程序设计语言的数据类型。</li><li>定义：一个数学模型以及定义在该模型上的一组操作。</li></ul><h4 id="40-对于函数调用，什么是前期绑定-Early-Binding，又称为静态联编-？什么是后期绑定-Late-Binding，又称为动态联编-？重载函数是后期绑定吗，如果不是为什么？">40.对于函数调用，什么是前期绑定(<code>Early Binding</code>，又称为静态联编)？什么是后期绑定(<code>Late Binding</code>，又称为动态联编)？重载函数是后期绑定吗，如果不是为什么？</h4><ul><li><p>绑定：程序自身彼此关联的过程，确定程序中的操作调用与执行该操作的代码间的关系。例如把一个标示符名和一个存储地址联系在一起的过程。</p></li><li><p>用面向对象的术语讲，就是把一条消息和一个对象的方法相结合的过程。</p></li><li><p>按照绑定进行的阶段的不同，可以分为静态绑定和动态绑定两种。</p></li><li><p>静态绑定：绑定工作在编译连接阶段完成。</p><p>因为绑定过程是在程序开始执行之前进行的，因此也称为早期绑定或前绑定。</p><p>在编译、连接过程中，系统就可以根据类型匹配等特征确定程序中操作调用与执行该操作代码的关系，即确定了某一个同名标识到底是要调用哪一段程序代码。</p></li><li><p>动态绑定：和静态绑定相对应，绑定工作在程序运行阶段完成的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Get</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">Get</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyFunction</span><span class="token punctuation">(</span> A <span class="token operator">*</span> pa <span class="token punctuation">)</span><span class="token punctuation">{</span>pa<span class="token operator">-&gt;</span><span class="token function">Get</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pa-&gt;Get( )</code> 调用的是 <code>A::Get( )</code>还是<code>B::Get( )</code>，编译时无法确定，因为不知道<code>MyFunction</code>被调用时，形参会对应于一个 <code>A</code> 对象还是<code>B</code>对象。</p><p>所以只能等程序运行到 <code>pa-&gt;Get( )</code>了，才能决定到底调用哪个<code>Get()</code>。</p></li><li><p>重载函数是静态绑定。</p></li></ul><h4 id="41-要让一个函数调用表现出多态特征，必须满足哪些条件？">41.要让一个函数调用表现出多态特征，必须满足哪些条件？</h4><ul><li>必须存在继承关系；</li><li>子类重写父类的方法。继承关系中必须有同名的虚函数，并且它们是覆盖关系（重载不行）。</li><li>存在基类的指针，通过该指针调用虚函数。</li></ul><h4 id="42-什么是隐藏-hiding-、覆盖-overriding-、重载-overloading-？对比它们的异同？以C-代码为例进行说明。">42.什么是隐藏(<code>hiding</code>)、覆盖(<code>overriding</code>)、重载(<code>overloading)</code>？对比它们的异同？以<code>C++</code>代码为例进行说明。</h4><ul><li><p>若基类 B 定义了非虚方法 <code>m</code>，同时其派生类 <code>D</code> 也定义了方法<code>m</code>，此时，我们说派生类方法 <code>D::m</code> 隐藏了继承自基类的同名方法 <code>B::m</code> 。由于函数签名不同，所以二者不构成重置。故<code>D::m</code>隐藏了<code>B::m</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span>  <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">m</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token comment">//由于函数签名不同，所以二者不构成重置。</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    D  d1 <span class="token punctuation">;</span>    d1<span class="token punctuation">.</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// invokes D::m()</span>    <span class="token comment">//d1.m(10); // ERROR</span>    d1<span class="token punctuation">.</span><span class="token class-name">B</span><span class="token double-colon punctuation">::</span><span class="token function">m</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// OK</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>覆盖(<code>override</code>)是指派生类中存在重新定义的函数，其函数名、参数列、返回值类型必须同父类中的相对应被覆盖的函数严格一致，覆盖函数和被覆盖函数只有函数体不同，当派生类对象调用派生类中该同名函数时会自动调用派生类中的覆盖版本，而不是父类中的被覆盖函数版本，这种机制就叫做覆盖。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span>  <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">m</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//重置了基类方法，仍然为虚函数</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    B<span class="token operator">*</span>p<span class="token operator">=</span> <span class="token keyword">new</span> D<span class="token punctuation">;</span>    p <span class="token operator">-&gt;</span> <span class="token function">m</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 动态绑定 D::m()</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>重载：如果顶层函数如果同一类中的函数有不同的签名，则函数名可以相同。编译过程中绑定函数调用和对应的函数体。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token comment">// default constructor</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token comment">// convert constructor</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">print</span><span class="token punctuation">(</span> <span class="token keyword">double</span> d <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span>  <span class="token function">print</span><span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    C c1<span class="token punctuation">,</span><span class="token function">c2</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">100.123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span> <span class="token string">"100.123"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="43-什么是多态？">43.什么是多态？</h4><ul><li>多态是一种运行时绑定机制(<code>run-time binding</code>) ，通过这种机制，实现将函数名绑定到函数具体实现代码的目的。</li></ul><h4 id="44-什么是运算符重载？为什么要使用运算符重载？如何进行运算符重载，举例说明。">44.什么是运算符重载？为什么要使用运算符重载？如何进行运算符重载，举例说明。</h4><ul><li><p>运算符重载，就是对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型。</p></li><li><p>扩展<code>C++</code>中提供的运算符的适用范围，以用于类所表示的抽象数据类型。同一个运算符，对不同类型的操作数，所发生的行为不同。</p></li><li><p>运算符重载的函数一般地采用如下两种形式：成员函数形式和友元函数形式。这两种形式都可访问类中的私有成员。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Complex</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>    real<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    imag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span><span class="token keyword">double</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    real<span class="token operator">=</span>r<span class="token punctuation">;</span>    imag<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span> <span class="token keyword">const</span> Complex <span class="token operator">&amp;</span> <span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>       <span class="token comment">//重载为成员函数</span>    <span class="token keyword">friend</span> Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//重载为友员函数</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">double</span> real<span class="token punctuation">;</span>    <span class="token keyword">double</span> imag<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="45-为什么重载为全局函数的运算符通常要比重载为成员函数的运算符多一个参数？举例说明。">45.为什么重载为全局函数的运算符通常要比重载为成员函数的运算符多一个参数？举例说明。</h4><ul><li><p>当重载为成员函数时，会有一个<code>this</code>指针，指向当前的类，所以只需要一个参数就可以了。</p></li><li><p>而当重载为全局函数时，将没有隐含的参数<code>this</code>指针，这样将会多一个参数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Complex <span class="token keyword">operator</span> <span class="token operator">+</span><span class="token punctuation">(</span>Complex<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Complex <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span>Complex <span class="token operator">&amp;</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4 id="46-什么是友元-friend-函数？为什么要使用友员函数？">46.什么是友元(<code>friend</code>)函数？为什么要使用友员函数？</h4><ul><li>友元函数是在类声明中由关键字<code>friend</code>修饰说明的非成员函数或其它类的成员函数，在它的函数体中能够通过对象名访问 <code>private</code> 和 <code>protected</code>成员</li><li>友元函数可以访问这个类中的私有成员，增加灵活性，使程序员可以在封装和快速性方面做合理选择。</li><li>友元是<code>C++</code>提供的一种对数据封装和数据隐藏的破坏机制。</li></ul><h4 id="47-什么是UML？如何画UML中的类图？什么是类与类之间依赖关系、关联关系、包含关系？试举例说明这三种类之间的关系。这三种关系如何和UML图表示？">47.什么是<code>UML</code>？如何画<code>UML</code>中的类图？什么是类与类之间依赖关系、关联关系、包含关系？试举例说明这三种类之间的关系。这三种关系如何和<code>UML</code>图表示？</h4><ul><li><code>UML</code>统一建模语言，UML语言是一种可视化的的面向对象建模语言，描述软件模型的静态结构、动态行为及模块组织与管理。</li><li>依赖关系：一个事物的变化可能会影响到使用它的另一个事物。举例：驾驶员（源）开车（目标）。</li><li>关联关系：一个类的对象和另一个类的对象之间相互作用。举例：老师和学生，小明的语文老师是张老师，张老师的学生有小明。</li><li>包含关系：聚集和组合</li><li>聚集表示类之间的关系是整体与部分的关系。举例：班级成员和学生。</li><li>组合是指整体拥有各个部分，整体和部分共存，整体不存在了，部分也会随之消失。举例：打开一个视窗口，它由标题、外框和显示区域组成，视窗口是一个整体，它消失了，部分也就随之消失了。</li><li>继承关系：在UML中称为泛化。举例：鸭子和鸟，鸭子是一种鸟，继承了鸟的特性。</li></ul><h4 id="48-常见的类与类之间的关系有哪几种，举例说明每种关系的对应UML图如何画？两个什么样的类可以实现为继承关系？">48.常见的类与类之间的关系有哪几种，举例说明每种关系的对应<code>UML</code>图如何画？两个什么样的类可以实现为继承关系？</h4><ul><li>依赖关系、关联关系、包含关系、继承关系。</li><li>具有共同属性的两个类可以实现继承关系。</li></ul><h4 id="49-分别举例说明用于算法抽象的函数模板和用于数据抽象的类模板。">49.分别举例说明用于算法抽象的函数模板和用于数据抽象的类模板。</h4><ul><li><p><strong>函数模板：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>T <span class="token function">add</span><span class="token punctuation">(</span> T a<span class="token punctuation">,</span> T b <span class="token punctuation">)</span><span class="token comment">//函数模板</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//模板实例</span>complex c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span><span class="token generic-function"><span class="token function">add</span><span class="token generic class-name"><span class="token operator">&lt;</span>complex<span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> c2 <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数模板是  对算法相似，但支持的数据类型不同的一组操作的提炼，以提高程序的重用性。</p></li><li><p>函数模板的实例就是一个用于特定类型的普通函数。</p></li><li><p>通常，编译器可根据实参类型确定模板参数；</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">add</span> <span class="token punctuation">(</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add&lt;int&gt; (10,17);</span>complex c1<span class="token punctuation">,</span> c2<span class="token punctuation">;</span><span class="token function">add</span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> c2 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// add&lt;complex&gt;(c1,c2);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>类模板：</strong></p></li><li><p>使用类模板使用户可以为类定义一种模式，使得类中的某些数据成员、某些数据成员函数的参数、返回值和局部变量能够取任意类型（包括系统预定义和用户自定义）</p></li><li><p>有时候，有两个或多个类，其功能是相同的，仅仅是数据类型不同，可以使用模板类。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token comment">//声明模板</span><span class="token keyword">class</span> <span class="token class-name">Array</span><span class="token punctuation">{</span>    T<span class="token operator">*</span>  array<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">public</span>：    <span class="token function">Array</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">charArray</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token operator">*</span>array<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">charArray</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">intArray</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span>array<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">intArray</span><span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="50-使用异常处理机制的好处是什么？">50.使用异常处理机制的好处是什么？</h4><ul><li>将常规代码与错误处理代码的分离</li><li>实现在调用栈中传播异常</li><li>实现对不同的错误类型进行分类</li></ul><h4 id="51-简述C-中的异常处理机制。要捕获某段代码中的所有异常，应该如何编写代码？">51.简述<code>C++</code>中的异常处理机制。要捕获某段代码中的所有异常，应该如何编写代码？</h4><ul><li><code>C++</code> 用<code>try</code>和<code>catch</code>进行异常处理，当<code>try</code>块出现异常，则<code>catch</code>中匹配相应的异常处理，若<code>catch</code>块中没有匹配该异常对象的语句，则转向外一层的<code>try</code>、<code>catch</code>语句，若一直退回到主函数都无法处理异常，则由系统调用<code>terminate()</code>函数终止程序。</li><li>用异常规格(<code>exception specification</code>)列出函数可能会抛出所有异常的类型。</li></ul><h4 id="52-简述虚函数动态绑定的实现原理。">52.简述虚函数动态绑定的实现原理。</h4><ul><li>构造函数中为对象的虚指针赋值，通过多态类型的指针或引用调用成员函数时，通过虚指针找到虚表，进而找到所调用的虚函数的入口地址，通过该入口地址调用虚函数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 面向对象程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背景与超链接颜色问题</title>
      <link href="/posts/19403f9e.html"/>
      <url>/posts/19403f9e.html</url>
      
        <content type="html"><![CDATA[<h4 id="网站背景">网站背景:</h4><ul><li>打开主题配置文件即<code>blog/themes/next</code>下的<code>config.yml</code>，将 <code>style: source/data/styles.styl</code> 前面的<code>#</code>去掉取消注释</li></ul><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token property-declaration"><span class="token property">custom_file_path</span><span class="token punctuation">:</span>  style<span class="token punctuation">:</span> source<span class="token operator">/</span>_data<span class="token operator">/</span>styles.styl</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p>打开根目录 <code>Blog/source</code> 创建文件 <code>_data/styles.styl</code> , 添加以下内容</p><p>注意:图片的地址不用改, 但是要将想要改的图片放到 <code>Blog\themes\next\source\images</code> 并将图片改名为 <code>background.png</code></p></li></ul><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector"><span class="token comment">// 添加背景图片</span>body <span class="token punctuation">{</span></span>      <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(/images/background.png)</span><span class="token punctuation">;</span><span class="token comment">//自己喜欢的图片地址</span></span>      <span class="token property-declaration"><span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span>      <span class="token property-declaration"><span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span></span>      <span class="token property-declaration"><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></span>      <span class="token property-declaration"><span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token unit">%</span> <span class="token number">50</span><span class="token unit">%</span><span class="token punctuation">;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="网站超链接颜色">网站超链接颜色:</h4><ul><li><p>打开 <code>Blog\themes\next\source\css\_common\components\post</code> 路径下的<code>post.styl</code> , 并在底部添加如下代码</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector">a:not(.btn)<span class="token punctuation">{</span></span>  <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#90EE90</span><span class="token punctuation">;</span> <span class="token comment">//超链接显示颜色</span></span>  <span class="token property-declaration"><span class="token property">border-bottom</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>  <span class="token selector">&amp;:hover <span class="token punctuation">{</span></span><span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#00FA9A</span><span class="token punctuation">;</span>  <span class="token comment">//鼠标移动上去后超链接颜色</span></span><span class="token property-declaration"><span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span></span><span class="token property-declaration"><span class="token property">text-decoration</span><span class="token punctuation">:</span> underline<span class="token punctuation">;</span></span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>颜色码链接:</strong> <a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">RGB颜色值与十六进制颜色码转换工具 (sioe.cn)</a></p></li></ul><h4 id="侧边栏背景">侧边栏背景:</h4><ul><li><p>注意: 本文仅针对next主题.</p><p>对于 Muse 和 Mist主题, 其侧边栏的配置文件为 <code>Blog\themes\next\source\css\_schemes\Muse</code></p><p>对于 Pisces和 Gemini主题，其侧边栏的配置文件为 <code>Blog\themes\next\source\css\_schemes\Pisces</code></p></li><li><p>在 <code>_sidebar.styl</code> 文件底部添加如下内容</p><pre class="line-numbers language-stylus" data-language="stylus"><code class="language-stylus"><span class="token selector">.sidebar <span class="token punctuation">{</span></span>  <span class="token comment">//设置背景图片，图片放在Hexo\themes\hexo-theme-next\source\images目录下</span>  <span class="token property-declaration"><span class="token property">background</span><span class="token punctuation">:</span><span class="token url">url(/images/sidebar-bg.jpg)</span><span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">background-position</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">background-repeat</span><span class="token punctuation">:</span>no-repeat<span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>  <span class="token statement"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">not</span> hexo-config<span class="token punctuation">(</span><span class="token string">'back2top.sidebar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>    <span class="token property-declaration"><span class="token property">box-shadow</span><span class="token punctuation">:</span> inset <span class="token number">0</span> <span class="token number">2</span><span class="token unit">px</span> <span class="token number">6</span><span class="token unit">px</span> <span class="token color">black</span><span class="token punctuation">;</span></span>  <span class="token punctuation">}</span>  <span class="token property-declaration"><span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">transition</span><span class="token punctuation">:</span> all $transition-ease-out<span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">width</span><span class="token punctuation">:</span> $sidebar-desktop<span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">z-index</span><span class="token punctuation">:</span> $zindex-2<span class="token punctuation">;</span></span>  <span class="token selector">a <span class="token punctuation">{</span></span>    <span class="token comment">//设置文字颜色</span><span class="token property-declaration"><span class="token property">border-bottom-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span></span><span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span></span>    <span class="token selector">&amp;:hover <span class="token punctuation">{</span></span>  <span class="token property-declaration"><span class="token property">border-bottom-color</span><span class="token punctuation">:</span> $FFFFFF<span class="token punctuation">;</span></span>  <span class="token property-declaration"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span></span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改侧边栏中头像下方的作者姓名和描述的字体颜色, 需要在 <code>Blog\_config.yml</code> 中修改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">description</span><span class="token punctuation">:</span> 像珍惜礼物一样，珍惜今天。     <span class="token comment">#简介或者格言 不修改颜色版本</span><span class="token key atrule">description</span><span class="token punctuation">:</span> &lt;font color="<span class="token comment">#000000"&gt;像珍惜礼物一样，珍惜今天。&lt;/font&gt;     #简介或者格言  修改颜色版本"#000000"就是对应的颜色 两个版本二选其一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】最短编辑距离题解</title>
      <link href="/posts/5cbfb92d.html"/>
      <url>/posts/5cbfb92d.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-最短编辑距离">题目: <a href="https://www.acwing.com/problem/content/904/">最短编辑距离</a></h4><h4 id="题意">题意:</h4><p>将n个字符的字符串a改成m个字符的字符串b最少需要几步, 每次操作有三种选择: 删除a的一个字符, 增加a的一个字符, 修改a的一个字符.</p><h4 id="思路">思路:</h4><p>怎么入手?<br>判断a和b的长度增删到一直后逐个判断a和b的字符是否相同然后依次修改a吗?<br>两个问题:<br>1.如何保证最终答案一定是最小值. 子问题就是如何保证每次插入或者删除的时候都是最优解?<br>2.代码及其繁琐, 且必然会超时.</p><p>动态规划优化:<br>用<strong>数组f[i] [j]表示将a的前i个字符和b的前j个字符匹配所需的最小操作数</strong>.<br>我们考虑最后一步操作(假设前面都已经操作完, 第一步就是前面操作数为0的最后一步).<br>因为每次操作只可能有三种可能, 那么第一种可能就是将字符a[i]删除得到b[1~j], 显然这要求a[1<sub>i-1]已经和b[1</sub>j]匹配, 也即<strong>f[i-1] [j]+1</strong>;<br>第二种可能就是字符串a[1<sub>i]增加一个字符得到b[1</sub>j], 显然这要求a[1<sub>i]已经和b[1</sub>j-1]匹配了, 然后所增加的a[i+1]才能和b[j]匹配. 也即<strong>f[i] [j-1]+1;</strong><br>第三种情况是修改a[i], 分两种情况, 如果a[i]和b[j]相等, 那么显然就不用操作了, 就是<strong>f[i-1] [j-1]</strong>, 如果不同, 那么操作数就要+1, 也即<strong>f[i-1] [j-1]+1.</strong></p><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>string a<span class="token punctuation">,</span>b<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token string">" "</span><span class="token operator">+</span>a<span class="token punctuation">;</span><span class="token comment">//字符下标从1开始, 防止遍历时发生越界</span>    b<span class="token operator">=</span><span class="token string">" "</span><span class="token operator">+</span>b<span class="token punctuation">;</span>    <span class="token comment">//初始化</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//将a[1~i]删成b[0]需要i步</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token comment">//将a[0]增加到b[1~i]需要i步</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//第三种情况需要特判, 如果两个字符串最后一个字符相同就不用改</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理期末复习</title>
      <link href="/posts/612f39d1.html"/>
      <url>/posts/612f39d1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><blockquote><p>本文共6个应用题，8个计算题，12个简答题，均是根据我们学校往年考试重点挑出来的，看的快的话大概1个小时就能看完。《计算机组成原理》这门课内容太多，突击复习的话看课程和课本已经不现实了，知识点太多太杂，看不过来的（你让我怎么荔枝！）， 最好就是直接做题，因为着重的考点就那几种题目，记住怎么做就行了，不用知道为什么，看完再对着题目过一遍及格绝对没问题。</p><p>为了保证效率，本文将采用倒序，即 ”应用题-计算题-简答题“ 的顺序，请放心食用。</p></blockquote><h2 id="题目总结">题目总结:</h2><h3 id="三-应用题">三 应用题:</h3><h4 id="1-CPU与存储器的连接">1.CPU与存储器的连接</h4><p><img src="https://img-blog.csdnimg.cn/20a93fd2806f4a0bbad019ad99ba767e.png" alt=""></p><ul><li><p>根据题目确定<strong>系统程序区</strong>和<strong>用户程序区</strong>的容量</p><ul><li>一般CPU的规格不会变，就是16根地址线(代表画图时CPU的A0 ~ A15端口)，8根数据线(代表画图时CPU的D0 ~ D7端口)，8根数据线代表数据是8位的，我们在选择ROM和RAM芯片也要尽量选择相应位数.</li><li>入手点是根据题目的要求(一般会有三点, 第一点就是两种芯片的容量, 对应地址线, 也就是数据的地址)选择合适的芯片, <strong>系统程序区</strong>只能用ROM, <strong>用户程序区</strong>只能用RAM. 例如本题中要求我们最小4k为系统程序区, 联系上面的CPU8根数据线, 那么就是要求我们用ROM芯片组成一个4k×8位的ROM芯片. 4096 ~ 16383(16383 - 4096+1 = 12k)地址对应12k的地址，那么就是要求我们设计一个12k × 8位的RAM芯片.</li></ul></li><li><p>选择合适的芯片</p><ul><li>注意, 题目不会直接给我们正好合适的芯片, 需要我们自己去扩展, 有字扩展和位扩展两种. 两个2k × 8位可以合成一个4k × 8位, 这就是字扩展. 两个4k × 4位可以合成一个4k × 8位, 这就是位扩展. 字扩展和位扩展的区别体现在画图上, <strong>位扩展则芯片连接CPU对应的数据线</strong>, 比如两个4k的芯片合成一个8k的芯片, 那么这两个4k芯片分别连接CPU的D0、D3端口和D4、D7端口. <strong>字扩展则对应74138译码器的输出端</strong>(不必知道74138译码器是什么, 只要记住怎么画和分清输入端输出端即可).</li><li>如图:<br><img src="https://img-blog.csdnimg.cn/b4166294029a4943804aeed076aff802.png" alt="在这里插入图片描述"></li></ul></li><li><p>将十六进制的容量用二进制写出来, 分别对应ROM和RAM的芯片的容量.</p><ul><li><p>比如该题中要求<strong>系统程序区</strong>4k容量, 对应的十六进制应该是1000H, 但是因为地址是从0开始计数, 所以<strong>系统程序区</strong>地址对应的十六进制就是0000H ~ 0FFFH. 用户地址区则是4096 ~ 16383也就是1000H ~ 3FFFH.</p></li><li><p>注意两片ROM对应1个4k容量. 三个RAM对应12k容量, 也就是1个RAM对应1个4k容量, 写成二进制:</p><p><img src="https://img-blog.csdnimg.cn/906e49ed0c244d8b9cc4ffe25e4e0deb.png" alt=""></p></li></ul></li><li><p>最关键的一步, 根据二进制地址分配的表画出逻辑图.</p><ul><li>这一部分是拿分的关键, 首先CPU和74138译码器的图要自己记住, 考试时直接画上去. 画上对应芯片数量的矩形并注明是哪种芯片 注意布局, 合适的布局会让等下连接芯片更加清晰好看.</li><li>根据芯片的容量来选择连接CPU的几根地址线, 例如本题中两种芯片的容量都是4k的(这里不看位数), 4k=2^12次方, 也就是连接12根地址线, 注意从A0开始.</li><li><strong>没有用到的最低三位地址线</strong>去和74138的CBA输入端连接. 注意地址线从低到高依次和74138输入端的ABC连接.</li><li>G2B非和G2A非均和CPU地址线中没有用到的且恒为0的端口连接.</li><li>G1和恒为1的端口连接, 没有的话可以画一条线并注明5V, 表示外部连接.</li><li>根据CBA三个输入连接的CPU地址线的二进制数, 来确定输出(Y0 ~ Y7), 并连接到对应的芯片上. 有时需要注意</li><li>最后<strong>将RAM芯片连接到W/R非</strong>上即可.</li><li>如图:</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/f8d225f209bd4df1a9f3964380eb105a.png" alt=""></p><p><strong>参考连接：</strong> <a href="https://blog.csdn.net/qq_41913072/article/details/85137196"> 存储器与CPU的连接_yrdelft的博客-CSDN博客_存储器与cpu的连接</a></p><h4 id="2-设计主存地址">2.设计主存地址</h4><p>统一块长, Cache容量, 主存容量三者的单位, 最好都换算成B的单位(1B代表1个字节, 1B = 8b. 1b代表1位).</p><p><strong>全相联有两部分: 主存字块标记, 字块内地址</strong></p><ul><li><strong>首先</strong>确定块长, 也就是每个字块有多少字节, 然后将该数字换算成2^x次方的形式, 那么<strong>字块内地址</strong>就是x.</li><li><strong>主存字块标记</strong>等于将主存容量换成2^z次方的形式后, z - x即为<strong>主存字块标记</strong>大小.<ul><li>全相联是最简单的一种, 出题时大概率会放在第一问.</li></ul></li></ul><p><strong>直接映射有三部分: 主存字块标记, Cache字块地址, 字块内地址</strong></p><ul><li><strong>字块内地址</strong>不变.</li><li><strong>Cache字块地址</strong>等于将Cache容量换成2^y次方的形式后, y - x即为<strong>Cache字块地址</strong>大小.</li><li><strong>主存字块标记</strong>等于将主存容量换成2^z次方的形式后, z - y - x即为<strong>主存字块标记</strong>大小.</li></ul><p><strong>二路组相联: 主存字块标记, 组地址, 字块内地址</strong></p><ul><li>首先<strong>字块内地址</strong>不变.</li><li>2^(y-x)次方除n路组相联(这里是二路, n = 2)然后换算成2^m次方即为组地址.</li><li><strong>主存字块标记</strong>等于将主存容量换成2^z的形式后, z - x - m即为<strong>主存字块标记</strong>大小.</li></ul><h4 id="3-磁盘的技术指标">3.磁盘的技术指标</h4><p>磁盘计算题一般都是改改数, 记住计算公式就可以. 计算磁道周长时π视为3.14.</p><p><strong>例题:</strong> 磁盘组有 <strong>6 片磁盘</strong>, 每片有两个记录面, <strong>最上最下两面不用</strong>. 存储区域<strong>内直径 20cm</strong>, <strong>外直径 40cm</strong>, <strong>道密度为 20 道/cm</strong>, <strong>内层位密度 400 位/cm</strong>, <strong>转速 2400 转/分</strong>.</p><ul><li><p>共有多少存储面可用?</p></li><li><p>一共6片, 每片有上下两个记录面, 最上最下两面不用. 则一共有6*2-2=10</p></li><li><p>共有多少个柱面?</p><ul><li><p><strong>柱面数量 = 有效存储区域(存储区域外半径 − 存储区域内半径) ∗ 道密度</strong></p></li><li><p>柱面数量即为一个盘面上的磁道数量, 和有多少可用存储面无关.</p></li><li><p>注意, 题目所给的内 / 外径为直径.</p></li><li><p>本题中: 有效存储区域长度 = 40/2 - 20/2 = 10 (cm)</p><p>柱面数 = 10 × 20 = 200 (道), 即200个柱面.</p></li></ul></li><li><p>盘组总存储容量是多少?</p><ul><li><p><strong>盘组总容量 = 存储面数 * 柱面数 * 每道信息量(每条磁道容量)</strong></p></li><li><p><strong>每道信息量 = 位密度 * 对应磁道周长</strong></p></li><li><p>磁道长度就是题目中所给的位密度所对应的内层或外层周长.</p></li><li><p>本题中给的是内层位密度, 所以先算内层磁道周长 = 2 * r * π = 62.8 cm</p><p>每道信息量 = 400 * 62.8 = 25120 位. 单位可以转成字节, 也可以不转, 25120b = 3.14KB</p><p>盘组总容量 = 10 * 200 * 3.14KB = 6280KB = 6.28 MB</p></li></ul></li><li><p>数据传输率多少?</p><ul><li><p><strong>数据传输率 = 转速(单位要转化为多少转每秒) * 每道信息量</strong></p></li><li><p>本题中: 转速 = 2400转 / 分 = 40转 / 秒</p><p>数据传输率 = 40 * 3.14KB = 125.6 KB / 秒 = 0.1256 MB / 秒</p></li></ul></li><li><p>如果某文件长度超过一个磁道的容量, 应将它记录在同一个存储面上, 还是记录在同一个柱面上, 为什么?</p><ul><li><strong>记录在同一个柱面上, 因为不需要重新寻找磁道, 数据读写速度快.</strong></li><li>没有为什么, 记住就行了.</li></ul></li></ul><h4 id="4-虚拟存储器的工作原理">4.虚拟存储器的工作原理</h4><p>虚页号 = 页号, 主存实页面号 = 页框号 = 物理块号, 有效位=<strong>该页面当前是否存在于内存中</strong></p><p>这种题把握好三个数字即可.</p><p><strong>例题:</strong> 某存储器按字节编址, <strong>虚拟地址空间大小为 16MB</strong>, <strong>主存地址空间大小为1MB</strong>, <strong>页面大小为 4KB</strong>.</p><ul><li><p>虚拟地址共有几位, 哪几位表示页号? 物理地址共有几位, 哪几位表示物理页号?</p><ul><li><p>虚拟地址空间大小为16MB = 2 ^ 24 B, 所以虚拟地址有24位, 因为页面大小为4KB = 2 ^ 12 位, 所以页内地址12位.</p><p>24 - 12 = 12 所以高12位表示页号(虚页号). 因为主存地址空间大小为1MB = 2 ^ 20 位, 所以物理地址有20位, 20 - 12 = 8 所以高8位表示物理页号(页框号).</p></li></ul></li><li><p>虚拟地址010C60H所在的页面是否在主存中? 若在主存中, 则该虚拟地址对应的物理地 址是什么? (页表如下图所示)</p></li><li><table><thead><tr><th><strong>虚页号</strong></th><th><strong>有效位</strong></th><th><strong>页框号</strong></th></tr></thead><tbody><tr><td>0</td><td>1</td><td>06</td></tr><tr><td>1</td><td>1</td><td>04</td></tr><tr><td>2</td><td>1</td><td>15</td></tr><tr><td>3</td><td>1</td><td>02</td></tr><tr><td>4</td><td>0</td><td>-</td></tr><tr><td>5</td><td>1</td><td>2B</td></tr><tr><td>6</td><td>0</td><td>–</td></tr><tr><td>7</td><td><strong>1</strong></td><td><strong>32</strong></td></tr></tbody></table><ul><li>由第一问已知虚拟地址010C60H的低12位C60H为页内地址, 高12位010H为页号, <strong>查询表格发现虚页号为2(010视为二进制则表示十进制的2)的有效位是1</strong>, 所以已经存入主存中, <strong>对应页框号是15H</strong>, 所以<strong>对应的物理地址是15C60H</strong>.</li></ul></li></ul><h4 id="5-中断和-I-O系统">5.中断和 I/O系统</h4><p>CPI 为5(即执行每条指令平均需5个时钟周期). 在做I/O系统的题时要注意, 这里的1M与1B的换算关系是1M = 1000KB = 10^6B .</p><p><strong>例题:</strong> 某计算机的 <strong>CPU 主频为 400MHz</strong>, <strong>CPI 为 5</strong>. 假设某<strong>外设的数据传输率为 0.5MB/s</strong>, 采用中断方式与主机进行数据传送, <strong>以 32 位为传输单位</strong>, 对应的<strong>中断服务程序包含 18 条指令, 中断服务的其他开销相当于 2 条指令的执行时间</strong>. 请回答下列问题, 要求给出计算过程.</p><ul><li>在中断方式下, CPU 用于该外设 I/O 的时间占整个CPU时间的百分比是多少?<ul><li><strong>CPU用于外设I/O的时间占整个CPU时间的百分比 = 1秒钟内用于中断的开销 / CPU 主频</strong></li><li><strong>1秒钟内用于中断的开销 = CPU每次用于数据传送的时钟周期数 * 外设每秒申请中断次数</strong></li><li><strong>外设每秒申请中断次数 = 外设的数据传输率 / 传输单位(转化为B)</strong></li><li><strong>CPU每次用于数据传送的时钟周期数 = (中断服务程序 + 中断服务的其他开销) * CPI</strong></li><li>第一问要牢牢记住这4个式子</li><li>本题中: 外设的数据传输率为 0.5MB/s, 以 32 位为传输单位, 32b = 4B, <strong>外设每秒申请的中断次数 = 0.5MB / (4B) = 5 * 10^5 / 4 = 125000</strong>. 中断服务程序包含 18 条指令, 中断服务的其他开销相当于 2 条指令的执行时间, CPI 为5, <strong>CPU每次用于数据传送的时钟周期数 = 5 * (18 + 2) =100</strong>. <strong>1秒钟内用于中断的开销 = 100 * 125000 = 12.5M个时钟周期</strong>. CPU 主频为 400MHz, <strong>CPU 用于该外设 I/O 的时间占整个CPU时间的百分比 = 12.5M / 400MHz = 3.125%</strong>.</li></ul></li><li>当该外设的数据传输率达到 5MB/s 时, 改用 DMA 方式传送数据. 假定每次 DMA 传送块大小为 5000B, 且 DMA 预处理和后处理的总开销为 500 个时钟周期, 则 CPU 用于该外设 I/O 的时间占整个 CPU 时间的百分比是多少? (假设 DMA 与CPU 之间没有访存冲突)<ul><li><strong>CPU用于外设I/O的时间占整个CPU时间的百分比 = CPU用于DMA处理的总开销 / CPU 主频</strong></li><li><strong>CPU用于DMA处理的总开销 = 1秒钟内需产生的DMA次数 * DMA 预处理和后处理的总开销</strong></li><li><strong>1秒钟内需产生的DMA次数 = 外设的数据传输率 / 每次 DMA 传送块大小</strong></li><li>第二问只需要三个式子, 两问的式子大致相同.</li><li>本题中: 该外设的数据传输率达到 5MB/s, 改用 DMA 方式传送数据, 假定每次 DMA 传送块大小为 5000B, <strong>1秒钟内需产生的DMA次数 = 5MB / 5000B = 1000</strong>. DMA 预处理和后处理的总开销为 500 个时钟周期, <strong>CPU用于DMA处理的总开销 = 1000 * 500 = 0.5M个时钟周期</strong>. <strong>CPU用于外设I/O的时间占整个CPU时间的百分比 = 0.5M / 400MHz</strong>.</li></ul></li></ul><h4 id="6-指令系统">6.指令系统</h4><p>这道题能领悟多少全看造化…</p><p><strong>例题:</strong> 某计算机字长为16位, 主存地址空间大小为128KB, 按字编址. 采用字长指令格式, 指令名字段定义如下:</p><table><thead><tr><th>OP(4位)</th><th>Ms(3位)</th><th>Rs(3位)</th><th>Md(3位)</th><th>Rd(3位)</th></tr></thead><tbody><tr><td>操作码</td><td>源操作数寻址方式</td><td>源寄存器</td><td>目的操作数寻址方式</td><td>目的寄存器</td></tr></tbody></table><p>转移指令采用相对寻址, 相对偏移用补码表示, 寻址方式定义如下:</p><table><thead><tr><th>Ms/Md</th><th>寻址方式</th><th>助记符</th><th>含义</th></tr></thead><tbody><tr><td>000B</td><td>寄存器直接</td><td>Rn</td><td>操作数=(Rn)</td></tr><tr><td>001B</td><td>寄存器间接</td><td>(Rn)</td><td>操作数=（（Rn））</td></tr><tr><td>010B</td><td>寄存器间接、自增</td><td>(Rn)+</td><td>操作数=((Rn))， (Rn)+1-&gt;Rn</td></tr><tr><td>011B</td><td>相对</td><td>D(Rn)</td><td>转移目标地址=(PC)+(Rn)</td></tr></tbody></table><p>注: (X)表示有存储地址X或寄存器X的内容, 请回答下列问题:</p><ul><li>该指令系统最多可有多少指令? 该计算机最多有多少个通用寄存器? 存储地址寄存器(MAR)和存储数据寄存器(MDR)至少各需多少位?<ul><li><strong>指令数 = 2^OP位数</strong> OP表示操作码, 操作码有4位, 则该指令系统最多可有2 ^ 4 = 16条指令.</li><li><strong>通用寄存器数量 = 2^寄存器位数</strong> 寄存器有3位, 则寄存器最多有2 ^ 3 = 8个寄存器.</li><li><strong>MDR的位数等于计算机的字长</strong> 计算机字长为16位, 所以MDR最少需要16位.</li><li><strong>MAR的位数 = log 2 (主存地址空间大小 / 计算机字长(单位转化为B))</strong> 主存地址空间大小为128KB, 计算机字长16位 = 2B, 128KB / 2B = 2^16, 所以至少需要16位的MAR.</li></ul></li><li>若<strong>操作码 0001B</strong> 表示加法操作(助记符为 add), <strong>寄存器R4和R5 的编号分别为100B和101B</strong>, <strong>R4 的内容为 1234H, R5 的内容为 5678H</strong>, <strong>地址1234H中的内容为 5678H, 地址5678H中的内容为 1234H</strong>, 则汇编语句 “add (R4), (R5)+” (逗号前为源操作数, <strong>逗号后为目的操作数</strong>)对应的机器码是什么(用十六进制表示)? 该指令执行后, 哪些寄存器和存储单元的内容会改变? 改变后的内容是什么?<ul><li><strong>对应的机器码 = 操作码 + R4的寻址方式位 + R4的编号二进制表示 + R5的寻址方式位 + R5的编号二进制表示</strong> 本题中: 操作码给出: 0001B, R4和R5的寻址方式位分别为001B和010B, R4和R5的编号分别为4和5, 所以语句 “add (R4), (R5)+”对应的机器码<strong>二进制表示 = 0001001100010101B, 转化为十六进制 = 1315H</strong></li><li>因为R4和R5对应的寻址方式是寄存器间接寻址, 语句 “add (R4), (R5)+”的意思是将(R4)和(R5)指向的内容相加并放到目的操作数中, 然后R5的内容自增, 目的操作数是R5, R4 = 1234H, (1234H) = 5678H. R5 = 5678H, (5678H) = 1234H. 1234H + 5678H = 68ACH. 指令执行后, R5和存储单元5678H的内容会改变, R5变为5679H, 存储单元5678H的内容变为68ACH.</li></ul></li></ul><p><strong>参考链接:</strong></p><p><a href="https://www.nowcoder.com/questionTerminal/8a3ee54ce98d4dcfafab715e06fee7b2?toCommentId=1753303">题目来源于王道论坛 某计算机字长为16位，主存地址空间__牛客网 (nowcoder.com)</a></p><p><a href="https://www.bilibili.com/video/BV1Fy4y1p7k8?spm_id_from=333.337.search-card.all.click&amp;vd_source=4c641295e18917e9d2cad4d846182614">指令执行大题：寄存器间接寻址+执行过程（王道计组）_哔哩哔哩_bilibili</a><a href="https://www.bilibili.com/video/BV1Fy4y1p7k8?spm_id_from=333.337.search-card.all.click&amp;vd_source=4c641295e18917e9d2cad4d846182614">https://www.bilibili.com/video/BV1Fy4y1p7k8?spm_id_from=333.337.search-card.all.click&amp;vd_source=4c641295e18917e9d2cad4d846182614</a>)</p><h3 id="二-计算题">二 计算题</h3><h4 id="1-计算机性能">1.计算机性能</h4><p>1G = 10^3M = 10^6KB = 10^9B</p><p><strong>例题:</strong> 某<strong>计算机主频为1.5GHz</strong>，其指令分为 4 类，它们在基准程序中所占比例及 CPI 如下表所示。求出该机的 MIPS。</p><table><thead><tr><th>指令类型</th><th>所占比例</th><th>CPI</th></tr></thead><tbody><tr><td>A</td><td>50%</td><td>2</td></tr><tr><td>B</td><td>20%</td><td>3</td></tr><tr><td>C</td><td>10%</td><td>4</td></tr><tr><td>D</td><td>20%</td><td>5</td></tr></tbody></table><ul><li><strong>MIPS = 计算机主频(换算成M) / 平均CPI(将不同CPI × 对应比例并汇总求和)</strong></li><li>本题中: MIPS = 1500 M / (2 * 0.5 + 3 * 0.2 + 4 * 0.1 + 5 * 0.2) = 500</li></ul><h4 id="2-计算总线带宽">2.计算总线带宽</h4><p><strong>例题:</strong> 设<strong>总线的时钟频率为 8MHz</strong>, <strong>一个总线周期等于两个时钟周期</strong>. 如果<strong>一个总线周期中并行传送 32 位数据</strong>, 则计算总线宽度和总线的带宽各是多少?</p><ul><li><strong>总线宽度 = 总线位宽 = 一个总线周期中并行传送多少位数据</strong></li><li><strong>总线的传输速率 = 总线带宽 = (总线位宽 / 8位) * (总线工作频率 / 总线周期时钟数). 通常单位: MB / s (MBps)</strong></li><li>本题中: 总线宽度 = 32位 = 4B. 总线的时钟频率为 8MHz, 一个总线周期等于两个时钟周期, 总线带宽 = 4B * (8 MHZ / 2) = 16MB / s.</li></ul><h4 id="3-计算CRC码">3.计算CRC码</h4><p><strong>例题:</strong> 有一个 (7, 4) 码 (即<strong>CRC码为7位</strong>, <strong>信息码为4位</strong>), 已确定<strong>生成多项式为: 1011</strong>. <strong>被传输的信息C(x) = 1000</strong>, 求C (x) 的CRC码 (写出具体步骤).</p><ul><li>CRC码很简单, 先看被传输的信息是否满足n位(也即CRC码的位数), 如果不满足就在后面补零. 然后用得到的n位CRC码 (这里是1000 000) 去除所确定的多项式, 这里是1011, 最后所得的余数取n - m (m是被传输的信息的位数) 位补在被传输的信息后面即可. 注意, 这里的<strong>除</strong>其实是逐位异或的意思, 只是形式上很像除法.</li><li>本题中: 被传输的信息C(x) = 1000, CRC码为7位, 可暂得CRC码1000000, 然后如图所示可得余数101, 最终所得CRC码即为: 1000101</li></ul><p><img src="https://img-blog.csdnimg.cn/1acc1ebdc0d449a7bb8794ff18324117.png" alt=""></p><h4 id="4-海明码">4.海明码</h4><p><strong>参考链接:</strong></p><p>看明白什么是海明码: <a href="https://blog.csdn.net/konley233/article/details/108134466">可能是最详细的海明校验码（汉明码）解法_1橘猫的博客-CSDN博客_海明校验码例题</a></p><p>两种题型怎么做: <a href="https://www.bilibili.com/video/BV1P3411v7gd?p=2&amp;vd_source=4c641295e18917e9d2cad4d846182614">计算机组成原理速成、不挂科、搞定期末考试大题（横屏版）_哔哩哔哩_bilibili</a></p><p>注意: 第一个链接所给出的海明码求法是将校验位从后向前插入的, 当然从前面还是后面开始都可以, 但是大部分题目都是从前向后插入, 所以习惯上最好也是从前向后插入.</p><p><strong>例题: 已知八位数据11001100采用4位校验位, 偶校验方式, 求出海明校验码. (总结海明校验码具体步骤).</strong></p><ul><li>做法在上方链接, 讲的很好, 这里只给出答案.<br><img src="https://img-blog.csdnimg.cn/64a7c6ce7d9140e2aa7d0982c3dfd795.png" alt=""></li></ul><h4 id="5-IEEE754浮点数">5.IEEE754浮点数</h4><p>知识点涉及面比较广, 但是只要求会做题的话很简单.</p><p><strong>例题:</strong> 已知<strong>x = 8.25</strong>, 求IEEE754单精度浮点数格式<strong>机器数十六进制</strong>表示形式(写出具体步骤).</p><ul><li><p>机器数就是一个数在计算机中的二进制表示.</p></li><li><p>这种题就是要我们将一个十进制的数转化成一个32位的二进制数, 至于十六进制和八进制都是在二进制的基础上处理一下结果.</p></li><li><p>32位的二进制数由三部分组成: <strong>1位的符号位, 8位的阶码, 23位的尾数码</strong>组成. 不用管这些名词, 只要记住位数和怎么求就可以了.</p></li><li><p><strong>符号位看给定的数是正还是负, 0正1负.</strong></p></li><li><p><strong>将所给的数转化成二进制后, 再转化成1.xxx的形式</strong>, 例如8.25 = 1000.01B = 1.00001 * 2^3 B.</p></li><li><p><strong>2的幂 + 127再转化为二进制就是我们要求的阶码</strong>, 不足8位在前面补零. <strong>所得到的1.00001小数点后面的00001就是尾数码</strong>, 不足23位就在后面补零. (不要管为什么加127, 记住就行了).</p></li><li><p>本题中: x = 8.25 = (1000.01)B = ( 1.000 01×2^3 )B, E(阶码) = e(我们得到的3) + 127 = 130 = (1000 0010 )B，</p><p>单精度浮点数格式: 1位数符, 8位阶码 (含阶符), 23位尾数. 故IEEE 754单精度浮点数表示为:</p><p>0 1000 0010 000 0100 0000 0000 0000 0000 即0100 0001 0000 0100 0000 0000 0000 0000 即41040000H</p></li></ul><p><strong>参考连接：</strong></p><p><a href="https://www.bilibili.com/video/BV1i54y1y7Fn?spm_id_from=333.337.search-card.all.click&amp;vd_source=4c641295e18917e9d2cad4d846182614">【计算机组成原理】十进制转IEEE754单精度浮点数格式_哔哩哔哩_bilibili</a></p><p><a href="https://www.bilibili.com/video/BV1tK411P7nh?spm_id_from=333.337.search-card.all.click&amp;vd_source=4c641295e18917e9d2cad4d846182614">【计算机组成原理】IEEE754单精度浮点数转十进制_哔哩哔哩_bilibili</a></p><h4 id="6-流水线的基本运算和流水线的相关性处理">6.流水线的基本运算和流水线的相关性处理</h4><p><strong>单位换算:</strong></p><ul><li>1s = 1* 10^3 ms = 1 * 10^6 μs = 1 * 10^9 ns. 1G = 1 * 10^3 MB = 1 * 10^6 KB = 1 * 10^9 B</li></ul><p><strong>明确公式:</strong></p><ul><li>CPU时钟周期为△t, m阶指令流水线, 连续处理n条指令</li><li><strong>吞吐率: TP = n / ((m + n − 1) ∗ △t) 加速比: Sp = (n * m * △t) / ((m + n - 1) * △t)</strong></li><li><strong>CPU时钟频率(主频) = 1 / 时钟周期</strong></li><li>执行<strong>n条指令需要m + ( n − 1 )个时钟周期</strong></li></ul><p><strong>例题:</strong> 计算机采用 <strong>5 段流水方式</strong>, 每段执行需<strong>1个时钟周期T</strong>, 若连续执行 <strong>30 条指令</strong>, 则流水线所需的时钟周期数是多少? 求出流水线的加速比Sp和吞吐率 TP(写出简要步骤).</p><ul><li>m段流水方式 = m级指令流水线.</li><li>本题中: 时钟周期数 = (5 + 30 - 1) * T = 34T. TP = 30 / ((5 + 30 - 1) * T) = 17 / (15 * T). Sp = (5 * 30 * T) / (34 * T) = 75 / 17.</li></ul><p><strong>参考链接:</strong> <a href="https://blog.csdn.net/qq_44780229/article/details/105726824">(5条消息) 流水线性能吞吐率、加速比、效率计算_海绵泡泡~的博客-CSDN博客_流水线吞吐率加速比</a></p><h4 id="7-Cache命中率问题">7.Cache命中率问题</h4><p><strong>例题:</strong> 假设CPU执行某段程序时, <strong>共访问Cache命中950次</strong>, <strong>访问主存50次</strong>. <strong>Cache的存取周期为50ns</strong>, <strong>主存的存取周期为300ns</strong>. 求Cache - 主存系统的命中率, 平均访问时间和效率.</p><ul><li><strong>命中率 = (共访问Cache命中次数 / (共访问Cache命中次数 + 访问主存次数) ) * 100%.</strong></li><li><strong>平均访问时间 = 命中率 * Cache的存取周期 + (1 - 命中率) * 主存的存取周期.</strong></li><li><strong>效率 = Cache的存取周期为50ns / 平均访问时间.</strong></li><li><strong>性能提高 = (主存的存取周期 / 平均访问时间) - 1.</strong></li><li>本题中: 命中率 = 950 / (950 + 50) * 100% = 95% 平均访问时间 = 0.95 * 50 + 0.05 * 300 = 62.5 效率 = 50 / 62.5 = 80% 性能提高 = 300 / 62.5 - 1 = 4.8 - 1 = 3.8 倍</li></ul><h4 id="8-机器数的最大值最小值">8.机器数的最大值最小值</h4><p>基础知识点.</p><p><strong>例题:</strong> 设机器字长为n = 8位(其中１位为符号位), 求出对于整数, 当机器数分别代表无符号数, 原码, 补码和反码时, 对应真值的最大值和最小值为多少?(先写机器数, 再求真值).</p><ul><li><table><thead><tr><th></th><th>无符号数</th><th>原码</th><th>补码</th><th>反码</th></tr></thead><tbody><tr><td>最大值机器数</td><td>1,1111111</td><td>0,1111111</td><td>0,1111111</td><td>0,1111111</td></tr><tr><td>最大值真值</td><td>255</td><td>127</td><td>127</td><td>127</td></tr><tr><td>最小值机器数</td><td>0,0000000</td><td>1,1111111</td><td>1,0000000</td><td>1,0000000</td></tr><tr><td>最小值真值</td><td>0</td><td>-127</td><td>-128</td><td>-127</td></tr></tbody></table></li><li><p>说明一下 -128, -128是由反码1, 1111111 + 1得到的, 他的原码是1, 0000000, 显然这是 -0, 而 -0是没有意义的, 所以就拿来给 -128用了.</p></li></ul><h3 id="一-简答题">一 简答题</h3><h4 id="名词解释-总线带宽-总线宽度-总线工作频率-总线复用">名词解释: 总线带宽, 总线宽度, 总线工作频率, 总线复用.</h4><ul><li><strong>总线宽度: 通常指数据总线的根数.</strong></li><li><strong>总线带宽: 总线的数据传输率, 指单位时间内总线上传输数据的位数;</strong></li><li><strong>总线频率: 指总线信号的时钟频率(工作频率)</strong></li><li>总线复用: 指同一条信号线可以分时传输不同的信号.</li></ul><h4 id="计算机中引入Cache-主存和主-辅存层次的目的分别是什么？Cache-主存层次常用的地址映像方法和替换算法分别是什么？">计算机中引入Cache-主存和主-辅存层次的目的分别是什么？Cache-主存层次常用的地址映像方法和替换算法分别是什么？</h4><ul><li><strong>Cache(高速缓冲存储器)是为了解决主存与CPU的速度差异而采用的技术, 引入主-辅存层次的目的是弥补主存容量不足.</strong></li><li><strong>Cache-主存层次常用的地址映像方法是组相联映像, 替换算法是LRU替换算法.</strong></li></ul><h4 id="主存单元的地址分配-大端-小端-按整数边界存放">主存单元的地址分配: 大端, 小端; 按整数边界存放</h4><ul><li><strong>大端模式: 是指将数据的低位(比如 1234 中的 34 就是低位)放在内存的高地址上, 而数据的高位(比如 1234 中的 12 就是高位)放在内存的低地址上.</strong></li><li><strong>小端模式: 是指将数据的低位放在内存的低地址上, 而数据的高位放在内存的高地址上. 这种存储模式将地址的高低和数据的大小结合起来, 高地址存放数值较大的部分, 低地址存放数值较小的部分, 这和我们的思维习惯是一致, 比较容易理解.</strong></li></ul><h4 id="总结SRAM和DRAM的区别">总结SRAM和DRAM的区别.</h4><ul><li><strong>SRAM: 读写速度快, 生产成本高, 多用于容量较小的高速缓冲存储器.</strong></li><li><strong>DRAM: 读写速度较慢, 集成度高, 生产成本低, 多用于容量较大的主存储器.</strong></li></ul><h4 id="动态半导体存储器-DRAM-为什么要刷新-如何刷新-主要包含哪三种刷新方式">动态半导体存储器(DRAM)为什么要刷新? 如何刷新?主要包含哪三种刷新方式?</h4><ul><li><strong>因为动态存储器信息的存储是靠充电电容存储的, 电荷会慢慢泄漏, 所以要经常性, 周期性地充电, 这就是刷新.</strong></li><li><strong>读出的过程就是刷新的过程.</strong></li><li><strong>三种刷新方式: 集中刷新, 分散刷新, 异步刷新.</strong></li></ul><h4 id="分辨率和灰度级">分辨率和灰度级.</h4><ul><li><strong>分辨率是显示器所能显示的像素个数, 屏幕上的每一个光点就是一个像素. 以宽, 高的像素表示, 例如800 * 600 等. 像素越密, 分辨率越高, 图像越清晰.</strong></li><li><strong>灰度级: 灰度级是指黑白显示器中所显示的像素点的亮暗差别, 在彩色此案时期中测表现为颜色的不同, 灰度级越多, 图像层次越清楚逼真.</strong></li></ul><h4 id="计算机内部如何判断补码加-减运算的结果是否发生溢出">计算机内部如何判断补码加/减运算的结果是否发生溢出?</h4><ul><li><strong>双符号位, 最高位进位, 符号相同操作数的运算后与原操作数的符号不同则溢出.</strong></li></ul><h4 id="浮点数加减运算的步骤有哪些">浮点数加减运算的步骤有哪些?</h4><ul><li><strong>1.对阶. 2.尾数求和. 3.规格化. 4.舍入. 5.溢出判断.</strong></li></ul><h4 id="两个浮点规格化数相乘-是否可能需要右规-为什么-是否可能需要左规-为什么-其规格化次数可否确定">两个浮点规格化数相乘, 是否可能需要右规? 为什么? 是否可能需要左规? 为什么? 其规格化次数可否确定?</h4><ul><li><strong>两个浮点规格化数相乘, 不可能需要右规. 可能需要左规, 因为规格化的尾数是纯小数, 两个纯小数相乘不会得到整数, 但会变得更小.</strong></li><li><strong>左规最多只需一次.</strong></li></ul><h4 id="简述微程序的基本思想">简述微程序的基本思想.</h4><ul><li><strong>一条微指令包含若干微命令, 控制一步操作; 一段微程序包含若干微指令, 解释执行一条机器指令; 微程序事先存放在控存中.</strong></li></ul><h4 id="影响指令流水线性能的因素有哪三个">影响指令流水线性能的因素有哪三个?</h4><ul><li>1.结构相关. 2.数据相关. 3.控制相关.</li></ul><h4 id="简述串行总线和并行总线的特点-现代计算机主要采用什么类型的总线">简述串行总线和并行总线的特点. 现代计算机主要采用什么类型的总线.</h4><ul><li>串行总线数据传输时, 数据是一位一位地在通信线上传输的; 并行总线数据传输时有多个数据位同时在两个设备之间传输.</li><li>串行方式.</li></ul><h3 id="补充：">补充：</h3><p><strong>ps：</strong> 截止2022.9.5，链接已失效，可联系站长邮箱获取文件。</p><p><strong>真题：</strong></p><p><a href="http://rczkr10rm.hn-bkt.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%2F2019-2020-02%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E3%80%8B%E8%AF%95%E9%A2%98a(%E8%AE%A1%E7%A7%91181-3).docx">http://rczkr10rm.hn-bkt.clouddn.com/hexo博客%2F2019-2020-02《计算机组成原理》试题a(计科181-3).docx</a></p><p><strong>答案：</strong></p><p><a href="http://rczkr10rm.hn-bkt.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%2F%E8%AF%95%E9%A2%98A(%E8%AE%A1%E7%A7%91181-3)%E7%AD%94%E6%A1%88.docx">http://rczkr10rm.hn-bkt.clouddn.com/hexo博客%2F试题A(计科181-3)答案.docx</a></p><p><strong>复习提纲：</strong></p><p><a href="http://rczkr10rm.hn-bkt.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%2F%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0.docx">http://rczkr10rm.hn-bkt.clouddn.com/hexo博客%2F计组复习.docx</a></p>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】Lake Counting</title>
      <link href="/posts/e01f19e4.html"/>
      <url>/posts/e01f19e4.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-Lake-Counting-《20级计科ACM程序设计》–搜索入门-Virtual-Judge-sdtbu-edu-cn">题目: [Lake Counting](<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2492#problem/A">《20级计科ACM程序设计》–搜索入门 - Virtual Judge (sdtbu.edu.cn)</a>)</h4><h4 id="题意">题意:</h4><p>给一个字符二维图. 每个W代表一个水池, 每个水池可以和它周围八个格子中的水池连通, 问最后最少有多少水池.</p><h4 id="思路">思路:</h4><ul><li>裸BFS, 注意一下队列中存pair, 也就是坐标.</li><li>遍历一下每个未标记的池子是不是可以和别的池子合并, 可以的话就把所有已经合并的池子标记一下就行了.</li><li>遍历每个池子的周围时可以提前用两个数组记录周围格子与当前格子的坐标差值, 写起来更方便.</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token keyword">char</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">PII</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> a1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> a2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> xx <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">,</span> yy <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b1 <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>b1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b2 <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>b2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> c1 <span class="token operator">=</span> xx <span class="token operator">+</span> a1<span class="token punctuation">[</span>b1<span class="token punctuation">]</span><span class="token punctuation">,</span> c2 <span class="token operator">=</span> yy <span class="token operator">+</span> a2<span class="token punctuation">[</span>b2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">[</span>c2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'W'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">[</span>c2<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">PII</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">[</span>c2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'W'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>res<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】Prime Path</title>
      <link href="/posts/f4ca8236.html"/>
      <url>/posts/f4ca8236.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-Prime-Path-《20级计科ACM程序设计》–搜索入门-Virtual-Judge-sdtbu-edu-cn">题目: [Prime Path](<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2492#problem/B">《20级计科ACM程序设计》–搜索入门 - Virtual Judge (sdtbu.edu.cn)</a>)</h4><h4 id="题意">题意:</h4><p>给两个4位素数n, m. 每次可以改变n的4个位置中的某个数, 问最少几次可以得到m.</p><h4 id="思路">思路:</h4><ul><li>依然是裸BFS, 注意一下队列中存pair, second是当前走了几步.</li><li>需要提前将所有4位素数筛选出来.</li><li>还有一种做法: 可以遍历队列中每个数的4个位置的9种可能, 但是因为涉及到int转string, 写起来比较麻烦, 还要特判第一位不能为0.</li><li><s>纯路人, 这人写的代码真优雅</s>~</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token comment">//存1000-9999的素数</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span><span class="token comment">//欧拉筛法, 找到所有4位的素数, 存在p数组中</span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> p1<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9999</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>p1<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">1000</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;=</span> <span class="token number">9999</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>p1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> p1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cherk</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//逐位比较, 只要有三个数字位置大小均相同, 那么就代表符合条件</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&amp;&amp;</span> b<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> b <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//cout &lt;&lt; a % 10 &lt;&lt; " " &lt;&lt; b % 10 &lt;&lt; endl;</span>a <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> k <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token comment">//n是初始素数, m是最终素数. second记录走了多少步, 初始为0.</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">PII</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">bool</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>PII t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>first <span class="token operator">==</span> m<span class="token punctuation">)</span><span class="token keyword">return</span> t<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//检查第i个素数是否从未入队并且可以只改变一个字符得到</span><span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cherk</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">PII</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for (int i = 0; i &lt; p.size(); ++i) cout &lt;&lt; p[i] &lt;&lt; " ";</span><span class="token keyword">int</span> t<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">BFS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl <span class="token operator">:</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"Impossible"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>省赛过程与队伍总结</title>
      <link href="/posts/d704.html"/>
      <url>/posts/d704.html</url>
      
        <content type="html"><![CDATA[<h3 id="省赛过程与总结">省赛过程与总结</h3><hr><h4 id="day01">day01</h4><ul><li><strong>出发</strong> ：比赛前一天早上（6.2）定的是 5:30 的闹钟，但是迷迷糊糊中自己就醒了，看了眼闹钟 4:50 多一点，在床上躺了会儿不知道睡没睡着，闹铃响的一瞬间就把闹铃关了（还好没把舍友吵醒）。洗漱的时候遇到了 <code>TSK</code> ，关于要不要洗头这件事他听了我的意见，我想着怎么也得比完赛再拍就劝他不用洗，另一个理由是烟台的天气早上洗头容易感冒。结果今天真的拍照了（还好我前一天晚上洗了澡哈哈）。下楼蹭了 <code>Xiao</code> 老板的车去了南门，在门口的西校超市买了点面包和奶就去烟台南站了。<ul><li>不过即使现在我的观点还是不洗头，烟台早上的温度太低，很容易感冒。</li></ul></li><li><strong>热省赛</strong> ：中午到了济南，先在酒店放下东西，随后就与 <code>Mao</code> 老师、<code>Xiao</code> 老师一同去了齐鲁工大。不得不说真的很大（没见过世面的样子），吃完齐鲁工大提供的午饭，匆匆换了衣服就跟着同行的队友去了礼堂。开幕会结束后直接去了实验楼准备热身赛，打热身赛的时候就两点感受：1. 电脑真好用。2. 键盘真难用。做题的时候 A、B、C 三个题没有悬念直接 <code>AC</code> 了，D 题有些坎坷，<code>tsk</code> 上来一眼二分，我不明觉厉，看了一会感觉确实厉害，心想果然就是二分。结果 <code>TSK</code> 怎么也改不对，<code>XYH</code> 又看了看题面觉得好像是个简单题，不用二分，于是 <code>XYH</code> 换下 <code>TSK</code> 开始敲，我看了会儿他的代码理解了他的思路，然后发现 <code>XYH</code> 的代码后面判断条件的时候有些疏漏，我就拿过键盘开始改 <code>XYH</code> 没交上的代码，结果还是怎么也交不上。<ul><li>从这就能看出，我们三个人的磨合真的太差了，完全是谁有思路谁就直接上，或者一份代码直接换人改。</li><li>这里还有个小插曲，我们三人一开始不会提交代码，把代码直接交评论区了hhh，被监考员在评论区警告好几次，我们刚开始还没看懂，又交了几次，后面才知道原来是交错地方了-_-||。</li></ul></li><li>比完热身赛我一直在想 D 题，因为感觉所有情况都考虑了，拍完照去吃饭的路上遇到 <code>LY</code> 他们，问了问 <code>LY</code> 他们是怎么做的，感觉没毛病啊，然后看了看他们的代码，真的是一模一样，可能自己的那份代码当局者迷了。<ul><li>二分埋下伏笔。</li></ul></li><li>回到酒店洗了个澡，想着投屏看会电影，再复习会儿题目就睡了，早睡早起。结果酒店的 <code>WiFi</code> 超卡，卡到本来 10 点多就看完的电影看到 11 点多，和 <code>TSK</code> 讨论了一会儿几道算法就睡了。迷迷糊糊中感觉 <code>TSK</code> 好像起床了，我以为已经早上了，结果才 4 点多。到了早上去地铁站才知道原来他 3 点多就醒了睡不着，在看线段树。<ul><li>休息真的太重要了，现在不比中学时代或者大一了，那时候通宵第二天反而更加精神（还记得高数从零开始，通宵学一晚直接去考试），现在熬夜直接眼睛疼，更遑论通宵。这可能也与我的一点小炎症有关，一熬夜就状态极差。</li></ul></li></ul><h4 id="day02">day02</h4><ul><li>6:30 被闹钟惊醒，但是早上 6 点多点其实迷迷糊糊的就醒了，报复性赖床了一小会儿，洗漱完收拾东西就去酒店一楼吃早饭了，不得不提的是酒店的早饭真的很香，那个酸辣土豆丝和油条勾起了我小时候的回忆，不知道是不是有独家秘方。吃完饭随大部队去地铁站，路上得知 <code>TSK</code> 早上 3 点多就醒了，这时我隐隐感觉不妙，去之前我们一直想的是这次争取个金牌，即便不能，银牌也很满足，但是从昨天开始就有很多小事提醒我们三个事情没那么顺利：比如 <code>TSK</code> 注册地铁的时候颇为麻烦、 <code>XYH</code> 在地铁出入口总是人脸识别失败、<code>TSK</code> 的眼镜被自己慌乱之中一脚踩歪、酒店 <code>WiFi</code> 很卡、热身赛 D 题怎么也不对等等。</li><li>到了齐鲁工大简单准备了一下就开始比赛了，赛方发了两份中文题面，一份英文题面，不用被题面折磨的感觉真的很棒。诚然英语对于编程而言真的很重要，但是归根结底只是在编程这方面，英文社区环境更好，如果中文也有这样的社区底蕴，甚至编程用的就是中文呢（也许这有些异想天开，而且从简洁性上看似乎英文确实更适合编程？），我的个人观点是比赛应该比的是思维与代码能力，而不是英文水平，跑题了……，</li><li><strong>比赛开始</strong> ：<ul><li>我看了一眼 A 题，推导出一个式子后感觉这题应该就是签到题，遂没和队友讨论，直接上场开敲。码完代码有点不太敢交，感觉敲得太快了也没和队友讨论思路，不知道对不对，应该再检查一下（从后面的经历来看我的担心不是没有道理），在队友鼓励下直接交了，顺利 A 掉。</li><li>在我敲 A 的时候 <code>TSK</code> 和 <code>XYH</code> 在看 I 题，看他们的样子好像没问题，我就去看 G 了，看了一会儿看到得知他们已经把 I 交上去了，心想不愧是我的好队友。</li><li>然后我就与 <code>XYH</code> 讨论 G 题， <code>TSK</code> 去看 D 题，和  <code>XYH</code> 讨论了一会思路感觉没问题，我就直接上机敲了，输出的时候我用了一点 <code>trick</code> ，选择直接输出计算过程中 <code>map</code> 的内容，没有单独把结果放到一个数组中，敲完测试样例的时候出问题了，样例怎么也不对，然后我简单改了一下输出，结果样例对了，测了几个数据也没问题，但是问题在于：按照我的思路，我改的地方不应该对。但是事实似乎就是我改了一个无关紧要的地方，代码反而对了，我不想交，想着再看看，队友鼓励我交一发试试，结果不出意外的 <code>WA</code> 了，于是换 <code>XYH</code> 敲，他敲完刚交上还没出结果时喊了一声：”坏了，<code>map</code> 忘清空了“，闻言我立即一身冷汗，因为我明白问题出哪了，我的那份代码问题就在这，而且不出意外我们队罚时又要加 20 分钟了，果然 <code>WA</code> ，<code>xyh</code> 又改了一下自己的代码还是不对，于是我找出自己的代码，把 <code>map</code> 从全局移到了函数内，别的一字符没改，然后 <code>AC</code> 了，这时候我们看了一下榜单，如果我开始就写对这个细节的话，那么罚时会少 76 分钟，可以让我们进入银牌榜前几名，但是没有如果，因为这个失误我们队想拿银已经没那么简单了，甚至保铜都有难度，因为这三个题真的太水了。</li><li>这之后就是看 D、L、E。<code>TSK</code> 看了会儿 D，感觉是二分 + 贪心，但是因为昨天被二分折磨过，加上他二分了会儿发现好像不用二分也能做，就考虑会不会是一道纯贪心的题目，一起看了一会儿感觉不好做，于是 <code>TSK</code> 又去看 E，我继续看 D，这期间 <code>XYH</code> 看了会儿 L 感觉能做，但是他顾虑到这题可能不好敲，想说一下思路让我俩敲，但是这时候我跟 <code>TSK</code> 都有点没有精力看别的，就让 <code>XYH</code> 直接敲了，我跟 <code>TSK</code> 继续看 D 和 E，事实证明不应该分散注意力的，应该陪 <code>XYH</code> 一起看 L，说不定 L 还能在结束之前交上。最后我们三个看了三道题，这三道题一道也没交上。</li></ul></li><li><strong>比赛结束</strong> ，我们三个都很颓丧，感觉这次比赛彻底打烂了，明明比去年强了怎么还是铜牌呢？我不知道队友在想什么，但是这个问题一直在我脑中盘旋。在礼堂等待滚榜的时候，后面有个济大的队伍在讨论题目，我看了看队友都有些沉默，应该也是没休息好的缘故，于是我也就默默的打开手机里的《我与地坛》开始看，这时候我听到后面有人问另一个人：“你们队第四个签到题怎么做的？”“你说 D 题？就是二分啊，二分完贪心一下就行了”。滚榜的时候主持人很风趣，但是有些不经意的玩笑在这种黯然的时刻，显得格外让人羞愧难当。 <s>也许真的像榜上的队名一样——玩原神玩的？可是我们队没人玩原神啊（笑）</s> 。</li><li><strong>尾声</strong> 。济南之旅就这样结束了，如果说有什么收获就是开拓了一下自己的视野，原来他们这么强，而真的接触到这么强的人后又发现，其实他们普通到自己好像也可以成为这么强的人。犹记大二的时候在自己学校比，那时候省赛拿了一个铜牌高兴的欢天喜地。因为只和自己身边的人比较，所以不觉得自己有多菜，只要略微得到就可以满足。而这次出去之后，切实的差距摆在眼前，才真真正正的打击了我。大一大二的真好，他们以后应该都可以出去比了，只有出去比过，真的经历过，才会明白自己的实力究竟有多蒻。</li></ul><h3 id="关于『样例对了就是对了』">关于『样例对了就是对了』</h3><hr><p>说来惭愧，『样例对了就是对了』这支队伍已经解散重建过五次了。</p><ul><li><strong>故事的开始</strong> ，大一下学期的时候，我和 <code>XHD</code>、<code>WD</code> 组队打了一次比赛，好像昆明站省赛？我不记得了，唯一确定的是打铁。当时的队伍名字已经太过久远，无可考证了。</li><li><strong>随后</strong> <code>WD</code> 退出，我和 <code>XHD</code> 邀请了 <code>XYH</code> 加入，此时队名是 <code>XHD</code> 起的：『小熊特工队』，牛客里我们队伍的头像是三只小熊。谁能想到，此后这支队伍中留下时间最久的竟然是我和 <code>XYH</code> 呢？</li><li><strong>大二上</strong> ，<code>XHD</code> 退役，关于这点我一直觉得很可惜，后来大二下时，他也向我表达过其实很希望能与我们继续打比赛。我和 <code>XYH</code> 邀请 <code>LJF</code> 加入，此时队伍正式确定为：『样例对了就是对了』。</li><li><strong>大二下</strong> ，<code>LJF</code> 退役，队伍里又剩下了我和 <code>XYH</code> ，此时 <code>LYH</code> 师哥找到我们，表示希望与我们一起打 6 月的比赛，我们自然是欣然欢迎。结果打完师哥就退役考研去了。</li><li><strong>故事的结局</strong> ，大二下比完省赛，<code>TSK</code> 找到我，表示希望可以继续组队，我和 <code>XYH</code> 自然也是非常欢迎，按诸葛孔明的说法就是：”我得姜伯约，如得一凤“。 自此，『样例对了就是对了』正式集齐。这有点像海贼王里 <code>Luffy</code> 不断邀请别人成为自己的伙伴，但是区别在于 <code>Ussop</code> 要下船时被拉回来了，而『样例对了就是对了』却是一直在有人离开。和 <code>XYH</code>、<code>TSK</code> 三人正式组队有一年了，却一直没怎么打过组队赛，有时候 <code>XYH</code> 和 <code>TSK</code> 打组队赛时，我还在自己刷 <code>yxc</code> 的算法提高课，结果就是我们三人始终未能找到该有的默契。但是毕竟已经结束了，<code>TSK</code> 之后可能要去专心考研了，我和 <code>XYH</code> 也该准备毕业工作的事情，『样例对了就是对了』磕磕绊绊最后依然是铜牌结尾，些许唏嘘，不过终究都是过去式了，希望师弟们能夺金拿银，不留遗憾吧。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 比赛总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库期末复习</title>
      <link href="/posts/a0e14f5e.html"/>
      <url>/posts/a0e14f5e.html</url>
      
        <content type="html"><![CDATA[<h3 id="一-简答题">一  简答题:</h3><p><u>重点: 第一章(绪论), 第五章(数据库完整性), 第十一章(并发控制)</u></p><h4 id="数据库模型和约束条件"><strong>数据库模型和约束条件:</strong></h4><p><strong>网状模型:</strong></p><ul><li><p>其实就是图</p></li><li><p><img src="https://img-blog.csdnimg.cn/d1772e8765e840a091ab437500645718.png" alt=""></p></li><li><p>约数条件:  插入数据时, 允许插入尚未确定双亲结点值的子女结点值.  删除数据时, 允许只删除双亲结点值. 修改数据时, 可直接表示非树形结构, 而无需像层次模型那样增加冗余结点.</p></li></ul><p><strong>层次模型:</strong></p><ul><li>本质上就是树形结构</li><li><img src="https://img-blog.csdnimg.cn/21657e2bbf2548c9ba543f06be09890c.png" alt="在这里插入图片描述"></li><li>约束条件: 在进行插入操作时，如果没有相应的双亲结点值就不能插入它的子女节点值。在进行删除操作的时候，如果删除双亲结点值，则相应的子女节点值也将被同时删除。</li></ul><h4 id="数据的完整性包括哪三种">数据的完整性包括哪三种?</h4><ul><li>实体完整性</li><li>参照完整性</li><li>用户定义完整性</li></ul><h4 id="事务">事务:</h4><p>用户定义的一个数据操作序列, 这些操作要么全部执行, 要么全部不执行, 是一个不可分割的工作单元.</p><h4 id="并发操作带来的数据不一致性">并发操作带来的数据不一致性:</h4><ul><li>丢失更新: 同时读同一数据并修改.</li><li>读“脏”数据: 读取了未提交事务的数据.</li><li>不可重复读(幻读现象):两次读同一数据不一样, 另一个事务修改了数据. 并发操作破坏了事务的隔离性.</li></ul><h4 id="共享锁-s锁-和排它锁-x锁-的区别">共享锁(s锁)和排它锁(x锁)的区别:</h4><ul><li><p><strong>排它锁又称为写锁, 即X锁, 已有X锁或S锁时, 不能加X锁.</strong></p><ul><li>若事务T对数据对象A加上X锁, 则只允许T读取和修改A, 其它任何事务都不能再对A加任何类型的锁, 直到T释放A上的锁. 这就保证了其它事务在T释放A上的锁之前不能再读取和修改A.</li></ul></li><li><p><strong>共享锁又称为读锁, 即S锁, 只有S锁时, 可加S锁.</strong></p><ul><li>若事务T对数据对象A加上S锁, 则事务T可以读A但不能修改A, 其它事务只能再对A加S锁, 而不能加X锁, 直到T释放A上的S锁. 这就保证了其它事务可以读A, 但在T释放A上的S锁之前不能对A做任何修改.</li></ul></li></ul><h4 id="封锁协议">封锁协议:</h4><p><strong>一级封锁协议:</strong> 事务T在修改数据R之前必须先对其加X锁, 直到事务结束才释放.</p><p>一级封锁协议可防止丢失更新, 并保证事务T是可恢复的.</p><p><strong>二级封锁协议:</strong> 一级封锁协议加上事务T在读取数据R之前必须先对其加S锁, 读完后即可释放S锁.</p><p>二级封锁协议除防止了丢失更新, 还可进一步防止读“脏”数据.</p><p><strong>三级封锁协议是:</strong> 一级封锁协议加上事务T在读取数据R之前必须先对其加S锁, 直到事务结束才释放.</p><p>三级封锁协议除防止了丢失更新和不读‘脏’数据外, 还进一步防止了不可重复读.</p><h4 id="死锁">死锁:</h4><p><strong>概念:</strong>   有两个或两个以上的线程在执行的过程中, 由于竞争的资源或者彼此通信而造成的一种阻塞状态, 若无外力作用, 他们将都无法进行下去, 从而形成一直阻塞的状态叫死锁.</p><p><strong>举例:</strong>  某计算机系统中只有一台打印机和一台输入 设备, 进程P1正占用输入设备, 同时又提出使用打印机的请求, 但此时打印机正被进程P2 所占用, 而P2在未释放打印机之前, 又提出请求使用正被P1占用着的输入设备. 这样两个进程相互无休止地等待下去, 均无法继续执行, 此时两个进程陷入死锁状态.</p><p><strong>预防死锁:</strong> 一次封锁法, 顺序封锁法</p><p><strong>死锁诊断:</strong> 超时法, 事务等待图法</p><h4 id="可串行化调度">可串行化调度:</h4><p>结果正确, 当且仅当其结果与按某一顺序的串行执行的结果相同时, 该策略为可串行化调度策略. 两段锁协议可保证并发调度可串行化.</p><h4 id="两段锁协议">两段锁协议:</h4><p>是指所有的事务必须分两个阶段对数据项加锁和解锁. 即事务分两个阶段, 第一个阶段是获得封锁. 事务可以获得任何数据项上的任何类型的锁, 但是不能释放; 第二阶段是释放封锁, 事务可以释放任何数据项上的任何类型的锁, 但不能申请.</p><p><strong>注意:</strong></p><ul><li>遵循两段锁协议，一定可串行化；可串行化，不一定遵循两段锁协议</li><li>遵循两段锁协议，仍可能发生死锁</li></ul><h3 id="二-分析题">二 分析题:</h3><p><u>重点: 第二章关系代数</u></p><h4 id="运算符总览">运算符总览:</h4><p><img src="https://img-blog.csdnimg.cn/2a3e55dd9f62440b9a65f1e6b06f0dde.png" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/6f4c139f8455469597d5072c998eaa0b.png" alt=""></p><h4 id="集合的并-交-差-笛卡尔积运算">集合的并, 交, 差, 笛卡尔积运算:</h4><p><strong>笛卡尔积:</strong> 将关系R的每一行分别与关系S的每一行直接连接, 不用管相同属性.</p><p><img src="https://img-blog.csdnimg.cn/439ab86e83f64795a97791beb4a72578.png" alt="在这里插入图片描述"></p><h4 id="自然连接">自然连接:</h4><p>将拥有共同属性的行进等值连接, 其余行舍弃.</p><p><img src="https://img-blog.csdnimg.cn/73eac64f94db481b8c2c3d26cf666d16.png" alt="在这里插入图片描述"></p><h4 id="外连接">外连接:</h4><p>保留没有共同属性的行(悬浮元组), 并将缺少的部分用null代替.</p><p><strong>左外连接:</strong> 只保留左边关系表没有共同属性的行.</p><p><strong>右外连接:</strong> 只保留右边关系表没有共同属性的行.</p><h4 id="选择">选择:</h4><p>选择符合条件的某行或者某几行. 注意是<strong>整行.</strong> 记为:  δ 条件 (表名)</p><p><img src="https://img-blog.csdnimg.cn/12abb3f1cc4d4029ab871e7ff2437ac6.png" alt=""></p><h4 id="投影">投影:</h4><p>投<strong>整列</strong>, 注意<strong>去重</strong>(若投影完后有两行完全相同, 只保留一行). 记为: π 列名1, 列名2… (表名)</p><p><img src="https://img-blog.csdnimg.cn/ec3be0799a724d9ca5058c737b122d9d.png" alt="在这里插入图片描述"></p><h4 id="除法">除法:</h4><p><strong>最后保留R包含而S不包含的属性</strong>,  忽视S含有而R不含有的属性.  保留的属性所在行要包含所有共同属性.</p><p><img src="https://img-blog.csdnimg.cn/1c8e57dce4db4cf28ac7d43cc26a3351.png" alt=""></p><h4 id="可串行化调度判断问题">可串行化调度判断问题:</h4><p><strong>可串行化调度:</strong> 多个事务的并发执行是正确的, 当且仅当其结果与按某一次序串行地执行这些事务时的结果相同. 可串行化调度当然也保持数据库的一致状态.</p><p>通常这种题会给我们几个事务的调度, 然后问我们是否是可串行化调度, 并要求给出判断步骤.</p><p>只要我们最后能把给出的调度通过交换事务最后得到一个有序的调度(同一事物的不同操作放在一起), 那么就是可串行化的 (一般题目给的都是可串行化的) .</p><p><strong>什么情况下事务不能交换:</strong> 1. 不同事务的对<strong>同一数据</strong>的操作. 2. 同一事物对<strong>同一数据</strong>的操作.</p><p><strong>什么事务可以交换:</strong> 不同事务对<strong>不同数据</strong>的操作. 同一事物对<strong>不同数据</strong>的操作.</p><p><strong>例题:</strong> 下列是3个事务的一个调度; Sc1=r3(B)r1(A)w3(B)r2(B)r2(A) w2(B)r1(B)w1(A). 请判断该调度是否为可串行化的调度, 请写出判断的步骤.</p><ul><li>是可串行化调度.</li><li>首先交换r1(A)和r3(B), 得到Sc1=r1(A)r3(B)w3(B)r2(B)r2(A) w2(B)r1(B)w1(A).</li><li>然后交换r3(B)w3(B)和r1(B)w1(A), 得到Sc1=r1(A)r1(B)w1(A)r2(B)r2(A) w2(B)r3(B)w3(B).</li><li>等价于一个串行调度T1, T2, T3, 所以是可串行化调度.</li></ul><h3 id="三-设计题">三 设计题:</h3><p><u>重点: 第六章范式, 第七章E-R图</u></p><h4 id="了解范式">了解范式:</h4><p><strong>基本概念:</strong></p><ul><li><strong>候选码:</strong> 如果一个集合可以推出所有的属性, 而它的任意一个真子集无法推出所有属性, 那么它就是候选码. <s>看不懂没事, 看看候选码怎么求的就会了.</s></li><li><strong>主码:</strong> 任意一个候选码都可以当做主码. 在求出候选码后主码是我们自己选择的, 候选码可以有多个, 主码只有一个.</li><li><strong>主属性:</strong> 如果一个属性在某个候选码中出现过, 那么它就被称之为主属性. 注意只要在任意候选码中出现过就可以, 不需要是主码.</li><li><strong>非主属性:</strong> 如果一个属性在任何一个候选码中都没有出现, 那么它就被称之为非主属性.</li><li><strong>全码:</strong> 所有的属性都在候选码中出现过. 也就说所有属性都是主属性.</li><li><strong>码:</strong> 将主码和候选码简称为码.</li><li><strong>决定因素:</strong> 箭头左边的属性. 例如: A→B, 由A能够推出B, A就是决定因素.</li></ul><p><strong>函数依赖:</strong></p><ul><li><strong>完全函数依赖:</strong> (A, B)→C且A和B均无法单独推出C, 则C完全依赖于(A, B).</li><li><strong>部分函数依赖:</strong> (A, B)→C且A→C, 则C部分依赖于(A, B). 简单说就是存在非主属性只用主码的一部分就可以推出来.</li><li><strong>传递函数依赖:</strong> A→B &amp; B→C, 如果通过A属性 (属性组) 的值, 可以确定唯一的B属性值, 再通过B属性(属性组)的值可以确定唯一C属性的值, 则称 C 传递依赖于 A. 直观来讲就是存在非主属性可以由非主属性推出来.</li></ul><h4 id="四种范式">四种范式:</h4><ul><li><strong>第一范式:</strong> 所有的属性不可再分.</li><li><strong>第二范式:</strong> 在第一范式的基础上, 不存在<strong>非主属性</strong>对码的部分函数依赖.</li><li><strong>第三范式:</strong> 在第二范式的基础上, 不存在<strong>非主属性</strong>对码的传递函数依赖.<ul><li>因为二, 三范式都是针对非主属性的, 所以全码可以直接定位到第三范式.</li></ul></li><li><strong>BCNF范式:</strong> 在第三范式的基础上, 不存在<strong>主属性</strong>对码的部分和传递函数的依赖.<ul><li>判断第三范式是否为BCNF范式: 如果每一个决定因素都<strong>包含候选码</strong>, 那么就是BCNF.</li></ul></li></ul><h4 id="做题流程">做题流程:</h4><ol><li><p><strong>求候选码:</strong><img src="https://img-blog.csdnimg.cn/da5baec3b40d4669ad8ac3b2834ccc7b.png" alt=""></p></li><li><p><strong>依次对照各种范式的条件定位到属于哪种范式.</strong></p></li><li><p><strong>按要求将范式分解到更高级别的范式.</strong></p><ul><li>如果是存在部分函数依赖, 就将引起部分函数依赖的那部分拿出单独建一个表.</li><li>如果是存在传递函数依赖, 就将引起传递函数依赖的那部分拿出单独建一个表.</li></ul></li></ol><h4 id="示例">示例:</h4><p><img src="https://img-blog.csdnimg.cn/289e9efc53f8449585e66b0ffe1ef5cc.png" alt=""></p><p><strong>PS: 下面题目的候选码求的有问题, 应该是C, 主要看做题方法.</strong></p><p><img src="https://img-blog.csdnimg.cn/57b1ace74b17418b917e385b7a319069.png" alt=""></p><h4 id="画E-R图">画E-R图:</h4><ul><li>实体用矩形括起来.</li><li>属性用椭圆括起来.</li><li>关系用菱形括起来.<ul><li>实体间的对应关系要在表上表示出来. 例如: 1对多就要在菱形两边的横线上写1和n.</li></ul></li></ul><h4 id="E-R图转化为关系表">E-R图转化为关系表:</h4><ul><li>首先将所有的实体分别对应一个关系模式.</li><li>1对1的实体关系, 将其中一个实体的主码写到另一个实体的关系模式中. 例如: A和B是1对1的关系, 可以<strong>将A的主码作为普通的码写到B的关系模式中</strong>, B中不用再写A的主码.</li><li>1对多的实体关系: 将1端实体的主码作为外码写到N端实体的关系模式中并注明是外码.</li><li>多对多的实体关系: 新建一个关系模式, 模式名是关系名字, 主码是两侧实体的主码. 不要忘记关系的属性.</li></ul><h3 id="四-编程题">四  编程题:</h3><p><u>重点: 第三章SQL语言</u></p><h4 id="关于建表时数据类型的选择：">关于建表时数据类型的选择：</h4><ul><li>整形: int</li><li>浮点数: float(m, n)</li><li>字符串: varchar(n)  可变长字符串</li><li>时间: datetime / date   存储日期 + 时间 / 日期</li></ul><h4 id="关于什么时候需要加单引号">关于什么时候需要加单引号:</h4><p><strong>整数和浮点数</strong>不需要加, <strong>字符串和日期</strong>类型均需要加单引号</p><h4 id="面向考试SQL语句汇总">面向考试SQL语句汇总:</h4><p><strong>对表的操作</strong>:</p><ul><li><p>建表</p><ul><li><p><code>create table 表名 (</code></p><p><code>列名 类型,</code></p><p><code>列名 类型,</code></p><p><code>primary key(列名, 列名...),  //表示主码</code></p><p><code>foreign key(列名) references 表名 (列名)  //表示外码</code></p><p><code>foreign key(列名) references 表名 (列名)  //一行只能写一个外码</code></p><p><code>)</code></p></li><li><p>除了上面的<code>primary key</code> 和<code>foreign key</code>之外, 还有三个可以直接跟在类型后面的约束条件:</p></li><li><p>not null  //不允许为空.</p></li><li><p>unique  //不允许重复.</p></li><li><p>cherk(条件)  //通常用来指定输入数据的范围, 例如: <code>grade int cherk(grade &gt;= 0 and grade &lt;=100)</code> 或者 <code>sex char(4) cherk(sex = '男' or sex = '女')</code></p></li></ul></li><li><p>删除表</p><ul><li><code>drop table 表名 cascade</code></li></ul></li><li><p>添加列</p><ul><li><code>alter table 表名 add 列名 类型</code></li></ul></li><li><p>删除列</p><ul><li><code>alter table  表名 drop column 列名</code></li></ul></li><li><p>修改列的类型</p><ul><li><code>alter table 表名 alter column 列名 类型</code></li></ul></li></ul><p><strong>对数据的操作</strong>:</p><ul><li><p>添加数据:</p><ul><li><code>insert into 表名 values (,,,)(,,,)(,,,)</code></li></ul></li><li><p>删除数据:</p><ul><li><code>delete from 表名 where 条件</code></li></ul></li><li><p>修改数据:</p><ul><li><code>update 表名 set 变量名 = 数据值 where 条件</code></li><li>把<strong>where和后面的条件去掉</strong>就是修改所有人的某个属性</li></ul></li><li><p>排序:</p><ul><li>排序本质上是对查找到的数据通过比较某个或某几个属性进行排序, 所以要用到selete</li><li><code>selete 列名1, 列名2, 列名3... form 表名 order by 列名2</code>  //order by后只写列名2或者在列名2后加asc, 表示将查找结果按照列名2进行升序排列</li><li><code>selete 列名1, 列名2, 列名3... form 表名 order by 列名2 desc</code> //在列名2后加desc表示将查找结果按照列名2进行降序排列</li><li><code>selete * form 表名 order by 列名1, 列名2 desc</code>  //将整个表按照列名1升序排列, 如果列名1相同则按照列名2降序排列</li></ul></li><li><p>查找数据:</p><ul><li><p>查找数据是最复杂的一种, 这里只列出几个必考的</p></li><li><p>查找名字中带有吴的人的名字: <code>selete 列名1 from 表名 where 列名1 like '%吴%'</code>   // %是匹配任意字符串</p></li><li><p>查找员工名和公司名(分别在员工表和公司表, 两个表的共同列是公司编号): <code>selete 员工表.名字列, 公司表.公司列 from 员工表, 公司表 where 员工表.公司编号 = 公司表.公司编号</code>  //更多的表和两个表一个道理</p></li><li><p>简单举例三张表查询(其实和两张表一样):  有三个表 a b c. c.aid对应a.aid, c.bid对应b.bid对应a.aid, c.bid对应b.bid, 现在要查出a.aname,b.bname,c.value. <code>select a.anme, b.bname, c.value</code> <code>from a,b,c</code> <code>where a.aid = c.aid and b.bid = c.bid</code></p></li><li><p>统计总人数大于2的各班级各性别人数, 列出班级, 性别, 人数:</p></li><li><p><code>select 班级列, sum(case when 性别列 = '男' then 1 else 0 end) as 男生人数, sum(case when 性别列 = '女' then 1 else 0 end) as 女生人数</code></p><p><code>from  班级表</code></p><p><code>group by 班级列</code><br><code>having (count(班级列) &gt; 2);</code></p></li></ul></li></ul><p><strong>视图的建立:</strong></p><ul><li><p>视图的建立和表类似</p></li><li><p><code>create view 视图名 as </code></p><p><code>select 列名1, 列名2, 列名3...</code></p><p><code>form 表名</code></p><p><code>where 条件</code></p><p><code>with check option</code></p></li></ul><h3 id="五-真题链接">五 真题链接:</h3><ol><li><a href="http://rczkr10rm.hn-bkt.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%2F2020-2021-02-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E8%AF%95%E5%8D%B7-%E8%AE%A1%E7%A7%9119-%E4%BA%8E%E6%96%87%E8%8E%89.doc">a卷下载链接</a></li><li><a href="http://rczkr10rm.hn-bkt.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%2F2020-2021-02-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E8%AF%95%E5%8D%B7b--%E4%BA%8E%E6%96%87%E8%8E%89%20.doc">b卷下载链接</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 期末复习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】Is Bigger Smarter?</title>
      <link href="/posts/68ebfa00.html"/>
      <url>/posts/68ebfa00.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接-Is-Bigger-Smarter">题目链接: <a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2491#problem/B">Is Bigger Smarter?</a></h4><h4 id="题意">题意:</h4><p>给定一系列大象的体重和IQ, 对于所有大象求一个序列, 要求序列中大象的体重严格上升, IQ严格下降.</p><h4 id="思路">思路:</h4><p>最长上升子序列变形, 比较基础的动态规划. 容易想到可以先对体重或者IQ排序, 如果是前者就求IQ的最长下降子序列, 如果是后者就求体重的最长上升子序列.</p><p>一个容易忽略的点是sort对pair排序时优先对first上升排序, 如果相同就对second上升排序, 而这里因为如果对体重上升排序, 那么就要求对IQ下降排序, 所以如果直接用sort对pair排序必wrong.</p><h4 id="错误代码">错误代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&amp;&amp;</span> cin <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> x<span class="token punctuation">;</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first <span class="token operator">=</span> y<span class="token punctuation">;</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对体重上升排序</span><span class="token comment">//for (int i = 1; i &lt;= n; ++i)cout &lt;&lt; p[i].first &lt;&lt;" "&lt;&lt;p[i].second.first&lt;&lt;" "&lt;&lt;p[i].second.second &lt;&lt; endl;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//求IQ的最长下降子序列</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> f<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">=</span> i<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>n <span class="token operator">=</span> f<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>res <span class="token operator">=</span> g<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//逆序输出路径</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AC代码：">AC代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PII</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span>pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>a<span class="token punctuation">,</span> pair<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span>first<span class="token punctuation">.</span>second <span class="token operator">==</span> b<span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>first<span class="token punctuation">.</span>first <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>first<span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>first<span class="token punctuation">.</span>second <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>first<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&amp;&amp;</span> cin <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first <span class="token operator">=</span> x<span class="token punctuation">;</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>second <span class="token operator">=</span> y<span class="token punctuation">;</span>p<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for (int i = 1; i &lt;= n; ++i)cout &lt;&lt; p[i].first.first &lt;&lt; " " &lt;&lt; p[i].first.second &lt;&lt; " " &lt;&lt; p[i].second &lt;&lt; endl;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first <span class="token operator">&gt;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">&lt;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>res <span class="token operator">=</span> i<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>res<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>n <span class="token operator">=</span> f<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span>res <span class="token operator">=</span> g<span class="token punctuation">[</span>res<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置博客支持LaTeX公式</title>
      <link href="/posts/496b9a7b.html"/>
      <url>/posts/496b9a7b.html</url>
      
        <content type="html"><![CDATA[<h4 id="前言">前言</h4><blockquote><p>本文适用于</p><p>hexo 6.2.0<br>next 7.8.0<br>node 16.15.0</p></blockquote><h4 id="问题">问题:</h4><p>在本地好好的LaTeX公式部署到博客上后, 无法正常显示.</p><h4 id="原因">原因:</h4><p>hexo默认支持的hexo-renderer-marked渲染器不支持latex公式.</p><h4 id="解决方法">解决方法:</h4><ol><li><p>打开git bash或者用管理员身份打开命令管理器(个人推荐后者), 输入如下命令以卸载hexo-math和hexo-renderer-marked渲染引擎:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm un hexo<span class="token operator">-</span>mathnpm un hexo<span class="token operator">-</span>renderer<span class="token operator">-</span>marked<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>输入如下命令以安装hexo-renderer-pandoc渲染器:</p><p><code>npm i hexo-renderer-pandoc</code></p></li><li><p>输入如下命令以安装mathjax公式引擎:</p><p><code>npm install hexo-filter-mathjax</code></p></li><li><p>修改Blog根目录下的<code>_config.yaml</code>文件, 在文件最后添加如下代码:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mathjax</span><span class="token punctuation">:</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span> none <span class="token comment"># or 'ams' or 'all'</span>  <span class="token key atrule">single_dollars</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># enable single dollar signs as in-line math delimiters</span>  <span class="token key atrule">cjk_width</span><span class="token punctuation">:</span> <span class="token number">0.9</span> <span class="token comment"># relative CJK char width</span>  <span class="token key atrule">normal_width</span><span class="token punctuation">:</span> <span class="token number">0.6</span> <span class="token comment"># relative normal (monospace) width</span>  <span class="token key atrule">append_css</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># add CSS to pages rendered by MathJax</span>  <span class="token key atrule">every_page</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改Blog\themes\next目录下的<code>_config.yaml</code>文件:</p><p>注意，per_page设为true表示对每一篇文章都支持LaTeX公式, 否则需要在文章标题栏中加<code>mathjax: true</code>.</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Math Formulas Render Support</span><span class="token key atrule">math</span><span class="token punctuation">:</span>  <span class="token comment"># Default (true) will load mathjax / katex script on demand.</span>  <span class="token comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span>  <span class="token comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span>  <span class="token key atrule">per_page</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span>  <span class="token key atrule">mathjax</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># See: https://mhchem.github.io/MathJax-mhchem/</span>    <span class="token key atrule">mhchem</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required for full Katex support.</span>  <span class="token key atrule">katex</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment"># See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex</span>    <span class="token key atrule">copy_tex</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装pandoc, 否则在hexo g时会报错: pandoc exited with code null.</p><p>可以去官网下载, 但是不翻墙速度很慢, 同时下到3/4左右会不允许下载, <s>痛的回忆</s>. 所以这里直接给出下载链接:  <a href="http://rczkr10rm.hn-bkt.clouddn.com/hexo%E5%8D%9A%E5%AE%A2%2Fpandoc-2.0.1.1-windows.msi">下载地址</a></p></li><li><p>部署到云端即可.</p><p>如果发现仍然不能正常显示并且per_page已经设置为true, 那就在文章标题栏中加<code>mathjax: true</code>可以解决问题.</p></li></ol><h4 id="ps">ps:</h4><p>这是一个测试公式:<br>$$<br>1+1=2<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 软件安装与环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo-next </tag>
            
            <tag> LaTeX公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新手机到了, 纪念一下</title>
      <link href="/posts/17af7bb2.html"/>
      <url>/posts/17af7bb2.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6d5cf0514e2da658a6d699ef9c3896376039be4d70631875a201dfb8a3dbb73f">ac439700f54d20aeea6b5bc240dbdd3a719300ee5bb49709a8d79712753e75e8e53b181fbed1486baf27105e5ad03e31ca311959db20abe122063a3265fc90c847c83a13a0cf374b2ee57e0a25e76eea38568aaf5ee3cda5101de24d082811d8f6db85bb3624965a29c2c38143a77b3f3beac4af8d1f066d82452842d649359abd936ea5fd9d0c85a980609b45fb16800623965a913bd1c99698aaf5610ee63b998f779be55697c0068017026f75a7c2ef923f467b35dee25b1afc2448df2dafa3ca58a9745e38f6cd99451dfe227d96226471522a4097c75c7b8eb2156eceda594dee39989f8a8ac06973bb5a71c265db7a07da73ab6939a91ca024d846cf0f43943075ec27091a08bf9f78995c87e325fa716ba80dc637cbbef22428a4e4a3fbc1f1ba0167f814cf1fe0e2dc0e0d639e5bbabd955f6760e89f5ba426d93f5ec0a15f3ec549ab8b1389f92918b60dd0a276c4c60c0b88bf6d92cb0c0d733fd0e16e89463dabe0452fa682d6bb2de49b25c9a6b052bad51ff1ddaaedb5f3a31bca7d772f621d348c010aa3e9af7d61b3c1f4788e956ab0049078a3f4472f8ffd285fb024be25df8d492be0a72448da290b334d61c38afb69cbd91d1194b09578677304a0b4abb5af70719240526eeb513e043fa47aaad15be723cf59312419a54c56314dc6e82ae15fbdac475c30551f305ddcccd98c59495618de42f3a88dd94d7ae114ee10ec83a382481db931d7dbe8eb56545b9a755e3ee8eed7f18b9a359d7f6b7c47f1e4d11b5737c9eda7710318726369cf2d8f75bd2bfd42a39f6f4b84167614534c28a2a69436dd73310c550eb38cb04367eb87f6ce8c6b68f645b43b6544225dc9c55aad481161105cdbdcc071d4f01611ba5d4460770e06e0c494e554d1c102a20165f1a1ca7b94e53fbb52229268e8bbeb49811d1d79ed2753b0e61617a89c86e7089623e2ffa13ee97114fffc136a2c2832ad4319a3ff8cd7ad5b5456062a11bd02a1592a3feb8ce795c0806ce96275472d0f475064d164a69b9002b013638f1834ea68c3eea096b36c64bd2c45242357ebba3b2a30eda1ed424fa75a756ce70c57c956fc8bdb11ad265771a71ba4c0d1aec8b56152ec4ef5038f6be595cc891f6bb8597b7599a166fa8fb392682c219342e89eded02370d141dfb394e9b466287c62744b3fb009b2cc1da12deb5360e2b581d032ac29bd3d092eed099da692879227597a9c127963ec5dd1bfb167f38a22fa8ba0cc452f80e782ea590f8f61766c9f43092e9b1457e3a37fe504c89b14b5d318f25e5f6b7b1fbaef4a0e33ce51a5f5ebec788bab746b5e8f4b121e7a3421181c6a39163262f4fb55b3de81a4d57d3ca12977e072a8c34e27392dee9d5c30b0a1d86c87627f456e11892302d422342312518e9ee209af662cc875ab3a92daa8d7135754176e32c937c001252488ad6e081fd7a7fdc79c69be89b972b43fb765acb6bd37a47edb71c6702160fe1035c61209fd802cb6a0659acb71b6b50e7ec81cec1a56d2ae3dbf16b9b1c098c1b11c09de3d032fe147da9a4f5f1886eef5cdd55c47cbf311542a76cf32232a2cbb9fd9d16729a467b7d6674343d2952bef7b5aa47821d2241c27353f3740d4fb416e559fb673166e6dcf0b11242f6371e2b775bc2819677f5d6d563d0ea073efa1a6fbf6037c4faa8b11eeda687d6612a5e5b1f99c31eaa78f5f3c943312993ac079bd10ded370acfac1681735801021c7bbaf56bce6960a3849b6391bbf7a7cf27ee9e19c6529adb5e6823ae016267ce702e7b245752030256c6f2ddb763c42b5fee6b0a5d8932811ccacc9c9c224ccb0cac6ecb93150c57a71211fcc55b9589b87b318f8d30163124a47979a257b8c3e2694492f99c839cd1501ff04e1bca8dbff2f96db32a1c3dd350eed6f39eddc9bffe7b0fd38fe6012dba11b81d0ef4689bbbda3742c59cbc9a5b006a7208414b9c78b765174f9cc0123b9f52ac853ad3546d82b199941cebdcd23efb86be41eed9a33ff87f7bb9faa6e2f8f746db0bf13bb53b2000cb36bfd5b0532d751afaaf55de67ce3e0cfd82a4df16a88f4e31293777d603dae28e8bf4e07cd215729070d463939ed9126c081119d9994e2d63aaece22c8d85bb792792f0a2b9619e3f3f7edf09f402194ffc432fc29857981c765e2340a1299e71148bddacabc8840cbc0fbe30d3c26011b37fbd84af2be997b703d289e2b1c73dadd15bed45da758ab8d1fa6cf6b40263c0aea43d3f8d43e9f07375737f3c5e1f82b37b0331a9a1dd9c55715b630a4bd4c1a43438b04d50da4f66373dbfdb443faa4600ad4385ac6400213e5ed2da9ccc2068211618093ef66c80d8f4b026cf829ace32793fc2b31ea59bcf857dcb0101c12a909ba6fb90320269095f3d3dddb801d1651c2af208c1014749a0e42953887b6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">前面的内容需要密码才能探索哦。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NFC科学计算器源码</title>
      <link href="/posts/865c25b1.html"/>
      <url>/posts/865c25b1.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8a628f30b4413d5f1e5b5adc0eda907e17081b6d959f8e3c4697b6cafb2a2f1c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">自己做作业的才是好孩子哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> NFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决hexo博客无法通过域名访问的问题</title>
      <link href="/posts/8f811f2c.html"/>
      <url>/posts/8f811f2c.html</url>
      
        <content type="html"><![CDATA[<h4 id="问题描述："><strong>问题描述：</strong></h4><p>前几天我的hexo博客搭建好后一切正常，但是第二天早上起来就无法通过域名访问了。如图所示：<br><img src="https://img-blog.csdnimg.cn/45865ae172cc4cbd8ce4b44beb4066dd.png" alt="在这里插入图片描述"><br>但是<code>Git bash</code>通过<code>hexo s</code>命令是可以正常访问博客的。<br>排查了半天问题，最后终于解决。</p><h4 id="解决方案："><strong>解决方案：</strong></h4><ol><li><p>访问站长之家：<a href="http://tool.chinaz.com/dns">http://tool.chinaz.com/dns</a></p></li><li><p>在检测框中输入你的网址。<br><img src="https://img-blog.csdnimg.cn/09c0ff2da15140bea2f00da8fd447ea4.png" alt="在这里插入图片描述"></p></li><li><p>复制第一条响应IP。</p></li><li><p>找到<code>C:\Windows\System32\drivers\etc</code>路径下的hosts文件，在打开之前先选中<code>hosts</code>鼠标右键打开属性，将user的权限全部打开。<img src="https://img-blog.csdnimg.cn/880ef061b4f14b39a51669e989692138.png" alt="在这里插入图片描述"></p></li><li><p>记事本方式打开<code>hosts</code>文件，将刚才复制的IP地址和你的域名加入到问价底部。<img src="https://img-blog.csdnimg.cn/0201be53a4fa4aff9ed85e8229512187.png" alt="在这里插入图片描述"></p></li><li><p>保存<code>hosts</code>退出。</p></li></ol><p>ps：如果这些做完后还不可以，检查一下是不是域名未备案的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】最长上升子序列（记录路径+优化版本）</title>
      <link href="/posts/4101bbe0.html"/>
      <url>/posts/4101bbe0.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：895-最长上升子序列-AcWing题库">题目链接：<a href="https://www.acwing.com/problem/content/897/">895. 最长上升子序列 - AcWing题库</a></h4><h4 id="题意：">题意：</h4><p>给定数列，找到最长子序列。</p><h4 id="思路：">思路：</h4><ul><li><p>动态规划。数组a[N]存数列。</p></li><li><p>状态表示：f[i]表示<strong>以a[i]结尾的上升子序列</strong>的集合中长度的最大值。</p></li><li><p>状态转移方程：<strong>f[i]=max(f[i],f[j]+1);</strong></p><ul><li>因为f[i]表示以a[i]结尾，既然序列一定包含a[i]，那么我们<strong>不妨先看前i-1个数中的子序列集合</strong>中，有多少能和a[i]匹配，然后找到所能匹配的集合中的最大值。</li></ul></li><li><p>为什么可以保证g[N]中存的一定是最长子序列的路径？</p></li><li><p>关键在 <code>if(f[i]&lt;f[j]+1)</code> 这句，通过这句if判断，保证了在更新f[i]时一定是比之前所有以a[i]为结尾的子序列长度更大，而g[i]也随之更新。如果我们能保证<strong>g[i]对于每个以a[i]为结尾的子序列集合所存的都是最优解</strong>，那么<strong>通过g[N]所能找到的子序列就一定是最长的子序列。</strong></p></li><li><p>动态规划本质上其实是一种<strong>集合</strong>的思想。</p></li></ul><h4 id="不记录路径代码：">不记录路径代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i]表示以a[i]结尾的子序列长度的集合中的最大值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="记录路径代码：">记录路径代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i]表示以a[i]结尾的子序列长度的集合中的最大值</span><span class="token keyword">int</span> g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//g[i]以a[i]为结尾的子序列是由谁转移过来的</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//初始化，开始时所有的序列长度为1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">//f[i]=max(f[i],f[j]+1);</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>            k<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        k<span class="token operator">=</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span> i<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优化版">优化版</h4><h4 id="题目链接：896-最长上升子序列-II-AcWing题库">题目链接：<a href="https://www.acwing.com/problem/content/898/">896. 最长上升子序列 II - AcWing题库</a></h4><h4 id="题意：-2">题意：</h4><p>同上。</p><h4 id="思路：-2">思路：</h4><ul><li>通过 <code>f[i]=max(f[i],f[j]+1)</code> 来计算最长上升子序列会造成大量的无用计算。<ul><li>比如： <code>3 2 1 2 5 8</code> 。 3、2和1的长度都是1，但是我们显然没有必要去重复遍历3和2，因为所有能接在3和2后面的<br>都能接在1后面。</li></ul></li><li>那么如何去简化这种机械的重复呢？<ul><li>既然3、2和1同为长度为1的子序列，而且3和2可以完全被1替代，那么对于长度的为1的子序列我们只记录1就可以，如果有一个数比1大，那么就让他接在1后面组成长度为2的子序列。<br>对于每个长度的子序列都记录一个尾元素最小值，就组成了集合f。<br>对于原数列的每个元素a[i]我们只需要在集合f中找到小于a[i]的最大值f[j]，并且直接接在f[j]后面就可以，<br>也即 <code>f[j+1]=a[i]</code> ;</li></ul></li><li>为什么可以直接接在后面？<ul><li>因为集合f是由不同长度子序列尾元素的最小值构成的，如果有f[i+1]&lt;f[i]，那么对于f[i]一定有f[i+1]更适合，与我们对集合f的定义相悖，所以对于集合f，一定有 <code>f[i+1]&gt;=f[i]</code> ，而我们定义f中的子序列一定是上升子序列，所以一定有 <code>f[i+1]&gt;f[i]</code> 。<br>因为 <code>a[i]&gt;f[i]</code> ，且 <code>a[i]&lt;f[i+1]</code> ,所以可以直接用a[i]更新f[i+1]的值。</li></ul></li><li>怎么在集合f中找到小于a[i]的最大值？<ul><li>我们已经证明集合f一定是上升的，所以可以用二分的方式。</li></ul></li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100100</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i]表示长度为i的子序列尾元素的最小值</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">erfen</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span>l<span class="token operator">=</span>mid<span class="token punctuation">;</span><span class="token comment">//因为是写的l==mid，所以在算mid时要向上取整  -&gt;  mid=l+r+1&gt;&gt;1;  防止边界出错</span>        <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">2e9</span><span class="token punctuation">;</span><span class="token comment">//因为数据范围是-1e9~1e9，所以要初始化一个边界</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//子序列集合的最大长度，也就是二分的范围</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">erfen</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>ans<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//因为f[x]是小于a[i]的最大值，所以f[x+1]一定大于等于a[i]，可以直接更新f[x+1]</span>        f<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题 II</title>
      <link href="/posts/3021fb5b.html"/>
      <url>/posts/3021fb5b.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：多重背包-II">题目链接：<a href="https://www.acwing.com/problem/content/5/">多重背包 II</a></h4><h4 id="题意：">题意：</h4><p>有 N 种物品和一个容量是 V 的背包。</p><p>第 i 种物品最多有 s<sub>i</sub> 件，每件体积是 v<sub>i</sub>，价值是 w<sub>i</sub>。</p><p>求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。<br>输出最大价值。</p><h4 id="输入格式">输入格式</h4><p>第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N 行，每行三个整数 v<sub>i</sub>,w<sub>i</sub>,s<sub>i</sub>，用空格隔开，分别表示第 i 种物品的体积、价值和数量。</p><h4 id="输出格式">输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围">数据范围</h4><p>0 &lt; N ≤ 1000<br>0 &lt; V ≤ 2000<br>0 &lt; v<sub>i</sub>,w<sub>i</sub>,s<sub>i</sub> ≤ 2000</p><h5 id="提示：">提示：</h5><p>本题考查多重背包的二进制优化方法。</p><h4 id="输入样例">输入样例</h4><pre class="line-numbers language-none"><code class="language-none">4 51 2 32 4 13 4 34 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例：">输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="思路：">思路：</h4><p><strong>算法</strong> ：动态规划</p><p><strong>时间复杂度</strong> ：<code>O(n*m*logs)</code><br><strong>完全背包</strong> ：<img src="https://m1.im5i.com/2022/10/29/UVyF3Q.png" alt="UVyF3Q.png"></p><p><strong>多重背包</strong> ：<img src="https://m1.im5i.com/2022/10/29/UVy8fx.png" alt="UVy8fx.png"></p><p><strong>为什么多重背包的方程会比完全背包多出一项？</strong> ：</p><ol><li>完全背包不需要考虑物品数量，所以上下两个方程都会方程会枚举到 j-kv &lt;= 0 结束，而多重背包第i件物品只有s[i]件，所以下面的方程会多出后面的一项。</li></ol><p><strong>能否直接用完全背包的方式优化多重背包</strong> ?</p><ol><li>考虑已知前n件物品价值的最大值和第n件物品的价值，能否得到前n-1件物品的最大价值？答案是否定的，如果是价值总和我们是可以的，但最大值不可以。</li><li>这里的前n件物品对应了多重背包的方程，由于多了一项，所以我们不能直接用完全背包的方式优化多重背包。</li></ol><p><strong>为什么会超时？</strong> 对于每种物品，如果每次在遍历每种物品和每个体积的时候都枚举一遍物品数量，那么时间复杂度会到<strong>O(n^3)</strong>，n=1000时，计算量就到了10亿次的级别，而c++一秒只能算1亿次，所以必须考虑优化。</p><p><strong>通过二进制的方式对问题进行优化</strong> 。</p><ol><li><p>对于每个物品如果暴力枚举所有数量会超时，那么考虑将一部分物品分组。我们可以将物品按二进制的方式进行分组：1，2，4，8，，，2^k，C。前k+1项很好理解，分别是2的0~k次方，C是什么？因为我们要通过二进制分组的方式，表达出某个物品的任意数量，那么分组之后的总和也应该等于该物品的数量，C就是该物品的总数量依次减去前k+1项后的值。</p></li><li><p>为什么强调二进制可以表示所有的数字？<br>因为二进制同样遍历了所有的可能。只要枚举了每件物品二进制分组下的每组物品是否放入背包，那么就相当于枚举了[0,s[i]]，这显然是一种十分高效的枚举手段。</p></li><li><p>这其中也隐含了动态规划的思想，比如如果第1组物品放入背包同时第2组物品也可以放入了背包，那么相当于我们放入了3件物品，如果第1组物品不放入背包而第2组放入背包，就相当于放入了2件物品。后面的每组物品在枚举时都基于前面每组物品是否放入的结果，所以可以节约大量时间。</p></li><li><p>注意数组的范围，需要保证能存下二进制分组后的所有物品</p></li></ol><h4 id="代码："><strong>代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//注意数组范围，因为我们要存每件物品的数量二进制分组后的总数，</span><span class="token comment">//所以M要取1000*log(2000)=1000*12</span><span class="token keyword">const</span> <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">12010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> v<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token number">2050</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token operator">&gt;&gt;</span>z<span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">&lt;=</span>z<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">*</span>k<span class="token punctuation">,</span>w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token operator">*</span>k<span class="token punctuation">;</span>            z<span class="token operator">-=</span>k<span class="token punctuation">;</span>            k<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            v<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token operator">*</span>z<span class="token punctuation">,</span>w<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token operator">*</span>z<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>m<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>            f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>j<span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客遇到的问题</title>
      <link href="/posts/c29037cb.html"/>
      <url>/posts/c29037cb.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-hexo-命令">1.hexo 命令</h4><ul><li>首先输入<code>hexo clean</code> 清除缓存，再输入 <code>hexo g</code> (完整命令为hexo generate)，用于生成静态文件；</li><li>然后输入 <code>hexo s</code>(完整命令为hexo server)，用于启动服务器，主要用来本 地预览；</li><li>完成后 打开浏览器输入 <a href="http://localhost:4000">http://localhost:4000</a>，会发现多了你刚写的那篇博客;</li><li>最后输入<code>hexo d</code>(hexo deploy)，用于将本地文件发布到github等git仓库上；</li><li><code>hexo new “xxx”</code> 可以在 <code>Blog\source\_posts</code> 目录下创建文档，文档名为xxx，允许不加英文双引号，文档名允许是中文。</li><li><code>hexo new page "xxx"</code> 在 <code>Blog\source</code> 目录下创建文件夹，规则同上。</li><li><code>npm install 插件名称 --save</code> ：安装插件。</li><li><code>npm uninstall 插件名称</code> ：卸载插件。</li></ul><h4 id="2-hexo-init-命令执行出错">2.<code>hexo init</code> 命令执行出错</h4><p>如果遇到这种情况：</p><p><img src="https://img-blog.csdnimg.cn/cfc80a92339446e18a8d43245c125977.png" alt="在这里插入图片描述"><br>可以尝试用管理员身份打开cmd，然后cd到Blog文件夹下再执行这一步，大概率能解决问题。</p><h4 id="3-获取github的IPV4地址失败">3.获取github的IPV4地址失败</h4><p>在获取自己github的 IPV4地址的时候，如果ping + github网址不行，那么就在后面加-4试试。 例如：<img src="https://img-blog.csdnimg.cn/c055ff4329984a76b51b69889201f904.png" alt="在这里插入图片描述"></p><p>加-4后(注意负号前有空格)：<br><img src="https://img-blog.csdnimg.cn/6134ee67609348339f79e607a4671cbf.png" alt="在这里插入图片描述"></p><h4 id="4-Error：Spawn-failed">4.Error：Spawn failed</h4><p>例如：</p><p><img src="https://img-blog.csdnimg.cn/f1f0511555434be18ea20b81afdec169.png" alt="在这里插入图片描述"></p><p>有些时候出错可能是因为国内访问github速度太慢出错。可以尝试切换网络或者等等再试一下，或者参考这边博文: <a href="https://blog.csdn.net/HTL2018/article/details/106876940">hexo发生error：spawn failed错误的解决方法_HuangTLhit的博客-CSDN博客</a></p><h4 id="5-创建CNAME文件出错">5. 创建CNAME文件出错</h4><p>当我们在Blog文件夹下的source文件夹中创建CNAME文档时，可以先创建一个txt，但是在保存txt文档后务必将<code>.txt</code>后缀删除。例如：</p><p><img src="https://img-blog.csdnimg.cn/0d99262048cc45da9b24055d7d3ee8b5.png" alt="在这里插入图片描述"></p><h4 id="6-备案期间不可以解析域名">6.备案期间不可以解析域名</h4><ul><li><p>在购买好域名后，先去备案，在备案期间不可以解析域名。</p></li><li><p>如果不提前备案的话，即便搭建好博客也无法正常使用。在备案时可能会让你填写备案服务码，这个东西是要购买服务器才会有的，但是没有必要为了一个服务码而单独购买域名（例如我是搭建在github上的），可以问问周围同学有没有购买的，或者去网上买个服务码。在备案的时候按照教程来一步步走就好了，并不复杂。但是这样后续要将网站的二级域名绑定到阿里云国内节点服务器 IP上，详情参考这篇文档：</p></li></ul><h4 id="7-网站底部添加ICP备案信息">7.网站底部添加ICP备案信息</h4><ul><li>当ICP备案通过后，打开主题配置文件，查找beian，修改为如下代码:</li></ul><pre class="line-numbers language-none"><code class="language-none"># Beian ICP and gongan information for Chinese users. See: https://beian.miit.gov.cn, http://www.beian.gov.cnbeian:  enable: true  icp: 鲁ICP备2022018291号-1  # The digit in the num of gongan beian.  gongan_id:  # The full num of gongan beian.  gongan_num:  # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download  gongan_icon_url:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-发布博客前的工作">8.发布博客前的工作</h4><ul><li>在发布博客之前最好检查一下自己的标题格式有没有写对，准确做法是在<strong>文档第一行</strong> 打下<code>---</code>后按回车，然后在出现的框中写<code>title:</code>后跟标题。</li></ul><p><img src="https://img-blog.csdnimg.cn/4fd5a509ae4d48de9f1534142aee7db2.png" alt="在这里插入图片描述"></p><h4 id="9-文章的Front-matter">9.文章的<code>Front-matter</code></h4><ul><li>博客文章的<code>Front-matter</code>区域中除了菜单后面的冒号外, 自己的内容不可以出现冒号, 否则在git g时会报错，因为所有跟冒号的字符都会被认为是菜单。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<p><strong>Welcome to Yang Xinyi’s cottage.</strong></p><p>​    纪念一下刚刚搭建好的博客，虽然还是个“毛坯房”，不过也算初具规模了hhh，还是有一点点成就感的：）。今后还会慢慢“精装修”。本来想当做自己的秘密基地的~~（小时候总会找个地方把在外面捡的石头木棍藏起来那种hh）~~，不过闭门造车不可取，还是交流进步有前途。</p><p>​第一篇博文，就用大一刚接触代码时的“Hello world”来纪念吧hhh</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github如何将本地仓库中的代码转移到远程仓库</title>
      <link href="/posts/29059957.html"/>
      <url>/posts/29059957.html</url>
      
        <content type="html"><![CDATA[<h4 id="前言">前言</h4><p>感受：一点很简单的东西在完全不熟悉之前，也会让人一筹莫展，看着杂乱的文字满头雾水，感觉无从下手。</p><h4 id="步骤">步骤</h4><p>1.首先我们在自己的github上新建一个库，用来存放我们的代码。<br>例如：<img src="https://s2.loli.net/2023/05/20/5ih2KSLCowzncxG.png" alt="图1"><br>属性全部设为默认就好。<br>2.在本地仓库（所谓本地仓库就是一个用来存放文档的文件夹）处打开Git bash here 。<br>例如：<img src="https://s2.loli.net/2023/05/20/ZO28qQEbKmGR6Wv.png" alt="图2"><br>3.输入 <code>git init</code> 将仓库初始化。</p><p>4.输入 <code>git add .</code> 代表添加所有文件。</p><p>5.输入 <code>git commit -m ‘注释’</code>     注意：<code>'注释'</code>  里面的信息可以随便写，只起补充说明用。</p><p>6.将自己在github上<strong>库的地址</strong>（所谓库的地址就是url）复制过来，然后在Git bash中输入 <code>git remote add origin 库的地址</code>。<br>第六步可能会出错，那么就输入 <code>git remote rm origin</code> ，然后再重复执行第六步（通常来讲 <code>git remote rm origin</code> 对于同一个库，这个命令只需要执行一次）。图中的链接就是地址。</p><img src="https://s2.loli.net/2023/05/20/C7AyUTxN9jkh6RL.png" alt="图3" style="zoom:67%;"><p>7.第七步是重点。我们先输入 <code>git push -u origin master</code> ，然后会有一个弹窗，不要选择账号密码那项，在2021年已经被禁用了，去自己的github上创建一个自己的个人访问令牌，具体可以参考这个帖子：<a href="https://helloai.blog.csdn.net/article/details/119696726?spm=1001.2014.3001.5506">超链接</a> 。<br>创建好之后我们选择令牌那项，等待一小会儿。<br>如果仍然提示出错，那么参考这里：<a href="https://blog.csdn.net/good_good_xiu/article/details/118567249?spm=1001.2014.3001.5506">超链接</a>。</p><p>这些都做完应该就可以正常上传代码了，如果有遇到，可以在评论区留言。</p><h4 id="2023-4-21">2023/4/21</h4><p>简单更新一下，上面的做法适用于 <code>Windows</code> 下的普通文件夹，并且第七步已经没有这么麻烦（不知道是不是我以前已经搞好了 token），直接 git push 就可以了。</p><ul><li>之所以会更新该文章是因为今天不小心把以前的仓库删了（git：我已经尽力不让你删除了），所以重新上传了一个仓库，第七步我意外的顺利。</li></ul><p>另外如果是自己购买的 Linux 服务器，则应该去看我的另一篇 git 相关文章：<a href="https://xinyi127.cn/posts/a9b3.html#Git%E6%9C%AC%E5%9C%B0%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%9A">git 命令</a> 。</p><ul><li>需要注意的是”git 命令“这篇文章中使用的 ssh ，而不是 https ，主要注意甄别。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件安装与环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wormholes题解</title>
      <link href="/posts/b405ff3.html"/>
      <url>/posts/b405ff3.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：Wormholes">题目链接：<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2486#problem/C">Wormholes</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>给定F个样例，每个样例第一行给定n，m，w。共有n个点，接下来m行双向路径和w行单向路径，单向路径权值为负。问整个图中是否存在负环。</p><h4 id="思路："><strong>思路：</strong></h4><p>很基础的判断负环的题目，可以用bellman_ford或者spfa，这里选择spfa。</p><h4 id="代码："><strong>代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//#define _CRT_SECURE_NO_WARNINGS</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">5200</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">,</span> M<span class="token operator">=</span> <span class="token number">10e9</span><span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> w<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> W<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span><span class="token keyword">int</span> cnt<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> z<span class="token punctuation">)</span><span class="token punctuation">{</span>W<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>z<span class="token punctuation">,</span> e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">,</span> ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>st<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> st<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> c <span class="token operator">=</span> W<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> c<span class="token punctuation">;</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> T<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> T<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>W<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> W<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>ne<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> ne<span class="token punctuation">)</span><span class="token punctuation">;</span>idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> w<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">-</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token function">spfa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ans <span class="token operator">?</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 图论 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】A Perfectly Balanced String?</title>
      <link href="/posts/17db9645.html"/>
      <url>/posts/17db9645.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接-A-Perfectly-Balanced-String">题目链接:  <a href="https://vjudge.csgrandeur.cn/contest/495457#problem/B">A Perfectly Balanced String?</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>给定n个串。对于每个串任意截取一段子串，每个在原串中出现的字符，在子串出现的总频率之差不能大于1，如果符合条件就输出<code>YES</code>，否则输出<code>NO</code>。</p><h4 id="思路："><strong>思路：</strong></h4><p>我们可以遍历一遍原串，记录每个字符出现的位置。然后再遍历<strong>每两个相同字符之间</strong>是否出现<strong>所有字符</strong>。如果是，那就说明符合条件，否则不符合。可以在纸上画画图比较直观。<br><strong>ps：</strong> 比较水的一题，但是开始一直在纠结找到yes或no的某些条件，忽略了这道题的本质，痛wrang三次。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//#define _CRT_SECURE_NO_WARNINGS</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> sf<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sf<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>res<span class="token operator">++</span><span class="token punctuation">;</span>sf<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//cout &lt;&lt; "?" &lt;&lt; p[i].size() &lt;&lt; endl;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token comment">//???</span><span class="token punctuation">{</span><span class="token comment">//cout &lt;&lt; i &lt;&lt;" " &lt;&lt; j &lt;&lt;" " &lt;&lt; p[i].size() &lt;&lt; endl;</span><span class="token keyword">int</span> st<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> u <span class="token operator">=</span> s<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>sum<span class="token operator">++</span><span class="token punctuation">;</span>st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//cout &lt;&lt; sum &lt;&lt; " " &lt;&lt; res &lt;&lt; endl;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">!=</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">goto</span> loop<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>loop<span class="token operator">:</span>flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">?</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NO"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">:</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"YES"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】继续畅通工程</title>
      <link href="/posts/fcb3257d.html"/>
      <url>/posts/fcb3257d.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：继续畅通工程">题目：<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2484#problem/C">继续畅通工程</a></h4><h4 id="题意"><strong>题意:</strong></h4><p>给定n个点，n*(n-1)/2条边，每个边标记是否已经在集合中，问从剩余的边中加入集合得到最小生成树的代价。</p><h4 id="思路："><strong>思路：</strong></h4><p>首先我们想到可以用prim或者kruskal，因为具体某些边可能已经被标记了，所以用kruskal更方便。那么怎么去处理被标记的边呢？并查集又一次展现了它的强大<s>魅力</s> ，我们可将被标记的边加入集合，那么就可以很简单的处理标记和不标记边的区别了。</p><h4 id="ps"><strong>ps:</strong></h4><p>不知道是不是我们学校vj的问题，在结构体里重载运算符居然判编译错误…</p><h4 id="代码："><strong>代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">ss</span><span class="token punctuation">{</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">;</span><span class="token comment">/*bool operator&lt;(const ss&amp; s){return c &lt; s.c;}*/</span><span class="token punctuation">}</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>ss a<span class="token punctuation">,</span> ss b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>c <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> m <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并区间</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> s <span class="token operator">+</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token comment">//说明不在同一个集合中</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>sum <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠标右键新建Typora文档</title>
      <link href="/posts/2574180f.html"/>
      <url>/posts/2574180f.html</url>
      
        <content type="html"><![CDATA[<h4 id="如图-我们最终的目的就是可以通过鼠标点击右键的方式新建一个Typora文档"><strong>如图, 我们最终的目的就是可以通过鼠标点击右键的方式新建一个Typora文档.</strong></h4><p><img src="https://img-blog.csdnimg.cn/b06b53a02efe453c98b404a38079eb77.png" alt="在这里插入图片描述"></p><h4 id="步骤">步骤:</h4><ol><li>在键盘上按下win+R，打开运行，输入<code>regedit.</code>并点击确定。<br><img src="https://img-blog.csdnimg.cn/2a72bcfd009340d7b84faa769342246d.png" alt="在这里插入图片描述"></li><li>在搜索栏输入<code>计算机\HKEY_CLASSES_ROOT\Directory\Background\shell</code></li><li>鼠标右键单击<code>shell</code>文件夹，建立<code>项</code>并命名为<code>Typora</code></li><li>鼠标左键单击<code>Typora</code>文件夹，鼠标左键双击<code>默认</code>，将<code>数据</code>改为<code>Typora</code>。</li><li>在<code>Typora</code>文件夹空白处右键单击，建立<code>字符串值</code>并将其<code>数据</code>改为用户的Typora软件安装路径（具体可以在用户建立的Typora文档的属性处查看），示例：<img src="https://img-blog.csdnimg.cn/302e20feca5b40a197998ce0f859fbd9.png" alt="在这里插入图片描述"></li><li>鼠标右键单击<code>Typora</code>文件夹新建<code>项</code>并命名为<code>command</code>。</li><li>鼠标左键单击<code>command</code>文件夹，鼠标左键双击<code>默认</code>，将数据改为<code>"用户的Typora软件的安装路径""%V"</code>，注意有两个双引号不要忽略。示例：<br><img src="https://img-blog.csdnimg.cn/4e7df1639e00446d94478442bc6f168a.png" alt="在这里插入图片描述"><br>8.关闭注册表编译器，返回桌面并单击鼠标右键，如果是w11系统，需要在显示更多选项处查看。<br><img src="https://img-blog.csdnimg.cn/e972c418d56241629b622ce4c5c035ca.png" alt="在这里插入图片描述"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件安装与环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Square Coins题解</title>
      <link href="/posts/69e0777e.html"/>
      <url>/posts/69e0777e.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：Square-Coins">题目链接：<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2482#problem/A">Square Coins</a></h4><h4 id="题意"><strong>题意:</strong></h4><p>有无限多张1,2^2, 3^2, 4^2…… 17^2，共17种面值的货币，每次给定一个金额，问通过这17种货币有多少种换算的可能？</p><h4 id="思路："><strong>思路：</strong></h4><p>母函数来做，估计做这个题的都是第一次听到这个名词吧，其实并没有很神秘，就是有n个多项式相乘，n代表有多少种货币。n个多项式累乘结果内部第j个变量的指数代表金额，系数是可能。</p><h4 id="PS">PS:</h4><p>至于母函数如何构造等等推荐这篇文章 <a href="https://blog.csdn.net/qq_41603898/article/details/80266206?utm_source=blogxgwz5&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-5.pc_relevant_paycolumn_v3&amp;spm=1001.2101.3001.4242.4&amp;utm_relevant_index=8"><strong>我是传送门</strong></a></p><h4 id="代码："><strong>代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">310</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>ll n<span class="token punctuation">;</span>ll a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//结果的系数是可能数,指数是指定金额数值</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token comment">//初始化第一个多项式</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//第一个多项式系数全为1</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//共17种硬币对应17个多项式</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">17</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//"前i-1个多项式累乘的表达式里第j个变量</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//第i个多项式,为什么是k+=i*i？因为第i个表达式里相邻变量的指数相差i*i</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">+</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> k <span class="token operator">+=</span> i <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token comment">//j+k即为前i个多项式累乘的表达式中的某个变量;  j同上,前i-1个多项式的值预存在数组a中</span>b<span class="token punctuation">[</span>j <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//将前i个多项式累乘的结果存到a中,b因为要在下次循环中存前i+1项多项式累乘的结果所以要赋0值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 母函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>员工管理系统</title>
      <link href="/posts/4b6ab007.html"/>
      <url>/posts/4b6ab007.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ed730bb97589cbe1d5b1967bcd15b7130c88e11ddc1c5435c74565c9b3d9d543"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">作业要自己独立完成哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希表设计</title>
      <link href="/posts/2f2751f2.html"/>
      <url>/posts/2f2751f2.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c33836074a1dde200360ee02a0b89a7a0122bbad5957194e7696f394719bcd47"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">自己做作业的才是好孩子哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> hash表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园导游系统</title>
      <link href="/posts/b41884ac.html"/>
      <url>/posts/b41884ac.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c2b2d8545314eca12f1813aa3078149cf6b8cefb60540a9ec274b3aa7b2e68ca"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">自己做作业的才是好孩子哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> Floyd </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计成绩</title>
      <link href="/posts/2c7a404e.html"/>
      <url>/posts/2c7a404e.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7f630be2e14517a1ae06c92c2bf20c208c6a240f94c9995ebc9e7f0916d2f636"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">自己做作业的才是好孩子哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教职工管理系统</title>
      <link href="/posts/eb932b93.html"/>
      <url>/posts/eb932b93.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="028aa7f7e99a4fef413f05d04871175fd2160804a86c09513a7d75c58bdf6a2b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">自己做作业的才是好孩子哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>走迷宫</title>
      <link href="/posts/ef08297b.html"/>
      <url>/posts/ef08297b.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e2333ab74240cf27c281c803fbbcfcbb9a6b6589e4ccb2b5007289e41c97846a">ac439700f54d20aeea6b5bc240dbdd3a719300ee5bb49709a8d79712753e75e84e9b0ac49e49b3f320028e8a7c5194abccb2c17aa8820a17052f383f6f6f4bfad1d3afb5f110a853386b94560b01a32351e8603b15714cb7bb2f2d8f44625e58e58b1a4075cac0273e8738906f9f42adc534669f66f5fe8a8365415283c4f056107774f159e2ce7980ed00742f4d13b4f3e0742cb268e17f92dfdcc7ea925f9393ee56f3c419458b7ed3fbb3f48417c08114539e686b073de059fd07cd723f631d37027e91383baf234adefeef4b021abd31296687e4d2b684459b767b88cfc110f9651de36fee4ed7067f081f2c3f41982c9a9fc02066ba84df43ee8388f2db91a1f59d6118ae97e65d88207286f8ea99c70f19d377ca975b02aea006757cc86729e6fb5bf10c4cf7c01384cb2855d1fbbd4cfca8a237a21eeff35e5e51acfd7ec3d8cc6adc0dc09ed83ecc425dfddc827be6f847c60bb4a1d8fe069da43bbe6b5f8b0b70a4e55cd87b9fa054b58f658aaac71b07e8c8d1c960e1549f0c2847148f94f09095e5b46df871b0541bb0fefe13171a50aa85b3743839439b5d67fd9da868723e41af7d25eb78ec603a8bb70561f7e43eabbc30a70d2c1cc3652a6663d5a78ddeacd4f97b1d0c86db252e74bbb29466f255107286012d721c0e08729b423b6e37680177d711fb5edefa1467496f16508d7be3dcf11bc8b40832e2fc208538d4973ed1aff5ff410718f3bcbf501d2d67538cca629f37c0acbf17942005d4436f162e04c0bcc1af4f28eb59e9a87b926dcbc8f97631777ca44d41968bbeebb136820334f698611df689932be6b1bd82a1c0b4b35303077b6be14cf0ec4602e90a512e23b95879d4f0f0e74248d903504acf66b2d71a8af73d1e37277e30915097b0a84e572ea124e4e2f866ec02b5895f98cb3949f5c7d9ff5515a40525edff8fc43e93977332cec144a06ae66154f3ce8ba4cf4b6fecdee0de3f201007bb7c998bf76b63367912f7dddc055a4c745f1911d4e7a974bca2553c00ac7dc68a6563a3d948ba24822621a475b1c27e09716b3a1461ecbf36db3a8dd805d5f86de1574e49d8ac3fecae8f2648865d265278a2831c852e7fed14f513e20d5900f19bfe1ed9f8d82ead354ef6159852a4aad8878b70f6421f7622f6d5f59d20d197d2e68fdea1b326ef86d6343b505b88487e6b7483bd20be42a4f8bb7b719bfca562b57b59dd08a947f348696477d961f152c14c25a1b9fc367e9ca14c0fe655ebd9e854ebb8320c279f43b064e7ac83ffd11d6bfc0380d881de0deb96b1c7fe1c51de5de5bd3b7bf75006555ec7fddc46b779f88420b63a4a247c7518d052f1131454b3dc9531d9eea461e1549cde8c81d219c970be386faf7141190316c4dbd92b9991edbf21c28eb691620c49ae4c30b026546dff096257852972bc2bea36a07049bc3a26a5ea81acb99f27ef51050b13b556094ea11f3b9e8ccf73bc7560dffa2c06f74861f9c0ad158a89075f99cdd2ddae754d86c175ad81a72a9ae9d6d48751220e18e580eca80cc73a845d1a3fd1690ce1495d8807e04b4d41baf43ba749c937525432118450eb779a52dfcc0117daec65fa8c9f6aa022fd9c97a4d98504d0a99b91efb05893c5fc4e21bd9f2a891063c911ddac5c6889bb64b171ce1ecb2c071684585342a8133fd1c58dcc41492598aca20310e175566c6bab08542abfad8f561f99d54a6eebade38e09f2814e567e246593aeca14223a239c218119b233b455b12247e0322361ec7b767f79db320a4acb9bcf9dbe1362519220058d1f98b47461df896fb5b8a363cda4cc63cf59fb06cb197fcca9866f305a6e9d20731c8e72e710af1fb077e3a7ba581a8abf2abc376e700f0fac4488ec7a3236295f1cdef2f16eac38d6d610ea18deffb6b52a5c698db4cdc8bd3987606568b2156832409dc79aa4cb981edce9c82f963102d1728389e1a9a2a49cd2d207fec2f2a23716c745c79e5c909eda96074f37b2a0004d69343f6ffe0418a7f3e80512dfc1b26d51b9f55f984f0b2e63672b79e753d9986395674d278302b20acf78068fc343b6c6dd84f1088ce7f55db31dd2451055837b3d915e1fcf4adc2021d2321b08102a8db33bb04859e99f08540d03c35998d40d606756035ed16213bf1ac576660aa3c07d0fb3a768023cc4527446822a32e4162eec89feadbecde78ad61da4818b920db777d0e6172aec4bc93775c8c06e21c044d14896f344b7424fca8ddcd4942f43af594108b745d1b35a1a398c6bbd624bdec17de3d7b2d7865d67ce74b00c9caafa049c258529ded606174c1e2736f26b447ad4d9095cddf71d1f71a30429b4735e06ba4cc425cbf8d2ba024095f76eaec7dfca4bf8ee9c5bd60f8b98c60307d22c7338746aa8fc12bf3ceb2bec868b378ea0089a1858c0ae08586ed9141ea0b912825857d4b5020757d7101aa317464c52b5aebbbe5be3dcbac2e34f91ee8a5f3b614e0ad2d80ec2d62a0cedba84a507df1fc08c5d6e66d5196159e32b9d0764be302310b662ed35706c418e5879371cf8a89abae3338ef24d00f88a2c6fe86cd2ad14155f469532c43b1649b7f944df22afc85e2ec5fb9e5b4d45336c282bf7c7f465132a37a6155719e224effec9c5a120b9075cd1d30d106849017de20b74c94da8e81d2b39dc9aa11d2c73fa312ca571ad7884c3859f9cc66d739c517f4c16ea487facd89f69253b6a857bb420647b8f0a17698d92bb0bc9f05c0b776903c6c0eda43258a8293b7d0b688b74e6d84e72a2bcd541d69f44b85d96d07f6cbeb5ac6be8328ccf035e9eb860724d2de33076d7beb3163a67bad931d6f363d1f5bfa1ed07e3c25d4258bda83824e8593af2f153ac9df9b3b53a0505e55512dc6dc586a2e2a41b28be1a3a57b2c5eec31af87679f0d0644f95c623afbd9c2b369f3a528bc9d748da127fda4a5d46bb372a0287ee2d2e518dd965b99cca3cadd291ba225659ac58180455b9a87a196c687f163f0a725122e1d5e783f99063819bf7f5d69822f7dc68cfd913e02a2cd00bda344da2ca38560f81f66038eb3118100b4d08674c75e319987123962c5ecbdfb710010d08e0d56881767307e349c9ffc0372281e102739392f54071a9b22ed5bbb56d13f20834b532a00548162310ecb4bc7ef48af942369a5e9deb9cfc08d14d502f6677147ea2f33b6d7b5d52a636507a0a71fb72d7f531eaa1bd0b2769f4744d1c31db501352caee3367ae8a0f93973b5e0820ccca6741ea048ae9b46cb72af2bcc4b378003a2b8cb46f3df6b1ac4395b9c2da5cbc4e7aac4c4eb0a739d4a8235c7e3a772c0bb22d22d06f87369f9b3c45a0b5f45ebab89136c8fe8be757e2cf2c6760bf14f9e7cf02319c9cc7a72cf94e92f52cc74865bf2abf13bbe53d1513a71e68b769555ca603243f556668ef76c8b57d92b113a1454bd9a86c5757e1e0d6567d95d2d5674162ce6d6a068c8e10e743f27da2945478fb5c5652e4b8c5e01cfc4ab250750a834bd18f33ddbfe37d44e33c20f5838ef5245349eab666bfc8e62bbbd557b4062e5f5ebacc4bb870f3d776099a5de2b7cfd673623d1d1afab216405b568eaf6abcf2491e692018875df0fb422b15a97a8fa0239cde6cca89400a74332a6ca2c7f571edbd550489380c25ab95cb9f1a75330176fbfe09f104f3d2c0bf39dd217a21d3ce03dbfd4d286b0bf3f82d16ada8af03316c0527fc797fff4477fe751936b5d47720936e06501e6047ff98cf6752346d0005729b8ff1d4caae66c55c08e7ec6a3271af2f0523182a2e53d7a5d2ced4fd52e145bf71015372982f79b2215ddb71f1e05301d837d97428638060c9688db597d8b25c269bd78b94552e63570213f7139d18a760dee90ea2dc45921e55c86f2e014c45db6ee02e144bddc8b8fb8cb83f38d300a9410240c4ce64d0a2de184a37b0428538c0b520bef44b5980262662a9feac0a08e585ba77a2c59e3f3ef78f1cc04c8c3ee31c0ca4af252fd0db7f6d61c19879b8e962ef7afb9e4cb78ad5b10f22fcb43e61e6662a8b6d31a88454319c470592ea4584995e4ff9a0691e8f8d58860d043b7227202f07117e8bab323ff50dd45175571859a93b88c427a54bfec7b64e596b2a142d5614502a4ce2333331e7128faec6061feec51b4bf798b23d6d9b1d425f67a845dec1a42c678b307948c1a7afaf25c96d19c483672d5983b2345548c5a8bff58b6b92d00d90155c04380fee9821703682b09f85fef1120aaae77c9fbcd5ade3966c3aad93f6461727ecb75693482289a2894d6898809383b9c30d7cadd5c9c26515b4e032d280cb948f7e8aa97afba311a9ed8ec77ad7f05d959a5a90023c87753ff92fcb276bd5b60fa98bd61cd8cfba595b2b1382edf9dae6d054ff2982e0bd10ed74b7046fae326536f29a46462f1a52c832c4fa290d60d062071d7d6a8684966dddf59572c37095d6a2e8ad20120fe635ba062a325db36f0a4f7f43ba50d4a45f6f4d0d80faa43bffd582f31daadbdc5db26b87d1f1766a5c9beef140c87950870cf07027f5c403dba4b0245b228105ff8b0b81535f99636ebb2f0fe43bc320458ad42288aa9c23b7db9ac9b0410fff46a0c9b4d4711e6fefd160518a821713027b853e8d527cd60a9e4fc1e63ac7b448b58a48cbd9c6a1da8f266a1abb6f69f8a08529fdc4d3759dadb199a2d6c712fb74530aca7d7613f6a0dbf937b6e16d296b1d1bf55f5b8d83e72829c2cee8e0d94dda447d384d42d2484017d1a718d061505d122cc2aae8b1639b97a55fa4d7fc71f9b93edfb9a7c12a201ea8c9493a49d81b32ea80c21ed1ae1a985256c59f60be60c73b0d14c0f41f9480addb7eeb1af321ac459e779a388108b59732cf14d23fc3912cbb6327b37ba71bd7a1dc646b1b670cdbdce55d7684799deba49584188b7aa45bcf7e9edc90b336da9a17bc2cee2694a8671c776c609983dc27250c3500df724347f8c12fa2a9d8e62f4a114a44fee3bcf00c8f37679b0c809536eb9f98a9ce530755f3e4cc36387b9afe991a22bbfef7037ab43368df98466fe965e91bdbde98554f1e71e28c9d2a1b0273eeebc770ea221ab62768f374dea43bbcd30d612361f94546fe6ca3e6a8589d0afcec2c0e508231634a0489c1d9f864036eca623a7d6b3440ea9ac35a65adc58b830cff8bf500f8e4ddb258e6f25e372fd7ba42da46e40b66b68fbd1067d958a6696cc92a59f92636afd0febf6eb09467bb77ec68279508cab46595f62961dbeb4f1c5964f893ab826e044c98e994488a5bdbbde526818c6a851fe6ec9bc23d67516cceb0ea3968699e7cc41b4f988e0070f357715a563d28569ac6e307ede8d5ec0e0a9313eba2d97d75712262fac9d7f05024135b7f6d5b0ca889ee288d337c8bcfba81561f191a02f728f7b64b7e1ca10192446b1f68f47a369a58f2f695ab6b6ccbc7ecd0da4f245b3a8c943ebb7abe1877c4eee04aeee1275eb89e4e1509de5528ad157285b8042427f96ae1ec49ddd5b62a363f72e0770075ca7a19b4137c2484c1295f845050ad351914b515f92e23d9b1b160006c8722764191a6c21f62cb15dab6395c1e2aa894a7bfd6c8745de236ac4540d554b03d4ca77a19dfa715882ed21efa47bc43945703491f4b73f4b667577c156282d8a7cefc367996c6f98d5109bdb2f1c6de24de27b00f540260390663d19e5b5b32a45c063fe0a39d729f2c5186ca1c64911d497d731b860233af31ad06f16081bddd2011f437511660012e28fd94056f20d051e959904f8a7e9798d6ee2af3dd1eaa4fc44db018e80c71d031b59148d99618354e13cd4ebc7b62b3c38c5821d3d8934e3fee797c1d1c9cef8d41f7faec023f41ebf554d973f7d41f626ce27a6bd003148f8fdc1928fff494dff06f6224febba035c74fe121a12b31750a08310790ae0afb5e21dde8d7e4800e475c753c442431ddbc6d01fbd8fff767f94ec74cb19de6a11573793daa0066e43e680e8b515fa1461f01bf210361a000eb4beeb45d03fa4edde1b98b1578815f2985ebf6579ef359bed27c1abf58da808ee69d15e4be3b7f0026df94b88e1f7efbfc48167fb0ca71d282cadf92e9dcf370e12703c17ea12022e26b694b97a9a8038e4f6c529a997987aa0e31bfb88c1e6a10c443f992c857b3545af3ccc8d370f751f40bcf1b0901571e726fa87c0794e7a14244a65526529709aff313619368ed143c090c1bd318effdbdb43ee8766becd72fb169583fa6d07e9080dbd72ef7cf3cc9a05fae72cd2b2eba05857889382b994466430b807ede3f9793d0a901388c67c702e6d563d235498909e00c4311182abc0ad246c175963c81485f9fbdf4b03189e9fa3350f0cd5749477cdec1ecd9c576863677ee4a3aab17104a434339c2c571c71eef46e12606f0f1021a8df36fe0d421dc86189abc485ec9ccb92894ff6518fc8d9bf87ef7e13c44beb7821a70f836118f27820e5588a625e7cb51e8c450de3619a2cbe1b932a316564f3c96a7b9f2f5f0d75fd52ad7c0b549f3fedc759c9e7f81636828a0ac45c7c908b323e862c44388a87da57fe4f3f1a02bf665f8ef6ce34150e8d99e125a0e084b015157e1a39359ca6ec118e8988a9cf89c777f1fc6c0f18124a466a86b4eefc137b6ad88b062272661a86d47bd87d4281d84594dcd301c56f7644146f1fc479d0b9db1393a4e82cf69fcb6326b816a81afd3cb939c4d4cd4e94744cbd6b7ca3e2ee23374849b37f54b8119e1e6afd8080c6e8c58f92668d6349ef31ed4fdb9b1c31584e048cbe6c8db4003ed01de0bd2006c52bbe5e2f2690f2f2ae386821523dcefed5807be11ec4cb3a5d04d9748dbe30fe5ccf7bade26f65a2f367814df2fb07448e6c1a7c83ae01b2dcd381c28129aa6dd543f8beea64fd6dce63fd292124f03457f7d2510df1bd0d01abf2216513438871faab74672565957239fca535924f5931fffcc3b6a7f35b6bb0513224972ee1670ae0c75714af39160dba014d7365dea401f379808330b4fe120e8a62b404d80ad6f4e6eb73e7bfb3e81a8aba1e20c84ef302baa17208653f8b5225b4d4053663748c0b0e6b7c46112bce6eefd4e575b5295685c80243e7f583354d34845cfdf80e21a669906494b382ea1b1dff05bbd7f6354144d54ffa1db45af4d81c6c0072f0626588988fc64bcc9be6cde8f707cc910b446bd97176d9f6807a68b0bdf395065cec1386276e4f262b32f01415a21671c12b8633732be6affd462d1af7358de016960bc02908fca1196aece2d6a124e8bce26ea83bc6bda4f9b2b1b56f718a7888845b22407b54190bce91677bef8135e9d43cfca46bb64d5c6d60661da8027a18a38ab0b9cd630a85b7a7611c9086f2425152548ff9227459e7f63b7b480dc89f75cd651c6df542f7ec309057c51bde64fcf1e1106e2170f5a817fab80f09cf821ac3a56bbaeaa608ce801b934415a7b5184827ad1fb2e5f2581bd7a0da379e8542a97563b2b805b129c01ff83108f63c23822a2cbfb62198091bfd19291b64db48d6b62d6bf1ff5a6c9e71b14bcbdfbcb84abeff5456b04ed4f00d2faeabf26066f3127ac9928473f366f0d442cc853c29fc61f955f85547e9b6d825a607bec52e05c57326f1e9ecc19659416189515d7a85d0e66a0eb257b024ca4807af4109cf37a18243cb810498f259e67743f7fa0ee79237773633ff4d78c68ce9e730e915b31adb9f46064b8552cee21e872bd5cef1b935c7966dfbf2dc08b6d5ece89234392abd9361e2ccde46ce086c2d0e9346eca040fe6bc978afc4b23bff35f0a66e13d307a92faaf06353bff9537333c909477716fca91ee3e245b343fba741f548faab5bd72646c6fc258ea3067223b379fe4b904d73a3e3dabdc2863be6e9ef9f27a968accc53e1b8a39284fa273289e9b06d28d19fb75c903332e2e33d4557f99e9c213316e21ea52e19cad2375299541fef6d0470d5c7c1c68c4a82d92426dfc41db70a882fcbb2d61c88d142870fcb1353ff50eb55275f4f238fd786c20e89270511ff180e415a24e8a9929bbe8d46bc9fe542166e6f33977f05f5ea74e9dd63f15cf784d9c00886197d2325abc4ef38064a922ddf7e8aa7f75b447ffb606119d795e3583f2817eaff8b5a3940a653d90c28d28e1c6e15601d8de94828baa378b0298d0115ba4ea60148b8088f5ef105195ff51c896561c3f20dadefee9bed4d40216f45f24f2da01ddabde763457e1ce03ad68bd6b873268b94a613b03245458714b266fe82bf5ee79bb338cdf2cd5496a8b1dae31bbfcb98cabce7eb756254e9187a45f851c75b935532675f060fcac464f04dccded14c62fbbf671065488796bad61ee8cb92306398a649dcf6466e001eebc272522eace9ff720ce93c6fd69798b368d3ad4c955763e56d70e42c4b36d3c0b2e5306d28dfff405b8167ecedc52d3366afff1e0d76fa2e06bea93375d26faa494721405209f150400f6de9ed60586d3d99a467409242b54c0541692b13b7a01d117d6b22c903961caa93c90bb7ffc09d20751b50fa1fcc98311ee490e06310f0d99f165e551d58370dde75cf5227eba1a35173309b5a4c05db85ace415fcab25b972bc929fc68f3db2ed0d48cad10757c4f1c35b68266455df4c877b9a0355696dad1d9182e30e4aaa5683fcf9bf7501c3f77f127bcc4cec701671472c2b2377e02966b6e3afe62c668fe25a676926d5e6b78729185fdfef32f4abf47fb63690f744a4d3f72ed7a3e1494c904b601713feed9d6df2668f72c5fc83e1b80b5be2a397cf322030459b772b2f84f44ec2fba8c87638d728ae7ebd25329d2fe02a10d4c21f2154512d97b0b1953cc0c288457abc0eab152660b8567c72f68c417b5fd6c11cbcf4fcccae20eeaa22cc9f69c93aa3da27a0aaaca955785547395895db7669748f9ea4f5e592ebb1fdf69c317aad5b4fc663607efc9b684be979a1b2b8a06109882d95969a388cce267120735066a2b91c4d82a60fa3f78fa11c25da6945ebfab395bd9d68ef324113ae281841a41a53f0d297c4ff26d20ffe1a6e385f391c313eca5f4a4b0ce3d339011b3ac73169ae50c8897b5d58cdf1b36fd38dbf2e75ea74c2ac67304f212cc8a39525dbaa722b727143e3c66262a73a1d51326c15e4e1cf3d64cddbaa881c7becb7f27e916ae868abedb01385058494dd07ee1b43de7d217dd9c86c20353d729b40d7a4d920f659811fb1ac81df73cd5281a5b22034ceb2bd41766d3e1156c2926ea033aef2370045899f4aa5620d8e41ada52f734a281022c6ad97a92ee04de0d502e8202a342107ff5aecdddfbbe0913daad6e0243a292ec987852e84fae14086d7c4b21bdc14c5b3b413e0df5e146b963550ca774692c6e891bee0591afd4e7b75f30de84cd988face81313b0b4c4f683990f8f969e4c37ab10937fb24e6b058f6ce852dc413796a2b89731c8b6f23657eae40ed3815f722c8b678bfd8a61ef641ef8e9297c537895c9fe4a76f7239421dd82052bb937a5bbc9836190ee3d4b8645529131b23c5062fde7999b05a5b0da54f3c160d41d9e9c13d86e9002230b97123f7c2a6c93df8a29e7df1525dd2883cfb7f1794fb1a52787f3beb43b6ba0386aecf65b688c18b026cb684d5d4a25f4d0a0ccafbaf37a7f39dd3270c1418542b324bf516d9e3bfaa31549842d124ddc7ba3f7e3fd644d53f6475c4025cd4146c45331c95ab681a7a4652591b063fbf80528cafec5a739a8e902d57a0af38ff75962584a054cc46b0db75055b3f60c8dcd11c3b164c24ff69c48c2452b31811b2e0e560fa2c3aeaf4010b1b2a1feff22bdd4c43850b14eb77458d4813ea8f98ff0a4f2e1c3d65a5aa5998c700af935c53b43af4111ba1c22ce33fef92cd372dfbeeaa3088962c5435facc251b4f1c7801554932c2f70ca7c8d3789bbe175fd33b61959c4a6c9507434866d155d8d96b20bfe0c3e75058107f8ec08e66439572f7f71d328728a264f4a4ea31c56eea4e87cc8d25f85ed35190723bafed57eb607a940cde2f495ea91710a6c16a944158cee6f492802e151cb17d190313111b6de1b59774cd0aa50e7c7b8b8613c04eb4812a6b762a1824f565dc39d3d1520ec8a68a967ff3c25052d0796d5bbf29f551436d94b622889ad0b380a54f4a059013a4c71e09ab3edac3113eac090bad5ad920405d556c32ca05e09ec0731496638e6e415f6be05a91f0b456f6427995f0618bbb105a4f88ee181630174eaf05d2e1c1722c1afb4456ec1bb69ffb65dbc79613412059a8c7d47648d2cc3c537fd0e7d402eb0f3b451909938bac9cf1dbbdf49a2a4b9dc401621d0e49b32159823c5040019000bfc43c660ecb5edfd2eb6f22548af7c90623c833fc64bb5f83b90c94219a9ffadb6ea98002bbe6ead26940f4cb0d6e66027146bfadbc96551875d3388cacad693f5bf5c0af807d3a946989815c7c78c540bfc501c899e45ca5f793267bcb54e056b5c5b710c3e2e88e2f8685729ced868f3c3f67b66f1f53bbce9af83e6ad4b025d477fbf4a77fe3bbee31bc1f780ce2990f10e4d6c02638f4967cc77efb6ea51a8aa3a427b16678bb4964ecf6110fafb03dd9ba7ffc43b2820a6797fb7c15cff31d4c6bb15eb80369d5a2f3110796aabd00fbedd68cc52191a36cfdce2cecac8cd0476feee594d7e6bca225a77c9a8670813655cff93b43c83f7650038bc1d3b5584355acebd130d876da96338cdf5894fdbf333b428d0bb2a81cce2ba0d17861ebaee62c2ecb9927d4e5dfb60c46b8fb5a38d060d30fa34e9ccb52ab637deac797278e5e30fe2cc319b40ed1b596e590e33aa452b04248c87ca74944017a94ff7d194b856e4f85b93101465b76d37ef6065ad0c5d93aa5697b12053342794801f6c10087bfdfdf803b6dadb21a8382ea2bde32cc87f6dae9a295b061bc3c6f5551e8fca38491dbab720e4c91b537c2ce060d1f82a700958a9c8fd8c31d3ffcae6db0917f51779ea5fc78c8fcb5f95282794ac6544542cdb82240a04e122649e66f2000d218e247a305b6a3ade559f553c225112ab60ba1febc56ea9581c861f237f667f0cd7577437d6de663c6fcfec79876da6f5431fc137bad0edbd9fe4a71a4e384fa5cd3a342fcb2b84c6f7f034a81007e8e74f17acd91775bd2cd1ca4d371f971373b4639f0fff925fe81d171312393e133e201c57ca179fb1fb6847a94b566989990331fd1ce24c62324e1c482ea6aa971a9dde3536b2f4fb9a6bd11976c80847d51c21c4845cd143e9b9f8ce808f3234f7570818e6545d672a730bc070b1fc2d1856a6a1f9c63858a973e7beda6ba8a669b4e52af6c131be6cdf23e1a562f5a9f7363b818175c5a50e065b6ff1b0d6b3337a134cd9f76b64471e015a587489fe5ed58a151b740a5b833724e219b6b394baa246736ae818d6fec27308a20955998749f241e4e7c69a143bc88bab4bb89050b2af243920da5b1ea2e597135a1587ec76b3e64fc64f3a07b8547f0367f1939d2a4fd20abaa983e3f1bce26e701e098974788cd6011792f81fbc61b5b33e78a81b37ad6557cac42746aad79293ffbbeab8080251568370bc6eb35d5e7a58fdb1630b4b4ad8ccb1356f1083be52a0b8b014db2021da464d35f3014bb0cfe7444009b9acf88e8d4419f1e0bf3a72a2b6c232cf3e64f291e9fc42b122555e299d0bfbe44e3243660f10ad227873bd611a37236dc6947294b0a44edcc29554fd53f1c5e21e17f5629daa373ac4f165feb27b02d8cfaff11f524ec2339afed3df81bf874068dadadb28a6a33f55d7c5948efc4209bf19837108cebf0c81dbd1998d48483b74464f34df0db0273b762c146a8efa75f291a780b9d05b9f66dae9b0fe0f7aa8b65a66da3fe7f2a57c56fa89ea14f3ad2cb587f8dbb4c8190796c518895332e5a305f5fa7398abfb365160d5961fad3ca65b95041984998bee9bf9465891e89aaf9327e5171cc320c48cbf04825e9b73e6bc1063813dd5341af0b63713991249bd53cc60435201bba12b25f065fe4c941aa53f1bc81fa1ba08db69cbf99f36a62059f29fad9d21035eca450611e67488d48e02e1e75ce052ad5a82dfe159eca8ad32dee46c7614552b2f04fec2805f7793e5ecaf02687e721021fd925ef7680121aba238cedf6cd16c9ae0a524cfff8c65e6c5525a7ad0889b5023186087c870a8f6702451f27cf119bdc9eb0a0f587734b6bbec0d90e3f3b03cf7971c0cee63e8e0462723795c020743ef65c7f2304d91fe639ec98082bf148110494be6417f473334d4d45eb004b67950fb05b30d9b965f8d43073ea371233afa7e63b6c7de7b6a9b4179302f6d5d306eab5fa83e9662f0b54602d476b74aa0ab728b0c1b59beb89d368a04d16bdb53a99773383ab8d51393b7c770b5a43f320255bdd66e719461b69e5f53768e6cf147d9d0555a48365177521ba89d6f5ca6778c54c51bb427b8048488d3438eb4a44e87154553b8a83d952f4b226742a8b48b91fc6d50b86de444e9bf7c930a37a88d134351c04a285b690669a7641ecdbde17daf882b3918a39b99e7fb05e02cd12dedeb339479f4606ef302353051681fb23d263d98785a2e84525c887866d2878f7f95e3b696e04e355daa8646dd317acd22b2002d03957d71c834fcd3563aa6d6a6cc7c21b82fdc311087a617820ea3b2baca1831909573e13c17d0ec88daaea22f16a86dfbd40c814467ee142dc0a41051fffc9c0227b1715361e2e88bf344838bbf0a08d4da98a7354e8b6ba86dc41161fd88f2dfe0c34089b77b6c2331ad726667de1945b72e777fb52b8283d525952c6486569edc01ebb253f8c0e6f43f0be8d1c227ff7149e725d382ea6956728f47d902f7c9b761f1b9f0651dba355b9552446fd597b245fe6f8aacecd8af600e8a9bafbcf3ff6effdc2b7323066ca1073e0190e0c62f06c5368fc4081b7b5d77b4196abe47bd580121f2585dda9f5045262d1469e23965841c2a9288d671025c805969bff8723cbd23562c77c99af12627f07c8ad35b25e93b93a8542facea73b4e761bf1de7d242b17e3357cc3bcc56aef456ad4dd49b9d4392de94cba2316f3999283d1ce298777f1337d0850e77e0d46d7c171dff874a3f8ac2f14266e10d114dd166001b6c0f54af494582a437f9e62e9134fe52da87d498bb9126b0bcdf2bf3f60a0350988b6e6138977bc9d55d397d0d6701e61f2f415956cc2eea7bd560dd2e1eb41d4063a57c5268b5a0f1bb7b84b0a4ef3b9694c3d5b68d78c3b531bbe1f3c7d85a3277f9c6a20e493efe5149dafbd5afceabc4bbb736e5a0e31205e0e94262db485d2fcdd3cbdff7c2304255366783b24fbe5457239de87b0bdc2ca0b13edaeade5ac4778af10081c64339354979c6b582fbc55ccc4bb3b126f8a17f2e90fad4d3b43e1ceb3cbd728a6ae0dcf4cbcbfcdc8231ff930c563207094c8b2a7f4e368097b1e00745b0cbea8634082e434cc8bb6ae8407ae69a0487bb514a4b1222d20050e1dea968d5c2c4301104a21e5a34ddc880eb9d94dcfd91d85ec8ed81903e798adc229d8bed405d176ab62cde54b7da334061991ebfafe96f3bc76bcd75c3d5c74e120038e976c3a531cafd439a6b79cab2ce10a3602f47efeb6ce204cde5dec3fe4484c111146cf49c17954e60e04b9fd40d2c596a4c469e43e6c1c641bf458128d4bfa23d4033d3b311da1b60b78a6b2dc4bdd4c5530f481965786ef038cfa040484ee78f59de19fd8624eeb5ae89aada56038398cfaff0d1202f4f0cdc8e28fe1a16a86c51222a67253afdff315704a4122d4e2250da95e70e22b09f8b6b27595195b0a4ace780eccb7bcc1b034299a04b10fac84f4a60d2a933f8ab57e91ac3efbc608e1ae57cf716f03c3f214d2f2ffd16030b085296949b3233f7d57939baeef3fa8caef5033d85fad5bfd086997df6c25bab578eacecd686cd7bc3d9cd0ec79ae0a8e2a82fb3cbc05ec76a0a739b58ff096cb56d4c474f129c2b1600ccabc6a69ba9491ca11a7ee813facd188a55f75c9c1b358d2a5f4b4f34c03e5b3cc5a35df917e278531ccfed2c114cfd3362f8dd8be82367ac188d72be8dae17460eedf223b39d496f5a057bafe763031402075fac56b80577eb8eaab156bde49f819c63f92928592732587c471c12c1c96c9391852dfd806539adcbb2f04c98559aeb06474707d7486a2521928d74315b4bca54e75e9814553dad2086c227182633c2b03592c1859b958b3d9525853b34fa64559278605c3465d171aa8814e917886c2dc2a6b499750075571bc8a2360f9f6408a22e5747fd785d288c6050be1908b855be74cfcc4404721629dd81b3f025d529b86892425af45cf0d73032c8b5bf544c2c8bf9628bd6685700b0cd66bf2abf4e242cdd3227f08d344dad3b0fced612e743674db4371caf43c87b38c17e724083c7785009347379481649a2b0700422891720e4fa8246ce78296a9849f06d73e5aa194bca95f08cc949969c95164707ce15eb2f20286d1bc3aedb18c82d7529769dcf09597a8eb0db407f0e0042807c45f706a9bd881836a3a63e0066fd9fd5b5d5d26e755394a036369d90d20269075deb5e77b011c35e81821ec78e977a4eeadca9d9bd780deb8c4c0941a92c7d166811d93cab9b0511b8493febde2c9165a82d1a305658e88c2805b53b7f1b169aed1bcc55d242e56aa0780625bcbe7d56996026ad50fa452830eb3c88d523b1d2a6d21e6130528981b05b3da14dbc076ba4abb74c08c6833c29b42c00e420a21b798152d9d09dec75c9ef6099869718212dd68697083f2c08cf73ccf3e42733de42ca3977cad6e2acf9e65a0245d0b59cc2c102b12f6448b9b97fa8233819d9d425b1d80bf2f90f382823e3c1af0fa5d0012c4c9c94258b38b92cd3f90addfe65c1e0dece17670f4c5cea911a920294d94a6c5af3c3abe33e1f61c10e0704fb663a007fa2f4937b15a7e0b6d98d93bab98fb2a292a65b9273cb9a52cca83902cc172e766f50101e44073cc72cf79ef4520ee36038be91153c7f2b9fe6fbb41f681a7575b32dc503bd14868afd557b8f6ae7f3b7ebc260cb2b082ebfd09df47b98d84617ded5b1d6358166a3bc7cd308bb754e3b7550bb78878da5dd4a8c03937c132bee4e40fcd24aa3c1bca5e37edc0d7dc9dfd541673c210b582883ba67c10e4bf698724e0a3027adf005427de36eab1fd2e656d0f4561336f52572e95b99cd67e7ed9987ec020faf989460129199b863884f50013e7af3602c866d76afa401a41c121e9f429dd50fcfb73ea4763f187bda7c26ebb5541e002e201f1eeaa2382817509be4176da57ce4b574057834b559dabb485739bc11fc237db10315431513c38f2ef65c44cf6e6801c136655cbc75f89d5b1adf68fed75dcdb545f24f25c2ae565a5fa65013ce483c2a30b798a1ded5702cd2a77e4663b3ac999ca4572dc860934f2212427021457cdd8bdb2cbf58547d76c4ea69acd950ba70a55d5484a8cb18e1a3e3b2214a2e7449c2af9e50821fa29ae2df414773ad0fc36443db6d25c0b9b68023dedd20cba3f43b39545734f983ddfbb32ddf99c9b4bad6b86fb491b7adc8ab64ab59dba396c5ed589e243835c67ee74b861b12cdaa552cb197dbaad05547ffdfea2cbfbca72175b76999bc35b795528646dbf1b6006e535f899016593c2d54661975baf23ea2694c7a532ea4d126a49eda08ecb282beaf8a7da56728779f6d728a3a1241cae131d4615a2863b5dc74b9458dd166ecdf3439cd5795887188011715f89172ee8a72517f15b78a69bfd687efa0a3a7ec50abd1df7d61b977423ad2e070c57a3ec787b09b9e49644297b901a16d036a4d50a2e7ede3949d1d7334d222398407767756d294c8ce3a6a185d27b29aeb97b56c45d5ee3b406af64d85876307db5648ddb5e746390dbb2329fbec7623fb14e5d74fd1957fdfeffe7a068ff72f38e73d230f518cf5a11303c8133bf151e83d89bdd0184554ff904f920d32ae59b92a5808804c4f54f3fb7feacedc0902e45b1ccf5efd4c9f5abc60972ef2732dcdd6ec30f2a3c60d2bf07089445c94f7a3ab6a0c84148516401513c2eff4ba027cddaad36bceaa25c72b7ddb1eca142640276cecaa632191363bd6d1bbf954e9d39dbfb195991c6a18faaacccf1b1ecf2c1044617531f2026c8fc884035470a2339526eb19bfa7840d548ecc98377b88d2e850b73be3370b865822c874ff2e93f4b5f639d73d64a535a56d95db907c4dbb37f1aef33152fadcbad82149cf8321a8682c6a46b9bda53eca28ced2a5fb3dcec49a6d8d56ac66cb093ad33ba4990414086fd084cacf6fe768bb9e66e282ab5615e65381b1a84016822bf3316632026e091ad906757d1fc9f386ebf3aae89e5bb5203572d2a0cc1cca1f131506e7c698e85e8d992f7b5f21901f16f64171547e5cd8a10d059a2ba33ddee67a5080e302ba9364d287f6fde195c929f040fd6a6e55ba821288c0421eb81af3164d46eaf087f8b7dba7ea2427305b7556dfd1377f020b99e563f0e3076bea4ecc13021c4c8c9564ea317d02fc384a59c7ec0bf285a13b4b1a8246641324a30f2dc5b7e68865fdbf4c60ebd5eeece7316d920218a6e4f8f4e80b0375b2e86c4ba0203c950f19bad1da14fb2f071824cd00142f59f8a07a18a1498fb50cb52274e752132b6c9771ca0fe815c6e53dd1e60e86b325ee911da945e3760c4516ed714adde8192e8a83de6d5beb14dc351afd26f9a03bafa29d5222d5a19444fbea779496f2f2c4d012daf3a9063ff66f9cd9a2d3a5222dc96bb981d0071d1d5b753ad56838df8c31575007b9ff421a9f7310269f627d34c1e95f43a99a4df6d2acaccb98cc2632a41d11dd5d881f72f48d49c0ba1cd6d71396c4dfb3e622924e8576d75c3a03d35435e3acd2913d873b24b44fc4a6c0b6faec4d526ea6aa7b1be8055818463708f3a73d11c5ef2d1648f0b7a1f99b80643cce9542d99f420102993adf54dd05bbc4a727cc2a869f7fea0c7b5c530ea2d472e88944e32ac35585ef6757eac25fa520c1c26d96f76f3ee5511bc972b76ebed13137abf4b44beaf8f33d26bdb82c859d8d01c5a0191bc56124ff19daaeed5036fa2f0e10976aff62729a991efe1a4e60be14bcf785e2df9eea121759c6700f8e3ee32e556b8f183761068583cf4e1e7a9d697409c982cfb4a2c9175e7bbaa5b35c65bba0cca9ee07d412654c2adaec927f0e9cdcde6cf0274d9d5c1a395b4420ad4c1fb10f879a900a4d7dbcdc06b2c511a7e331956d98dda11248ba5fdbc305308e4ef778272afa8680162a135b7f399f28c2ea90673d823a1f65c686950cc14145300e9552a55a93d2c9c2c5d2da1b186cb7f515ab3b03cfdea00a6a10c0059f24f4827c64004b22a0d9be8781d67bcde298e3c86a4afa4d736709a072542f36bf2200fca9f0fa6b66f7f145674c6e8cbcf01d084bcc2b9b5e1c5174efa25b9331374683a3a7de0ec3bac90c2a3fda09519fcd965bffb9204fb23b511ad23d060d78613bc18a4da0123c8969cbe4f69a2ee088395b2033d26f11807c0988ea3b26f46ba27dc660291fe19131a28f99ef7019135766a94a57a52536bd84bbcea29c32092a9eca894b73a2d466fc4ffcd78a22a5c1e85c83be6e2f1a85c77b944107a888b399ea85df0f4f480512c93a55328f727990ab4aaa4128e9a45adc2b2a2e98be89b5460322d17c28bd14a33730fd59066d96212dfc2bad91c0aa83ab21c2406a46fd2ce00752fe06a7f9db659aba2764e4451fdfe1218edc429b96bb2d114eba78b5a7c3b3b8277c4bac16abd77265d3255980d2a9ccb5d8c2e32f9beebabe9d6fbcd0eec45898f88297fe25be31952b65e6abef85754a85392fe77391d61bf3ea25d2963711048197e1ef6bde699210d013d09255978f7d9547b80b674870e32ee5fa4b5d2a171a9255dc64f690f4bfa6f21d9022804e1fc9c485f95a1bc8b5a0e91844def017e067d4574927b5a138ffc912c04c3deacc309df343684a7b0d6b339bbe43c04e9f309ee66c8dba63a3f139be69025c9651c7c62149437b230e5b1bf6037f0173e3bf23b057d99a8179fea44f175944839e90ee43758985d2e21bda7f92d5c44a52a0e2df9223abf1300e7ea19e9f951a23f442e50185c05efda4ae9763b33236b3af635e615cbf025e3d9ab8c7eddb8f40ef1cec04def0dd0ee45db61850f4674d78e7f1464e492e57eeae01936d5ac4c55381ada04242803a5587e93e1f0ef17396c3b15cb1b76781a5bc351f02b130c6d718195fd694b8f613059407d9c79314e7725a35d98861cb035576228b7e51a570ee3633d0365a4bae8746ba1843cc661bc89e3e939cd7482251d633a760cd4f8e8da654034c2bf5caa3d1c20818c00f2767014775b065b8846f42b08004a7783ffae43483331831dd77250a98b351bdcecad2189516f8e79f86e8c0c70617ff5464dd03a8174a7abc21b0d88f0aae09db3fe2badee9274b4b16c442397b683f6381f4acb8e0f35eecf40197708d6b32b42ac3b67278e7667a64faf46aa46bffd1949347464e5b46bc697e1c7c8e8d4eb09bbd1c6ceee5c93ca858b217b6dcd3df258ecf8012e0054dc5238a54783993024dc8ff0684f7317e4ec2ea0fc45d872cc8e9cf18ec06774a00af2fd822a6c180770dc7d16818b6210cf59f51a8d5fca76ccc3b56cfce3169eac2035cf789ac688ab86a10a17e39c0b010edf5a04569b01a69f2b12abf2efb6a86e01f20187e7ae7de022ce1fa99a4576fdef1d8ed418fefecbe090f627b06432d20e4a8e6eba2c109c1153456e68d4e280c1252368b7335ce4797e4f96ff13aa7b43b994043fc186a96c6072d5d87cef5adf93c960ee2fd64300c8285d8ae06914f8eb77058d893d9efb83568aeeb29c8a5497d8a6309609b155006ab74b244388557707d9c35b665d8d745577d9d435369ccc6e802c658bfcca070dc51beca1a90c9fbba0cf2064fe5b5a5e4255ec87bad1af3bfeb81a8e9e122e091e68364a2e3ccdcb34d722cd344877e19f1aa126048c9c5da672a27b87474725471156fb412e857f41b066bffb828b0070a508adced1cd90246711eb0dd82260fde84e10d3af664676efdd0849a2d7aa5b65c3f0e07882bef5ba26980f184ae4d37198e9064d73a7b4794edf432ef7df705f93ab025f2ce6795e4fd38a170931120bf52f064e87c5386cf0f01fc34d16adf70d1642f92c4d1fe3ff63abdb8b20994ea9736b56966cc4916b5fa1ddda754c93c8c5dd29a019be9888dac6775d2c335cf0766d8475c418ae9395480ec3d0a996fdabc76c7cfecf24a081809d829d2f43db1a49b53c5ed4b9d555458a3924532ea62184f7cf2c18fe2882bf546fdaf9b044e31a346d31c9ee0f218f7d825286c05f811cb7e25b44dea82ad292f4b65eb30c0845427fecd7be04c8fe7395e3e324d98f4a6ed85ed0c5fa4ec8bfad88b1fbc00b6f9dea334672a4a4a9a5c4f9338c3da6ae465ea00e4db151bce7131620414a52ae0db07f3592b069e0c029ede1f1024070234fbe067837d308ac06923d2218bf92a8484246b7fc75d68b23b68f2846c8809ac9da1081be61e111b7348c5c3fa8df15754b919fb2cbee6bd0514cc5bd18dc021c34f52a2f3c63791040652284f0a8bd65bf25d757c9938cc068d617915caf5cf5157d7ee99ca42d6ac5ee9d1f6824e123e17c82d12eadec2ea3eb8fb879d682843598ebc77f600adacfbd63d23713b47ac3556d378f61976152cc2946e19810be3847c9a415bdd7827df6f1d779fc38205cf6939d8c9e541c893de3c2713ad19b33f93a816a094d2d36f1f264f66e37eb5a3a0ad10299ade9105947ed7020dffd7f592150b63252952c1e89655216f0b52924ed3469e293b63edc62f054e395e3eac86fec57304b735c8dbaf57162ffa89b79666dbff1678adaea712801cdd671948850b3f7b905c31505c6a9ac78d481be6f1ff81f49bbce07983843519098487d5ae68250968e2e024393180c4ec4a693bbe20040c5530c9594561ef5a510c964b17b1abce238ce7a5ede809e541b9592fc2419c80b3067a0a3bfceab26473d16c55a5985645c49a419069e3d716daa19fa3ad677e99cd64cd43e87761b3305001f8e140040731fecc93931601b7351634f6883221c031c204ef097d46b810d23e3f68f6859d9ee9a83a28f5c9b60fb9fde996229f20d4fe50e469ddf0c4ffda600592f17dd14b912f3b80356ac74b3461da18dc4951f26b2bdeb91c1b989f3e55d39c18134035cc100e816c3199a0cbd3d2ad20462096185e0ca70d51481fdb7c0d849d91052f4008fa6b620e7728c287e3988c592e1e6167db7018d15bdcc3c2ff129f6e9108159c3c0291f7004b9eff4826c76b3dfd9e6410e9dc8ffac9df9b75e5bce85979dc2ca7e86704e90dad9c093ce4b2ea8337b47a51a4a1805f9893c222d2ecf18f402e9bcb4f6f8d600e88949682493809b63db49612022290d57295ff528f3fafdb17ae6e03a57cf6cde56ade8529ef5a985d978a5310cf05b8688d88c11a62914b8cefa2f89534c344cfa72cf28927d5c9478296d52de9635590454368f0a8da5f8dcdfc4915330e45269c9a4c65cbc7ac0daeacf59d4bea87370d885fd7c0a6055172daf4e9df7048c9c0bbf5e48ae8681818d29486b76c350b7ae28e2748927250600b79eb1f7cfe3dabaaebbba7a53d6a39109f9251e62d7f33b6c3d1f7b46e20f05ca54c15d4d956fda897d79dc894a9a50f45c287c0a9fed2393bc0473bc759367707c9455b4662ced3da49c92e1c7de2bcc37ce9b405aadbf33c732a22c9c226b0df9945a988155dc0a41848e757eb6cc9fa5736c3d3528d242d6342ab62ac1673480d579d4f4b990c33727d72098aa08d6ad523da1c849b682a88afef296d20ae9ed8c575a6d1638e4f300dad84bee4a693775965d5c71dfd7ce41fffcc4851ede4abfb264f7dc840bea518c2d280e21d309e3d03730ab7f0e5e4d0db09e5b8b377b2fd8129a7306ea6a2c4f620962da5038b6032dc757698e95726e88d5e7c5e91b7c2628d34b908c44399416177dc4b604ad9ab559adbfbef7ac8e80a93da085a15bf934fd9b9d41e923758b0c2bff2ff52d1c84403aa3fbe52709745d53baa66808d096b32e1096be0f5308cb2acdc9476d47eb43258e04c30c91809c8d5a978d05cb19523506869d292d10eaa23bda94f1a2c545649e9b0b1e9d0cedb2e05220d893ec33f347ae3e3c2fecd5a01b65044612016cef0aa5ac5eca7d4fc9ed64c83b072ae4e99edb2dd1742fcdadf425b29ae6f80b39fe687501953a34b26d66e47d6ad448b0346cdd0fb84d7025e16bd4170687577ec506a5a0a511826546302ce328712854fb08c5984719632171274df64bd41765c95828eae0197af8a20fe2b376033c6f4583bf5ccb208dba852780d1920706a6b3ad666e9f84e50e863a3495c4fba5181eb609e6003cdde06669bd1227a780e14d76af95a594b48c4558857d20d00fe2ec3542fca1f912b9bb5e94b38627babbfc3381b0fd6cb36920cf62d650a0873858d3313584c9c83d386bf7fa1eafdb49adc15105c00f0b0119ac68d68bef84cff0affe156138b861fbef7f27421ca95f55c60c79394bae763ac848ae7853000462e43c28e465554e272f0383dc0a4e89477f519171fa8d3f523d33976160a6b6a019968e7702dce56f9e5bf420a5b1c92fa7ae962d9323477fc1c83a6eee704cc028797b3f64390d48a798786800e92a7219b21fb09a19f2a0a0a83d4635d5914a06378e871212307a6334ecc038d91cf83b12112a0c6f16ba4a3fee7c09cc370a20bdf65e04f8012371d5b69998c6e294ae9afe3a9c65f9a16ecbd0a6727710d65731821272d7f349d7256c7df07308459a66be31ae8c4a4006e670db121147f4672d2ee73204b96487e71b07e760a8f2583c5dd525a0da8b9488e7cc140898107f78cc5887b0fc8290d0d4c1020b05ce7722bda6f815b40d3947bb5ff957b57022c1d385aa27b27cb9fe7097d119cdf2323439e5891330245690ab5ba30592a1288c41c4ce86d097c5458c21e639dbbff055f6ae8541f8839a1d2a1e2b4102c1873c1fe3460e0e881ecf73299893c0cf8591c83ac8fdce7569ffb58d388d79adb982ed42c0e48fbdffd825aab9a854a4729c346e2804f6c516bed5275f18d3fb980c52a28518ee3fdf9ae280f38af90eb5a3c9b90a38fd2591655887f148225efb26129d5cd96faaec57ec7f36cf50a8c2292d1ad9b60880e3ea6df6743a8182332daf41e815d9e1d09a9ff321929cb8a154fda57686b89f452fa090ed315dafc855fc837408754b8e2b912efe92b1bec183e926ee705f3dd74c4be072653d9205a78deec0bd9efca274067f481e9a9ab61a69472576f66b7c0f72fb979502475b5af0b7ee89f5dcf6bcfcde25783e5bd08458646da6ab1827a25ae4b38c1ed28a74da31964d5c4ec8b1f9f29fe9aaa8dd406dbee6f7c8a994b16aa45cd51c174ce672e0a75d7c8a7e6838d278a0d20008fa97501d769f5ba39a0de50a8b329b9d0923797abd130058dc24035b39c2a6339be46c20f7dc62fe598e88a8e484e9af289319bbbf3ba7ff42712230c98f714ba1981ab558a00e51e6cad72bc9791e66da43adc740f5df8bddc306e92c254bd7275c46782365fd3cc4fea8c16d3990c4a9a4401a0e1131f29aa5bba548b994fb927ef3a9298e0f34fc1300c223ef49198da3562e66a139153b51610e1c74a14a2e02f5d12957f5a16235fd3577c0c7e6d0c9bd97d02cb21f7001fcabfc7e78e4fc2d88264183691bfcfc3c19fcb3e4c5b1c379cfd52cdb90736e207c5bc69f2f9e04ad9a7c3688f56617dbdc525416e5c87d4ef4098127bb8d9bf7325162701f04176b1dbd6c7f88f3915773614a56165a7cbcc4d90be7e06015a68d5c92b1a961dfda675e4e745af0b2fec7890cb17b519a734bf73b451fbb079d57ad7e9f9764bbceae1b95f6a843d5aa5bcf489a81ba6fbcae57c3493afd6545078e3aa34a37540bce3201e8022b2d01918319777cb00a64757df0bd015c3d9227b85a8a34a0f53f66be4ff62ca215e49c3d16ebe03dbda4b822be2d735c27edf0bcf151080c06898fd84a229bac9411bfcf10d1b56600c587155f556911ddc6b49e7a86f4dfa511bf693c345a73e78d8f778d14c3200b9d904cc7794602c36dc20f8d638a4ebb69fcda9eb2a89d4557db6eef1bf862d3efd32397c550b98caa27125a8fd78294fe88c66c3fa5cb1dcedc715f28be6814fb57f596b9865c97c606e96cae94badf1408c5cd41b88e2b283867a0867a1ed3a22fcb9e3a3137d25b35e719084558065cfa9c92f4ca758d51ec411137301aed7f260946219a9909b110e23432406a7339dc847750a581132d127e9e532d8c6813389e6ef1a9892ee4d5483f9b011cf6f82d5dbc25871992cc7fbd93e45f208c8cc3d03af02ee15bd8cbf49f5cf79de5f9c5ed42f3bf9122f6099702c83f3185c684e1aecc2f6e851681cc6a82f34a6a6785ec7d4a8d1721dedbc8de1d172c7d9329541e8374e81241ac66eb6dc54ba6b827ec6dd960955c9289bf24783aa432b40dbe064e9bcacdb258f3c4761b53ca24e5f91d7f63a7c4866b9552cb19fe0537b07dd955e5280695178bdf694fdc7bb5c3c6469176cc3eae9d4bd305e6858a7a9826f1ca6098343b5d547514f7192acc68f6e45d05f2463349dbfc5c29c0157fcc7bb4b6be45fc40c0491c4a0758317c6e56dd57a18afddebe13f0f860046f6298b0a70b48098508f865eba7c9a11174b2d79ce8bbef2c662adaa9474df8f79898d22c0940e4780756945fefb24f418522b290ee02ead2df7aaa502883bae4f0e1fcf8e2c7654196f1ff772a1e72419e8e4c98d5559ce94ad0d725e5f736eda4dd2ecf3bff8a48c9334468c4f39f4992696c5d6a988ac605712cfc1d03b33c27b75f653cade8578e09eb786f10db4b53a40f237fe2a0ab3662c107d9fe368370e608f251e5ac1892a08dde1ee4664bae22f37305db09cd2fdde3c797c8fd55c2d8c4184ee2bfb4b24d1446d224e9fc3835cd475788892cac6274657f19b3ae77c9281740db71df5fa5720fa024bc3a1ed4f76ec8bc8eb205ac89c431ae8bb3905c4b3ad9d3de837cb367aae0624eba80c51802f6270d275ff75f8bd29a5daa4c2db04e8339630bf69fd8ba0a1960dbcbf1534b1644f0334d362950252b62c895d3c1f12c2705ecac9f16f14a7d9c70bc5b3f395ec2845c56b19f199d101ce4030f849efb4d758ed7ba3dd29f870b5ee4119e3b460b38b055766e0719468bc0a7d0a591443e244a73c4bbfc14551714c352935e04f2e28b6dfb8b55ddfcf18df3e65617f553668ad3f4bad31a0ca4150b27c6bd665b0a7f33d549f663c682a3556aa3772a0ac5a861b4462213cecaf100eda02e3ec973d95db748e3e43f3bb135d6abc5108b85a022f058f97000b90ad5fad54eb2cbaf31b5e078df9762e332736f66c816f7112c2ab9a50af3bfd627630afb250e80f1421223fb31e8634ad044670fccdee71475046aa49c7873f9ae2b7569d7b62a696be86ced59a2a5e6bd3847241ca00776931a05f9b8fdb0aeb6bd8b19905760baa5efa648969ddcf162c5bc90ae99decc547c1c4ebc24dff52a98d238ee867a4afdee5070919139813e29794b6380fe69f3ab30b9182634d5bdcc8349da741328c81181d22588e2bc875826bf0b56421aa1b6716883ecd1f527c3c12a8d25b84c351dd4bc74751a42c27a4c8f88606b79c4dee843e1fc5808b5682d60d595db5b245899de30743c13f5fb3b07fd7c1117d3fcfa728fc05df3ab0cd62074b0e52819fade4216bd05ccc332e8a5db981f726a3bd80559935b458179f86a391a28cfbabe7fa98468cdadd62a961c5ec5edc45291793817b0e675a1406a8a82403d28c9ec1039fae439e1c35e31db44b6ba410956086fa1d2b3f305fa6f7070e000cfc340e4fa24bf70caca41a79e2a1ee87f944fd7748c5dfbca7d4b7aa0b4a852fd106202636ccaa11aefb806c52b80b5f8f8ca6cbd1bf58f0bb87f7affd47beaca3f3e55d5aa1ff1fb8c276f67edf1ba7f51882ae95af8e5faa9297916d5fd1a700e5538318065c03ae69aa9bf0b51508979e1093b1f2cdb47e6577d4b51f99e55d198cb43889640744672d4d4699f18033c986c07010807b9b257b58a13b99e09c08835282bfe64a2028d24b1c15a994be247d68148a4c846c32a77f7a19c9ab69691aed8f6262f95041c676b4dd96ddf984d02c3fd36485a21e39f2ea8b858e37dc57e6faf7d6e35d014e28963502b5953d74cf2156cf00a02cfb3fb8e70959ee11337cc0b23f4cf5add92805fecdd3f286fe627122a143ecd51747528b80e6a7896e299e199db78716dc3301dbae6396bbf159e3d7dc7ab12970777337b259c975f080d1cf4ea213168abb9b0ec8fc7a0d60f6eb578d394ca0bc7506108844bbb1969209aa593be8488bd7442e4d0cc341bfb6b1b4143bc5621431ced87648cb4d68820d9ce83a008693bcb46078fac3bdd1f66a9d97991d5f547dfd8352587ea45255ec02a9181345cbf6d39a0964e13292a88d49c131704312cc97d276a1c91e508311cbc06d0fe2752ba0d5d3ffa84d5c52ce78ee51b6a70b2b80a1c8199032084e1e02eb67c7c0c98750a5452b7c7e1e96ae430a1668581db123cf74fcad1193c5f0814cb4382894e4dece3356b2cb9997adbf82e559a65ea7158460cdd9f585d911a0c6808b5d975cbb9b24f3c58d1a1dd9f4ebc5f41e4dac27aac1992567e9103392447fbcdba4b2b33e9a96606a0122966b8063b03ea7e477524fa0796d6e90120488eeaea7a32703f898e0ff2132b1d963406ad3ebf5fb1640f5c804f4484972d66a0cb2d5f5e5c76dfe4a64244c41ea1d33f5c701b484bf5bb51771e6f7aea79a09bcd00da4f057d6c896342afdc278fd65ec7d2dec7c7e78142749722ac3da41423201d8957434733dafc4298ed4e9c2c346ec6b0fefa40aeb4be323a6e0937ba7b4531db3d5b1ab892af0f277ed5f45fbd929264d4a7ddeaee45763bb18ed70dd90a3ada4992aaf64b23b179054974d9c7ef8fdd03199555a24460ce24d36e90b0cb9ac9c3c3019ca826969e59fbcc6506c6816017b14af49350f409d6166cb7c2c2f24df5f5ae37f505a55585ea26ccb366da8dcb6a05db7fede272920f5324c367d3087f04fdeb331ff89274bf62699f0e262c5efc4a6e7da2198b4ab5ceed6cff73658d2e0e8568ebea7669adc921b5d58490678afe3214668e35297092e9ecf9e3ee6996bc856895797db4cf0aa07a5c384e68251424ed76890a1c895760a966f423ecea5e8a626997496844fd7c4edfc1b57ab8bc718e005369ada48142a53d7bc86899340dd999c025b6fdcf3a1980f8b84c2e061c3bbde0fff7d186d5dc096413edff08afa64848e01e69d4d0e719ed00f8a38e0a38f162f4077e0bc5f6b57a54d34620cb85e635ec065716c3c3133b1d819dc84cd9ddfffdd1e1b3528c7b01ecf663e7c5d63d18ce0a790e5a2a5929731d8176e1340418cb8c44ccb78095058cf1ef2e5b2bc8947be31b680c92ae9ddf7b6d43da87fefb1066b778c12a8d3fceb2ffcf224547aef5d2ae226d6de1520e2de8b1e06acefb53fc62213d63a9d7edeb856df9b7dbca20364170e5464d7380c689e35dee2d7a4d567056dde337f9eafa570c14d01d6a760ff76984b2bc176fbc4905deef20f19cbbf591e0de1326af011fb5af77df515c3d733bddd7e4164c24f937657b522ba596f05b7573546d7fe5a98fd5c643ab40fd7bd4cbdf846af979dc37ab8ba7cfa10cc2e69a96941072b5d78f1c0414232c8353d89d0f61350cbc45ea49ae4828894e520b2a0048ac5e9dd3441dca9f6a1ad30425ef5f11d3069438a8103ba18f905db1566f8d4696ab7fe3366d95eadd765c630f6d36e17ae3fbcaa2855dfa8235c5db4099937cb5186ba877510b3bae030f58163e1ea2d9e39b54fc7978bc9a3c38964be5f5ecbfb79f7b92b22d1c437a0b1534a9b23116607852fc42fe5d4a04388cb57125cd7f63b3dcfc88f7099cd57187b3b6959f500e554f2b8c7a58944b70016d45d35b389b8a045cdebc37b19c2e9507b8fa3458cfb0fc36277fc9711d677a9d47cedd957b073f78c8735136d1e7da3d44aa6f8e09e9dd15feca54ce9d7a9af8fefacbb0e1535f7836ce6ba5556b06f29bc5908fca25d54bc7335d59304c69490caa09896a60b7fb8f61edfd9f4f80cb571c2964ac22e1067a356faf6e74eecca7185635f2e4b10a66a6f5bf38ea8137a698978e3a17b057d9473d931d0d492379b050ffbf9f6c583e41f6a24990741ea6b2eb66398a8d8f1e2a756e53dc50030c9ce7587e817395fc32c8a1b0d68c9e2d04d8e970b30ee765e46b352c613467abab612e60fd2dd919a4a11e7af2b92d942b08ff17c7b7056d0efea1d3ae149a13c2ad6fec63f467a43a7ca939663c79dd0e5a17e3f14bd26b28f1fac17ff3313638e8ccf7efb0bbdc8d49a4e996f8a7f9bab20a2feb6e37bd59569b809ebeb91e1a52a1309a5569c5fd0201c42653fbfc55d3f971ce8664a6ed695b0aa411f54feb32e2d3c9beb7b9a98372676d330a55ea3d81dc02b20426831a8194aa683c3feba281e5f22df42d09f2c09910e6d94c788cd0f88888aa1c59030c260d4329e30eafd336d75a9aa1535905ce2ccbe741dae4db36aa60548a8ad1eaec685c52c4da663128eaaea77a21764d374f6f0f1de2106e2a4fa3e36f81ad069375a1d24fc953b9cebcff0844f8ba9137c41706a8f51d71393a9838f533354ac7d78b5ef1ecba1ebe3ec6079dc1283012c8d67b570f3d43e1e96dd70adaa01c3a2080836fa97e5a6ca4e59493cb8add305199257770898713ab13067f578cd247b2136c5b4ed1135f7685e816b8ab622ab1f85bdff69ea5ec2e6b0499b766b0ec332d170ea01b14d12f4313bd757213195aad8a9edcf9f0cea6f5afe4bbadcd6957573a93bd907297de0b1d8fec8606a80d57503edcc30becf6635a532cf06665532fcb34bc3cf2110d48f36a7595ee4d8d357bebaf34430ed337842234f39864bdabcb28f30bddf183618d03906f434d63a99f2721241b3b0e870bec4c919842d09adeaf7a3fe32da48540a27a9c781a8070cb9bb13ece494d8a39b0a80b12b9b8d528d52859fe96acdbb3e225ee16914e3abcd8eefc6a240fb7a9db05dc659fb6ba08d00c81430a98a595e1dd33292dadddedd22e4b7a18f46b490603fab5731a2b971029d60db0fe5fd01070def99da2b4eb44451eb76d4e58652e31d1c2d5f292f50839584ddf419715258d1c59b017ddc3e9fc99c19c8e0590e54e5ccc1fbc0b835f18e045a0c4c234e5fee3ec9054508f644c0ac3cf95526ee3f370e5ff7e6ee34e22ce032f817eeeaf44ff9e8a088c784a04e6b662ab7c51897483b5e8db7ee530a8b5ed0313b43f1c1069f3fa9e5e8e701d6bcde1cebc06c0b1d7dbf85e740aee255d3b80950b463a447a00446a72e17795076e56dc2098c7b9185a819fc4379e87e075e92200a60705b42fb4baf82c8bdd06b4e5a207cac0bfeffe321ca43d181e0cd5ebd8cdfa4c58b3810e549c34ad250b7151a79b56c2a5b540e04dc688d1c534c607fd9c3d44725bb964d84cbd7cbf3570c561d65edcd96b5f90b5b8ab30dbb68ed59f6264027ae78b67445cb51d0ea8ef590f3e75d7df2c8c3990795ad9e1ecf2c15e6bdd2a44ff8a076ad8b6697c82abb422c12d80e7b845c03e224fb09e8e1c76f1703edda64e4de98d8a93d49ac7a12e9095f9b483ed84f51ed46bbd10342e7188f5c7dcb4a66d1f15275f908bbef457ce803fe204635e3c5a7951b29f5896c560fd00becdeeb47fdd006f7047e8109e37ddaa35596b78536c2ef7dec7e17a9fc542ce5ce610e4c2886db35b7e8bba37a162b85d59af46d10bf9fe926e66df557ee56a93f656a19a022b6bfe116132a744cd280b443530d788c2a64eb5a0c57722992ad5919b38cb9a62b019b6b19948f567d30ba6407e1901d1374b5b99e2eceb273b3234b0811f464cf3c8dd650d9ffc84f59096d2deefe156f564941f1bd748526fd7f7436570f5d20cbb3dcba8ed49362aea31d7bfe4a73255ee93783433649e79f32496468fc12a9bb97ced9aa52ad9055953bcc46ee58f93636eb8eece8c38ca55d0ae1b6a70f32d1b68385ca6eebe66f97d9f03a950a5ad1b62184828bbdf991b7be7ebf65f8f32eac05948e9cfd1edd10fc0245710745caccc08202099a5b24ffe4d72ab05a2539d49c8b3d680f0c3bcba11c2b529ad890e9426278d8b2440d4232b0523bd994b9dd774df62844893d0de3ed895cb863c8fb80ba4532bee7af448fd9af6dce62755f8b520a508b92df8fbe05a71b5d24a1ee5af1b49d7e2d9934f4dab07ddd3b0e500bca868cd57d701df358dc247a3d7ce1a83602997cc2e71f50e71be3a812948de830a3ec8505036593f580aa6565d40ca047c12b5838b856a2c6d56a78ee83b081a9711175d336f1c4e98e63bf293d9b6c0532e5b32eab829bd005aae830a4432c83c40e507a8b9c38990f45a568f965015789d2eda03a325d9904bf60e87cb8bf5bb38f05e9619bf0597b025567efd77b77fd1b10595e002aab581489a7ff06b30e510ad7717acbcacd6c0e40732acd835a35e82c4ad126be64f404a453a797ef24005cf71564f6d6bdf06288992e213514d9d85445b6527a1bd3279376d859d7359a388e47e1cdb023b575c4e131f528708a5ec469d9bb0107884cf34e59442d3cb79a3cb956fc99af854a44a5b67b94afd08fcdddc3518289940d4a9a709196506dfb8cd52cc14e30713bf79bd93b6e7ba335ee13fffc80f32a95000b38a0b2458bab46afbff0b4cb9c76c3be7f741603e1d909094c54a7ec4bd52da6b0dee22c70f99ecad5f924cd43266cef711f7ce900ce0c0b678f75cdbc409750cdb10470de216dab501eb77f7376463ba12df0a85857517a5b3b2e6784093359a8784f0e05dcda56b041c4b1cf53ec104a4a22e264bd8080e8d30b19b8f3357ed9ef5f8e0eb2796ce8de435103c75cec745671f7d1dafb61f606259c7c6f59c43f349de5c8914bc6d74b5f3df4fb98009fd6f3eeaf9bd2c174a5cdf42bff1d42c64899649557776ba3db78a8a571adbd7e41f0fbbc423561d0665cbc8ca1ca8670898c8ed5b458dfcb1fb5d29c1dc1fe4fe9d117b70f76ee9ec1e9c56423995d3083e2e9ae32acc9d40a6faea4b280f0fc85a3d50dd086f1009dca796188e7757d6d75023fcde6d61c01f5ed4be2a92c5bf8d3faef60681781bc37b20a5cd067b4c1a76e7bf197290dfce40ab538cefa6c0ff606e01634bee1f77c702dcdf55b59d3ef0b56c1e83698df01649bb4484429a6356e463bb0fd2a6d2581b2f6a0fd7655f84ce10e744e6495772a9294e078c16348f9fff520a7ccb720797edf9289f278cf60819012365e3dab04b621c941c49c8fa35d0e3abd00b751b49fa6cc6607703968d90b1fac23a92cefcfbf11c2a40b39057099218fd33f584ab95d8dc6cda6ee6e130facfce713eb18da99826c4ef252e7329d3a0afd72f4960da1b386fc1ae5d8695283240944642f52ca32c522d2cf866a0894b4df4ac4384025879ddf5426ca41fe0e400b3ff6ba16c2e63a25cd3d4e16956fa8e28de26daac1387884bc0b952e8d56b38518bb4bebd6dffced2eca154bfc12c597f7a57b4c7f2fd9b881ff6abd2a8159ab6a2351d7d6363901173e73f17044edbc4bf1cc4998ce487ad18b0d69cd1f08a192fec99256580b7349e82076236c472be0204780769d06ddb47c975d1f0341c133ed9105eab10ca1d88ad93f99b221d0d0bd56aa6b04239c146871cc3848c897d154e0da8be7df7b0fa7fd2da9623c60997425f436d5646e0fb3da8a02ceab6e3eb6b6bfd4060ca56c11f55d8f509a4100d0ab80939e2979337e76fccfffee6e3e42b9715dbce48ca41dd0fddf4516766413fa63980ca37c0a836ce405c20a7fdd05570fdbdcfa4e00575ca546979581a00fc1397831a5a64e9523ef5c6f0484baa0faddbf71f361c094879bfa42cf94193f8849f4d702c34c1ff7d708e976969d7999ea9d12887b1a4ed4c3cdbbb71b9c3070ea274b2adadf3a85c0f2da481c3ccb7a3b893e337f904007ef167ce048f161368f7aacd998f229f29fbfb84447200e193b15e1e2b0fca23c107d0770899142a94497388ad0b47c846e46cb3388a10ecde27e58234e500dc1740bdd8b883580c61788f169b78759edc7faafa6d5d99693ddf1283ef818cf079dd884f140db531eea7ef11a6431fe35a8164a8c391ae583c22f09bfb7831b3c2e5325169ad3f6609eaad318a15707b06bfcd6fc44cfc9aef4a049dc7fa96bcad34ea6c274c4633840986ebbce9a51ff1e8f0ca6db64835428c188feb40a064a3bd87b625bf02206aa0a11ccd7f5996653ed6aa5c8d5ae0256d626e13f5ba8e7ce01392b3025c09f525d5dc45ac2bb75aa4cb44f2a4e54faefeb41aab9f15a3b83cd8ba7fbd1d3fd21287d5c982c8a1b8f8d9d4c88460e2bbb672d4f4f617e186180066bebd4d0511d7d387e1b8f7233710bc1ebc35bd6b1b58e6d9a794face8f9a99c9300f7c1cc567611b92a26abd2c9af08d3242453dafe9c5215fc3331fb6c4d5e3dffeb54a8ac051bd6da0a561f4bb18e87f77c5dcddaef39f45b54a8a59a2ba3e6b870bb1b8acbd214cbcb063977d0a70bd0b80fe16fc4acc0ec05abd110d5693ecf8e3db1aa0fcc5b95a528dfa18955a5ddac25b06a4d68f201883ee01d0db2ad3239e236f10724307e4bbb8e822fd4c8a9febba08d5c109a1db117b7f98afee3584bafc9727d358420c8723a14b96f4a5fd63493bfad52b14ec3a02f2a38d26af923637014aed5894d3584c733ba753655177a6adf6448895e312afc75a7dd96a51f5a391cdf83ab8b6919c65d4cda8f9e491bb53b67fd3d963556a9d57d5fb8643771c5b02d8beb20e771144c649d6761b522845b5a534227d39a58a1fc3977e7f969898cb98b4969d15751044055af2627af1419d8198a076336a2b6a50bd748b06d5f5c85dd7e73f9e8fcd86e44c2f23a8796437bdf58e250b4c7f1d2c4d1eeb4c828a37d3bd7cf04ed9c9f64828a501c9ac8df946edba4ebf41dc6a7afd3cef30d4eb46a1e30f9e195e794032e30fcb8fb75d5c5ea1286befc808e03acb7fc5e128a202bb39599ffd62da443da528c4c7bb1c82a12e5b1737c4bd111e109999a893fda0822a39e048f13f03a776fdf5e2204a3b007cf53c76580c31ac360971f00ae287268f999dd604044f30cc9b10ab498938e53c2886da4aec5e0d95d612f1ff869f38da881ecc26834ff435578dd4f9406fd1a18056bb2cb2ee11deb07f967d7bb577052a60b15034ff17978860868536d7440a28bca225474df18a7db70b19f117838331007382034050ce9eee9d68404e12fa015a121849fd3cffdfba8bf081fa88900882c0e78cbdea33931b61617e46e9b8f78f79f9d267fb56d49fab8f90315847ec15c056d5a14c337bb122b30948746ea925e5ccb528cd4baf1c30f432571738b4a07abeeaa001691a0194957fa4173669f405ca763c0de396ef0c5fb6506d49d994c1d50d454e6eef82ab1c1c3221dc58b3de4e0c6e8aa467e88a3723684c3573e4bd38a3207d7917bec3b831b0f71a88f094d26f84290acef3b8b64ce5a75350078cbecf44b2b69e3ee7be6bb3e00340fd806d6d0faa9a9f75acec9f3811915a8c3779ac6ef3badef8bf674f4264022b3370916c0974646d301baa20eab7cfd449f96b37fd19f7ea60591a707b443963481d9d750634af3602c073510d6d34e54977244d5bfa8cb33a38a07ee9cf5d17985a6fe294ac8d829292b7a69cf2b4a217263965c320c1ae151064c2452e494c033f3a73106ff088782b6a2002a97887afbb3ebf3b0f70f6abd4530cff2d970af45160afab7ecf5c40a3c6ce09e8bd888e6dd2f98b0afe4dbc1b4e0aa22f6c087038bf115b52e787fe60e8881de1f233b70cc216446bde3a23bdec9dfe68ba6580707fa2c7bb55bbab0a46ae0e6b79e5cde6f74e48ed6b831cf6c5c387aa7c76a65ab9a817285967c1a29abe00047487b9275ab5afca73106fff23209da2b2a182c65bcafe9ad8fd3ccef22010f724aedb166d71f56d405b56976fec656548ccf78f254c46c44f0d9e1385ba328943d6f8a12890baa4ffe1d6a82d1dabc327a446c7a623ecd383a9c1a2859da840b5a7a4081ed3a6c043dec08a82106d68875a2ff81066f997518126b662a22f8c874e32f7647778b0e3081a73bbcdbd059496ed380f6254a7a616806aed9732dd010d1a8f60dd509dadeb05422b0306f0a08d58d30dd46293833e767ce385efd0b742269c192349a6ff3bcbafe5d2cde9570411171e59659c0a78dc70b28fed5e02fb390a5257bccb5ce3d3c23a379db6be845d91b3bfd1bd4868d30fbc8312e64b64e53efdfe847592f5a79d94466bceb1b940382f7c2130f06df5dd6ef1db60037df9fd7d2dc094782000b35253723dc20c92cf41f9985173c7111db062a31b9dd911038c19a5397b9b0d7a3b8b4876cf71a611dd628fc88a6e53a70c6fe02078f60a42a4ca1c14520948a5708eecfe49ea47cad8193b598c30377a5c82d5b9b45c1cae1725cfda198b70335f40b3105d3a9c51cdb2ee11c76752d3907b04f8dc74ee0b1ba3678fefcf93132e192affc6a33325f2ceecb60684dbc205ba7ff427b142c98f8f40f0f9f10e1728f0e05eeac5518d0cada2750222caae83865655893ad59c7b4a0f6ce25ce7d5e901a6347614101d3c58dd9c8da89ff9b3498219441cbc59f70049b0f5ce288937a0b60de2a69b155c265d9a6c82cff82660dbe56361f27391ddf1c0c0e2705a78af39e67a69ab43efd8dd33deacbdd4599b5ae500ff3aa7e8c22322227842ccb812ffcde3e16072e62bbf97fae34a8b57020597877d5551cbd596353f0b22fe9e7798103ff39b1c0a2f729d96ae35dd22c6fbcd65535c13c8dcb8ea8dcde6a9bf47b36b715b1015051d4aed193e6c79d28cebd5cbd586aa3eaf082bdaa15cae9f30b1ed8760e7a175309b29f6ca232396161a99e6bbf114c00fa0a7b97f690127d37ba08ef436372ba5afd82f5dc74966b08426d8172ad85a45b9fc60f76074ac569b5f8ea8efce76331379e59efd822d0a22cca26bbec5b090cc8d572fa51300b68d22251b31994052db66c5f4faaf37e637a070ea41292134363d2ff77a098f153d61e0a7b4c6dab02876cd47b0f76b7b3a5c1611e6b9482e9863cf8b564bd376804813bc1b15903461b6522d25de6a570c4ba718c8b7d91200b24393f73089e559f4949b33abbc36d7448279f5f36e5a5a15d949cd1d8b5fa13a8fd7d9b2192d31e41b212bd9a514c2f19a132eeb1a4c2feeeb3e039a6829fd55768bf6597bafd5a62d3ec996b6c6c4d4bb5107508ffc88756a7a0b0f84d4898f317dc0a3d676d7a600e7bf25655bd6a641c53b9cb1c4a21c152cdae4bc71fb7441ea870130a6797b82a27bc05693ef26d3dfce55acba386a49b86f497687dbb450435cd639f7e561864ccbcd6d8f7d3d226e53eeca5e0a6919a168f526b25caf431988f655dfc8b4aaea9f670ff73623d80dca5f5df6a96d246a578d06f511f9a40cb986d0f053c56402107d9034d6c8f762ddf30588148cb574483d3651b055b8a778a72490052f70f4fae5269fee2fe737510845713358cad388832a5fd0f296199e1ed11da794a8df41c91c638a7e034f1f7c82037d8193e2d5f984bcc781af1222d6aef02f64d1611d521cc76e5536f1a76a5a54c93bcd11ffff89f94e5c429223cbc6cd3c082eea1e6134f2f7d3f54a563dd8215d85f609de97a76482941d989dee45c4a967778efe829df9d71f9a15cc718fab477a5488929fd4b5010635df52f76634a9dce24a66bbadebf95ba1da02cf2a41c6b423a7560c586f219407d92a952894d35ecc29b4f76b10c9a4a7d810278e41b3e80265b3cd1c2f1f09fb58b17dbe7a4ba5c447b0ca3321fc285fe3fdc89cebad1e6302f5ba5d22ef3f91796774d0ae3504274e7eee755df71fa79cc060d701be32a17dda6bb88483a782d3342a7561f3ddb1e48e79fa00636c5afaa198cb2802cfcd4554e290cdad8346cb57f5fe6350ded5f428aac1eab50cc0180b550474bbb90b8b9e5fb644374f3f318ce61ef250021340dc64ba03e3f7064955cdc5bf40495ae8893ec53b819c3406a034687cef2078fb6c5a0f1c9b3359b74722cabe73c40542c3ae9f21924d5eddfb846ac9aed7114ce1d121168d2fa8be10a0c0678b39a6a40bb40541663e8eaf6291dbe67662c8159f12ff20385fce74fa8672b793e56ab01c5e11c6cc8e77af01be091d50fb04c28721c466df8d9ccf559a888356eb058d44c30739d770fa9eaec22c3e3eb5bd4231dd8881131b7aa5a4f1c08db523f2796f45b09e6ff070f893735b8179247814a31f7c283a3daf43a297c77b1f89562dbc51552986fc815bda4e1975e11cd09f9680bae35dd763e7d0b1f06061f97756a58a08cb061948f822639971a66cbaa4ba0169270960c08ad30c10a788730d6bc344d76e13efe4d3cf9046efbd9f33588dbfe926d084f0a20bf24735787c6fe181f16a2747c2c60593053d7127a173a7635c06f0c2119bd75a90688bfaee42c4a1ae6c8c221e128235542d1ac21a6d8e6a753f6da2727f12f099d874e49be03636acef458ef33cfbe8ead5e7e85661b3e4c7ea8c81e86ac89ea29568c6f322827d61f7289a5f0053fd6b8d80372b2f149c663b07bc752560235609837657dc2a2f87ef5ee2cbe468178cf048a19f19f7319ae3c6c5a4ac370de3d582a58e00fb81088c6a12efe952501a40f3edae41db5b46e9f646a7759ba9b00d2890d2bf9aca211eb3deba0db0f1d83ef3940ed4b1a339c62a462d0793adf8eea9bfce686b74f9336cba69a31e2d6b9d5b43f0376f4c26a5b0171f2dee6cd8c08e01506aac40773660b6e035f3a0f934f093aa136d92b452063f71b91f8e3f6be065dd85a43fe56481972d8e62ab840f434c30efe3898c3d019cbd30d9c5700cb209b49303e6db2a366bd771ff5285ab13a8900c7e8be53dce2aec104c1ffa5cca459e2c3607e6befd492406442fd6b991bb3b926d100e5a72f7c3ba50adbadb2ae782f305146c48db79301a245341d31f908021639bd55049de657121c3a8dd7d4f969472f5b91659983f39331c1b0ba78aaef514f1b086a14caf9f1809d028acb218369f350eb8f4bacaa78983a91a328c3a03f4e01ae2c43e1d78ad2246a8003555b9568891195f04ec7887a2dd9baeeba3617fc65eddbf62e73a07774dbd6cadf3a46ab9957a89d15e6c911db5d44900293affd1143565ca2f43672631aa30fdb91a273d26f903f261f87aefadf579a6d4f7328595e5beb00225dac9fe604661d82ff4e0466e7ddf23e355f941061e97f9b50093a5e299473ba44eeae56ee2e4a0854e2a6c3b354a39ffc9809dd2a758a55544ea42f7d63cf310805409aff7a5c7ec0bc573336c211507334645837903a65e5f889b4721dabbb344f765cda62ab46695b5a27a7f060f42d1f17e6c6d13563e93ed3e780996531975d93015d75760a9be288e772613284880939795dcf3251fb8211411c5f6e340f184b851bb4ba7254193749646c742991d515b38dddce7f89265a014308dad81bb743ce94e7c04c0c4c2e32c4ff96779047646b4b1219fcb39f2f7f220452f9efcb5092baaeace1c6e1cf363ea37b6bbe7953c8310ba172677d8d2aa3984d54d52da487a0a65603148afada90a5d8a9d0317dab1f7dd147bbbb245c3bcc06ec85703a164fc385ebddf22970794f0b239ae69ee41b782cd745a55d8a08f7621d1a0a3916d123ae4a267309bf2a99c8a9cedcccc84ba2272bb7f78690b305fcd5f342e2f66d71217866952161131e8dba771e331d34a52c51473b5d629f6e61c0097cfe03dd33a1a94dc0179f2539150ae87401ec201a8214ceae668de7c4252ccdcc5bfb148832b4bf4b3410d34778642bc3f93602a7bcc9204a6ed857719c9fef88e5fc39cf5ba05491d1e1d0a44bb10ed09f10a4579a519b608a618e1d0790c06bcc52defedcfd5fc5fc09ae10ac544c0dde9b754068bdfe7186bc7b301e267c2b135ddac2e71ba7421f3c79fe529d8689806c08797650cd067f6c32442889c04cf2e2a0a59211137ccdaf0774315cb3d313104a1d4193f51d64db5a129fe962d2e8c832bbfcdd46dc9929bd6e65f216f1922fddf599fc599c4ed7b6b1415580039fa37824fc4b4e4608945177b900f751f5f17062211bb242fc0606f48c4cc83428910881ed5406b8a628ca25bfed2dafefe79437bdbaf1482edbdbebb2e9c34efe6fa3f8243e807c27fe236921b1494b18d72e50e4e54a12347268ca7ed260610981ef5e0a79357dd34719858321751d0c8e9a50dc75c8896b122deca8953f04d8cd66f4d431a6ae002185724ceffcb484a92d3e5a880a3907d70ff5b93873cd2d2cae6ed5d6145faabcc533a29e34344b0801a089c192f69c56d5f0b0eb99e4f10dac05a707e2df2665a1c0f00b1a976a101cf8e223b7695bea92c415705f1406d43c68a39ef320f5cdddceaaca9b820dd5b043bb151f2d5141dfe8a19ca4d356151eee24144e9972d1f51de106a1946ccd29806d725e1e851497eb91b2bc19b3bccc6f2870f4507ec11bda144d333e25931c3fd7064b0ae51d1ff4aa8fc9b900baf1d2e514e8cd17d8ed5d60685a327e55f1bb8435843c3abf19b36ec8e40ec7ab89df5c40e4823cf2ee9b7da7941c0093caa5837228916b79f5a78e873be0d7a752a043de2ebe59fff2eb14cbc51d0ebdbe05dc0c70758d57f1f81b85d9ed351d9697fed7efb4de759aaf3a03ce11a864e16ccd0e317a8b9d09083f15a9ad4bddcd8c2252e06846a02dce6efd3ed6b26f9322d2b6b01c654b7ad7fc817280ab2b50b03dba906a33e369eec8b6169eea532951467f3e506cd89e378bad156662d4fe8c741d9115fa04871012818e16ffb4395fcc61ce8e9ff425a651bc2ad69894373a960696e7997ad78a7c36</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">自己做作业的才是好孩子哦~</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】八数码</title>
      <link href="/posts/e3a65c90.html"/>
      <url>/posts/e3a65c90.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：八数码">题目链接：<a href="https://www.acwing.com/problem/content/description/847/">八数码</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>给定一个3×3的字符矩阵，每次可以将 ‘x’ 与其上下左右四个方向的某个数字交换位置，问最少需要几次操作可以将矩阵恢复到 1 2 3 4 5  6 7 8 x 的状态。</p><h4 id="思路："><strong>思路：</strong></h4><ul><li>很容易想到BFS求最短路。</li><li><strong>第一个问题</strong>，<strong>如何存状态</strong>？我们平时做图论的最短路时往往是从一个点走到另一个点，记录状态转移时可以直接记录点（例如走迷宫我们可以记录[x,y]是由[x-1,y]走到的），那么由图到图怎么记录状态呢？很简单，我们可以<strong>将图视为点，在存状态时，直接在队列中存字符串</strong>。</li><li><strong>第二个问题</strong>，<strong>如何记录走了多少步</strong>？由于总共只有1~8 + 'x’共9个字符，我们可以开一个数组d[10]，<strong>d[i]表示表示x走了走到i位置走了多少步</strong>，因为最后x一定在右下角，所以当找到最短路后，d[8]就是所需步数。</li><li><strong>第三个问题</strong>，<strong>如何记录我们是否走到过当前状态</strong>（防止反复重复相同路线），换句话说，如何剪枝？在点到点的搜索时我们可以开一个二维数组记录点，那么图我们同样可以将图视为点，用<strong>map来标记某个状态是否走到过</strong>。</li><li><strong>第四个问题，我们怎么知道‘x’当前位置，</strong> 并且和周围数字交换？虽然在存状态时我们将图视为字符串，但是在寻找‘x’的位置和交换时，我们要<strong>将字符串重新视为图</strong>，然后根据x的坐标来看周围是否可以交换。</li><li>两个注意的点，<br>第一，如果用两个队列来分别存‘x’的位置和当前状态的话，会超时。解决方案：直接调用string中的find函数。<br>第二，<strong>用scanf取字符很危险</strong>，<s>真的狠危险！血的教训…</s> 因为不确定后台会给多少空格。解决方案：用cin取字符，然后加到字符串上去。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>st<span class="token punctuation">;</span><span class="token comment">//标记某个状态是否已经走到过</span><span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//d[i]表示x走到当前状态的i位置需要多少步</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token comment">//存状态</span>    p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dx<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>dy<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">auto</span> s<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token char">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//x在字符串中的位置</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token string">"12345678x"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> d<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//x在字符串中的下标是8</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> a<span class="token operator">=</span>k<span class="token operator">/</span><span class="token number">3</span><span class="token operator">+</span>dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token operator">=</span>k<span class="token operator">%</span><span class="token number">3</span><span class="token operator">+</span>dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//将字符串重新视为图，x的坐标</span>            string u<span class="token operator">=</span>s<span class="token punctuation">;</span>            <span class="token comment">//如果可以交换，那么交换之后的字符串就是u</span>            <span class="token function">swap</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>a<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span>u<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">&lt;=</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                p<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                d<span class="token punctuation">[</span>a<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment">//无法回到1 2 3 4 5 6 7 8 x返回-1</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token comment">//注意，最好是用cin，用scanf真的真的很危险！</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>        str<span class="token operator">+=</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">bfs</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教训&amp;心得&amp;疑惑</title>
      <link href="/posts/a27a48c6.html"/>
      <url>/posts/a27a48c6.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b7b999af4784dc2299b5e3305b57ecbe2306b5df017324fe7dbf298d6b10b3b6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">前方高能，非工作人员请勿靠近！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 错题本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> hexo-next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】FatMouse‘ Trade</title>
      <link href="/posts/665e1b29.html"/>
      <url>/posts/665e1b29.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：FatMouse‘-Trade">题目链接：<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2479#problem/A">FatMouse‘ Trade</a></h4><h4 id="写在前面">写在前面:</h4><p><s>很水的水题</s> ，每次做都会莫名其妙载个跟头，一时半会还看不出来。 <s>看来是有bear来，搞偷袭hhh</s></p><h4 id="题意"><strong>题意:</strong></h4><p>给定n个房间和m个金币，每个房间有J[i]个奶酪，但是要用F[i]个金币购买。问最多可以得到多少奶酪？答案是个实数。</p><h4 id="思路"><strong>思路:</strong></h4><p>贪心，根据性价比排序。</p><h4 id="ps"><strong>ps:</strong></h4><p>我们在排序时是用实数排序的，后面在计算奶酪的时候很容易用之前算出的单价来乘金币个数，但是这样是不对的，因为用整数得到实数已经有了数据损失，再乘回去数据损失会更大。只有最后金币不够买一整个房间的奶酪时才可以这么做。</p><h4 id="AC代码"><strong>AC代码:</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">,</span>INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span>PII<span class="token operator">&gt;</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">{</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">;</span>m <span class="token operator">-=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>sum <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> m <span class="token operator">*</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.3lf\n"</span><span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】会场安排问题</title>
      <link href="/posts/16f38d08.html"/>
      <url>/posts/16f38d08.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：会场安排问题">题目链接：<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2479#problem/C">会场安排问题</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>有n个活动，给定每个活动的开始和结束时间区间[l,r)，同时间一个会场内只能容纳一个活动，问最少需要多少会场。</p><h4 id="思路："><strong>思路：</strong></h4><ul><li>很容易想到贪心，按照<strong>结束时间排序</strong>然后遍历活动为每个会场找到可容纳最多活动。但是这样做是不对的，我们可以看这四个活动：<br><img src="https://img-blog.csdnimg.cn/dab2d8747b1e4f64896ce9d429c77f07.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5b-D5oSPMzEw,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li><li>通过目测我们很容易看到，1和4，2和3可以安排在一个会场，共计只需要2个会场的场地。</li><li>但是当我们按照结束时间排序后会发现，我们遍历数组会将1和3安排在一起，而2和4时间冲突，我们不得不为4个活动安排3个场地。</li><li>1.为什么会产生这样的问题？2. 该怎样解决？1.为了最少的安排场地，我们是希望各个活动之间紧凑一点，最好是一个活动刚刚结束另一个活动就开始。为了达到这个目的我们并不关心结束时间会不会很晚。这显然与贪心香悖。2.我们可以<strong>按照开始时间排序</strong>，通过<strong>优先队列每次看最早结束的那个场地</strong>是否能接纳最新的活动。</li></ul><h4 id="PS"><strong>PS:</strong></h4><p>网上还有个神乎其技的写法，将开始时间和结束时间分别排序，然后用两个指针分别指向开始时间和结束时间。如果当前开始时间小于当前结束时间，ans++，否则让结束时间向后移动一位。最后ans就是结果，将双指针算法和贪心结合在一起，叹服叹服~。</p><h4 id="错误示范："><strong>错误示范：</strong></h4><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token preprocessor property">#<span class="token directive keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><span class="token preprocessor property">#include&lt;iostream&gt;</span><span class="token preprocessor property">#include&lt;algorithm&gt;</span><span class="token preprocessor property">#include&lt;vector&gt;</span><span class="token preprocessor property">#include&lt;cstring&gt;</span><span class="token preprocessor property">#include&lt;queue&gt;</span><span class="token preprocessor property">#include&lt;set&gt;</span><span class="token preprocessor property">#include&lt;map&gt;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> <span class="token namespace">std</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">int</span></span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">,</span>INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>typedef <span class="token class-name">pair<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> PII<span class="token punctuation">;</span>typedef <span class="token keyword">long</span> <span class="token class-name"><span class="token keyword">long</span></span> ll<span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> n<span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>PII p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//first结束时间  second开始时间</span><span class="token return-type class-name"><span class="token keyword">int</span></span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cin <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> p <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name"><span class="token keyword">int</span></span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name"><span class="token keyword">int</span></span> end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> <span class="token operator">=</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>end <span class="token operator">=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AC代码："><strong>AC代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">10010</span><span class="token punctuation">,</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token comment">//first开始时间 second结束时间</span>priority_queue<span class="token operator">&lt;</span>PII<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>PII<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>PII a<span class="token punctuation">;</span> <span class="token comment">//注意，求最少活动场数不能用结束时间来排序，否则将会出现同场地不同活动之间大量空隙的现象</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">.</span>second <span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token operator">=</span>n<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>PII a <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;=</span> a<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】Blocked Roads</title>
      <link href="/posts/9e4c49c.html"/>
      <url>/posts/9e4c49c.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：Blocked-Roads">题目：<a href="https://vjudge.csgrandeur.cn/contest/486840#problem/C">Blocked Roads</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>给定n个点和m条边，对于每条边有一个询问：如果删除该边是否存在一条路径使得从1到n的距离最短？</p><h4 id="思路："><strong>思路：</strong></h4><ul><li>思路很简单，bfs找最短路径。 <s>看到最短路径题先bfs一下</s></li><li>第一个问题：怎么知道我们删除的是第几条边呢？用vector&lt;pair&lt;int,int&gt;&gt;预存每条边，然后在bfs时判断一下。</li><li>第二个问题：1. 如果对于每个询问我们都从头开始bfs，是否会超时？2. 如何优化？ 1. 实践证明<s>无脑bfs</s> 会Time Limit. 2. 我们可以提前bfs一次并预存一条最短路径，在询问时如果我们发现这条边在最短路径中出现过，那么我们就直接输出最短路径长度，否则我们就bfs一次看是否能够达到n。</li><li>第三个问题：1. 怎么求最短路径长度？ 2. 怎么存最短路径？1. 我们可以用len数组表示走到第i个点时路径长度。在第一次bfs时，len[终点]=min(len[终点]，len[起点]+1)。2. 我们可以用path数组表示走到第i个点前一个点。换句话说就是path中下标是边的终点，存的值是边的起点。可能有读者会问：为什么不用下标存起点，值存终点呢？<s>好问题，</s> 注意我们的bfs终止的条件是队列中某个点等于n，return的位置提前于下面的if判断，如果从起点开始存我们将存不到终点。</li></ul><h4 id="AC代码："><strong>AC代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span>INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token comment">//记录边的编号</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>T<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//t[i]={}，括号内表示所有以i起点且与i直接相连的点</span><span class="token keyword">int</span> len<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//len[i]表示从1走到i的最短距离</span><span class="token keyword">int</span> path<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//path数组存最短路径，path[i]表示走到i前的那个点，例如最短路中有一点边是2-&gt;5，那么path[5]=2</span><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">memset</span><span class="token punctuation">(</span>len<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>len<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> len<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//已经找到终点</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> T<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&amp;&amp;</span> T<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//删除第u条边</span><span class="token keyword">if</span> <span class="token punctuation">(</span>len<span class="token punctuation">[</span>T<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> len<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//防止反复遍历。例如:如果有边[1,5]，那么就没有必要再走[1,2],[2,4],[4,5]</span><span class="token punctuation">{</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>T<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>len<span class="token punctuation">[</span>T<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> len<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//最短路可能不止一条边，所以可能会产生覆盖，但是这不重要，我们只要记录一条最短边就可以了</span><span class="token keyword">if</span><span class="token punctuation">(</span>u<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>path<span class="token punctuation">[</span>T<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//走不到n返回-1</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span>y <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>T<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token function">bfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在不删除点的情况下找到最短路长度</span><span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//如果无法走到n</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//汇总记录最短路的各个边到set中，方便在询问时快速得到所删除边是否在最短路中出现</span>set<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>w<span class="token punctuation">;</span><span class="token keyword">int</span> l<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>PII a <span class="token operator">=</span> <span class="token punctuation">{</span>path<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>l<span class="token punctuation">}</span><span class="token punctuation">;</span>w<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>l <span class="token operator">=</span> path<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">bfs</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strange Lunchbox题解</title>
      <link href="/posts/ffe99211.html"/>
      <url>/posts/ffe99211.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：Strange-Lunchbox">题目链接：<a href="https://vjudge.csgrandeur.cn/contest/486840#problem/Q">Strange Lunchbox</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>给定n个便当盒，每个盒子中有ai数量的A和bi数量的B。问是否能找到m个盒子，使得A和B的数量总和，分别至少达到x和y。如果可以输出数量，否则输出-1。</p><h4 id="思路："><strong>思路：</strong></h4><ul><li><s>简单的01背包问题，</s> 我们可以把x和y视为两个容量分别为x和y的书包，每次加入餐盒就占用ai和bi的空间，看最后是否能占满空间。</li><li>用f[i] [j]表示当A容量为i，B容量为j时，此时包中的盒子数量。</li><li>盒子从开头开始遍历，而两个书包各自从容量x和y开始逆序遍历。</li><li>**第一个问题：为什么可以逆序遍历书包容量？**我们首先可以将所有容量的书包初始化为一个极大值，当我们逆序遍历书包容量时，<strong>如果上一个状态还没有达到，那么说明当前状态也不可达</strong>，所以可以逆序遍历。</li><li>**第二个问题，为什么要逆序遍历？**如果正常从0开始遍历也是可以的，但是要多占用1维空间来代表前k个盒子。显然在题目范围比较大时容易超出空间限制。</li></ul><h4 id="三维AC代码">三维AC代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">300</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span>INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i][j]表示x容量为i,y容量为j时的数量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>PII a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">.</span>second<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">-</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">-</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> INF <span class="token operator">?</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>二维AC代码：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">300</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span>INF<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//f[i][j]表示x容量为i,y容量为j时的数量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>PII a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">.</span>first <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">.</span>second<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">memset</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> y<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">-</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">-</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> INF <span class="token operator">?</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模板】KMP字符串</title>
      <link href="/posts/d0a95bfe.html"/>
      <url>/posts/d0a95bfe.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：KMP字符串">题目链接：<a href="https://www.acwing.com/problem/content/description/833/">KMP字符串</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>题意很简单，给定一个模式串S和模板串P，问P在S中出现的所有位置。<s>第一反应，似乎可以暴力</s>  &lt;-- 这种思想虽然不能说好，但是往往有奇效hhh。</p><h4 id="思路："><strong>思路：</strong></h4><p><s>看完y总视频总觉得要写一写总结一下，有种不吐不快的感觉hhh</s></p><ul><li>KMP的思想其实很简单，但是很神奇很奇妙，重点就是<strong>next数组</strong>的构造和使用。</li><li>我们先想想暴力怎么做，然后考虑怎么优化。朴素算法我们当然是从0开始遍历模式串的每个字符，从它开始一一对应模板串的每个字符。</li><li>那么问题就是：如何优化？</li><li>显然我们很难去优化第一重循环（也即模式串的遍历），那么我们可以从第二重循环（对模板串的遍历）下手。思考这样一个问题，<strong>当我们指向模式串S第i个字符的指针向后移动了一位，我们的模板串P需要从头开始遍历吗？</strong></li><li><img src="https://img-blog.csdnimg.cn/3251218ac79044348ea2e125fafe6125.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5b-D5oSPMzEw,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插"></li><li>我们可以看这张图，假设<strong>第一段</strong>P串开头走到S[i]位置，然后在S[k]位置与P无法匹配，那么我们显然要让P往后走，假设当<strong>第二段</strong>P串开头位置走到S[j]位置可以匹配，那么我们就会发现一个有趣的性质，<strong>第二段</strong>P[j,k]和S[j,k]相等，<strong>第一段</strong>P[j,k]也是和S[j,k]相等的，所以这两段P其实是相等的（第一段就是上面的P串，第二段就是下面的P串）。 而这里画圈的<strong>3</strong>实际上就是画圈的<strong>1</strong>平移过来的。</li><li>于是我们发现如果S和P串在某个位置不匹配，那么P要向后走到某个位置，这个位置满足P从无法匹配处的后缀与P的前缀相等。</li><li>那么我们就可以构造一个数组取名为next，next[i]中存的是以i为终点的后缀与前缀最大的匹配长度，同时长度要严格小于i。<s>KMP实际上就是模板串P要向后移动多少这么回事</s></li><li>而next数组的构造同样可以用到KMP的思想。我们来看具体到代码如何实现。</li></ul><h4 id="补充："><strong>补充：</strong></h4><p><strong>注意体会next数组：</strong></p><ul><li>首先next[i]是要小于i的。</li><li>其次我们说如果s[i]与p[j+1]匹配不成功，就使j后退到next[j]的位置，这实际上是说我们首先将p字符串开头位置与s[i]对齐，然后整体向右走next[j]长度，注意体会这里的两个描述，他们的含义其实是相同的。</li><li>在构造next数组时，我们可以假设构造到next[i]的位置，那么前面的next[j-1]已经构造好了，我们可以直接去看p[j+1]和p[i]是否相等，如果相等我们就令p[i]=j+1，否则我们就将j退回到next[i-1]的位置，因为此时一定有一个最长的后缀与前缀相等。</li><li>为什么是看p[j+1]和p[i]？因为我们假设next[i-1]的长度是j，那么p[1,j]和p[i-j,i-1]一定是匹配的，我们可以直接看当前点p[i]与p[j+1]是否匹配即可。</li><li>这个KMP的模板时间复杂度是O(n)</li></ul><h4 id="代码："><strong>代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span>M<span class="token operator">=</span><span class="token number">1e6</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//next[i]表示以i为终点的后缀与前缀最大的匹配长度，同时长度要小于i</span><span class="token keyword">int</span> ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//kmp字符串从1开始</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//构造next[i]数组，因为next[i]&lt;i，所以next[1]=0;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j<span class="token operator">=</span>ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span>        ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//kmp匹配过程</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//如果此时j没有推到模板串开头，并且s[i]与p[j+1]不匹配，那么j推到next[j]</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j<span class="token operator">=</span>ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//如果匹配成功，i和j一起向后移动一位</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">//匹配成功</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>n<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//在输入字符串时是从1开始的，所以要减1,i-n+1再-1也就是i-n</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">=</span>ne<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> KMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】Destruction</title>
      <link href="/posts/12c2cbe5.html"/>
      <url>/posts/12c2cbe5.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：Destruction">题目：<a href="https://vjudge.csgrandeur.cn/contest/486840#problem/B">Destruction</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>给定一个无序图，我们可以删除任意条边，我们获得删除边的权值，要求最后图仍是连通图。问获得的数最大是多少？</p><h4 id="思路："><strong>思路：</strong></h4><ul><li>估计大家一眼就看出是最小生成树。 <s>我的24k dog眼还是太laji了，第一眼根本看不出来。</s></li><li>思路还是最小生成树没有问题，但是没有必要真的去建立一棵树。</li><li>我们可以用并查集的思想，将这棵树看做一个集合：所有连通的点视为一个集合，当所有点都在一个集合中时，最小生成树也就建好了。</li><li>首先将所有大于0的权值求和（负数边我们可以将其留在树上，因为删去只会使得总和更小）得到sum，之后将所有边按照权值排序，遍历所有边，如果第i条边的左右两个点没有连通，就连通两个点（划入一个集合）并根绝权值判断sum是否减去其权值。</li><li>最后sum就是结果。记得用long long。 <s>不知道在long long上吃多少亏了…</s></li></ul><h4 id="代码："><strong>代码：</strong></h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//c, {x, y}</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span> <span class="token punctuation">,</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> PIII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">int</span> h<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>PIII<span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> x<span class="token punctuation">)</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token keyword">return</span> h<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>ll sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> c<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> x <span class="token operator">&gt;&gt;</span> y <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>sum <span class="token operator">+=</span> c<span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span> c<span class="token punctuation">,</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for (int i = 0; i &lt; m; ++i)cout &lt;&lt; p[i].first &lt;&lt; " " &lt;&lt; p[i].second.first &lt;&lt; " " &lt;&lt; p[i].second.second &lt;&lt; endl;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>sum <span class="token operator">-=</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】Cutting Woods</title>
      <link href="/posts/8d6c9f5d.html"/>
      <url>/posts/8d6c9f5d.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接-Cutting-Woods">题目链接: <a href="https://vjudge.csgrandeur.cn/contest/486840#problem/E">Cutting Woods</a></h4><h4 id="题意">题意:</h4><p>题意很简单，给我们一个长度为N的区间，有M次询问，每次询问是两种操作之一：1.在x坐标处，将x所在区间一分为二。2.询问x点在哪个区间。</p><h4 id="思路">思路:</h4><ul><li>这道题我开始思路没错，有序存下每个点，每次询问x所在区间时取分别第一个小于x点和第一个大于x点的坐标（从题意看询问x所在区间时不会与区间边重合，否则会产生歧义——左右区间都符合条件）。</li><li>但是我第一思路居然是 sort(vector)<strong>＋</strong>二分，果不其然超时。估计是在询问时每添加一个数都要sort排序严重拖慢时间。</li><li>于是想到会不会是线段树，写了一会发觉不太对劲，这个题用线段树写起来着实有些费劲。</li><li>最后终于发现，原来用set可以轻松解决。</li></ul><h4 id="AC代码：">AC代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2e5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token comment">//大意了，没有想到set居然速度这么快，居然傻傻二分</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始条件</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">auto</span> t <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>t <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">--</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>错误示范：</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">2010</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">erfen</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span>l <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> c<span class="token punctuation">,</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">sort</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token function">erfen</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> p<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 区间问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PTSD题解</title>
      <link href="/posts/54fd4d98.html"/>
      <url>/posts/54fd4d98.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接：PTSD">题目链接：<a href="https://codeforces.com/gym/103409/problem/I">PTSD</a></h4><h4 id="题意："><strong>题意：</strong></h4><p>共n个样例。每个样例给定一个长度为m的01序列，第i个位置具有的能量为i。我们可以将任意点划分到一个组中，<strong>假设其中能量第二高的点的能量为k，如果它在原序列中的所在位置被1标记</strong>，那么这个组中的能量为k。问我们最高能获得多少能量。</p><h4 id="思路："><strong>思路：</strong></h4><ul><li>因为只有组中第二高且被1标记的点可以贡献能量，那么我们可以通过两两配对的方式，尽量多分组。</li><li><strong>从高到低开始遍历，用cnt记录待配对的点个数</strong>。其中被0标记的点无法贡献能量，所以可以直接加入待配对行列。每当遇到一个被1标记的点，我们就看cnt是否不为0，如果是，那么就直接配对，cnt - -（也即待配对数量减1），否则我们将其加入待配对行列。</li><li>数据范围是1e6，最后的和会超int，<strong>要用long long 来存答案</strong>。</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m<span class="token punctuation">;</span>string s<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ll num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>num <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】食物链</title>
      <link href="/posts/6d699120.html"/>
      <url>/posts/6d699120.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目链接-食物链">题目链接: <a href="https://www.acwing.com/problem/content/242/">食物链</a></h4><h4 id="题意">题意:</h4><p>有三种共N只动物，它们之间只有两种关系：吃与被吃。给定K句话描述两种动物的关系，只要任意一句话满足三种条件之一就是假话，否则为真。问有多少假话。</p><h4 id="思路："><strong>思路：</strong></h4><ol><li>首先明确一点，由于我们是逐条看每句话，很多时候我们无法确定所有动物的相互关系，那么 <strong>如何处理动物之间的关系</strong> ？</li><li>对于无法确定关系的动物，我们可以先将其放到不同集合，而 <strong>所有关系确定的动物放到同一集合</strong> 。</li><li><strong>所有动物的关系与其到根节点的距离相关联</strong> ，而通过记录其与根节点的关系，我们就可以得知所有动物两辆之间的关系。</li><li>例如：如果两个点到根节点的距离模3余数相同，则同种动物。否则0被1吃，1被2吃，2被0吃。</li><li>注意， <strong>距离可以是负的</strong> ，因为我们只需要知道每个结点到根节点的距离模3余数就可以确定与根节点的关系。这就要求我们计算距离时要写为 <code>(d[x] - d[y]) % 3</code> 这种差的形式。</li><li>文中被注释掉的find函数是我开始写错的一个，查清原因后感觉对自己收获很大，放出来希望可以帮助大家更好的理解这道题目。</li></ol><h4 id="ps">ps:</h4><p>错误的find函数以及为什么错:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>x<span class="token punctuation">)</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token comment">//错误的点在于没有明确d[x]的作用。</span>    <span class="token comment">//d[x]表示x到自己父节点的距离（我们通常会说d[x]是x到祖宗结点的距离，但实际上是x到p[x]指向结点的距离，</span>    <span class="token comment">//因为执行完一次find函数p[x]就指向了x的祖宗结点，所以d[x]也就被优化为了x到自己祖宗结点的距离）</span>    <span class="token comment">//通过路径压缩的作用，我们执行完find函数后p[x]已经指向了x的祖宗结点，</span>    <span class="token comment">//那么此时的d[x]就应该是x到自己祖宗结点的距离，但是我们还没有优化d[px]，d[px]此时只是px到自己父节点的距离，</span>    <span class="token comment">//不一定是祖宗结点，所以d[x]就会出错。</span>    <span class="token comment">//根本原因就是需要先递归优化d[px]的距离，再回溯优化d[x]的值</span>    d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>d<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">5e4</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">!=</span>x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">//如果先执行p[x]=find(x),那么p[x]的值就被修改，d[p[x]]就不准了</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>d<span class="token punctuation">[</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//此时p[x]已经指向祖宗结点，所以返回p[x]</span>    <span class="token keyword">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&gt;</span>n<span class="token operator">||</span>y<span class="token operator">&gt;</span>n<span class="token punctuation">)</span>ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment">//在使用find函数前提前将其记录下来很重要，因为每次调用find函数都有可能不经意间修改p数组和d数组</span>            <span class="token keyword">int</span> px<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>py<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//如果两者在同一集合，并且到根节点的距离模3余数不同，则不属同一类</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">==</span>py<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//注意，在操作的时候很容易出现负数，所以要写为(d[x]-d[y])%3!=0的形式</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">!=</span>py<span class="token punctuation">)</span><span class="token comment">//如果不在同一集合我们将其合并</span>            <span class="token punctuation">{</span>                p<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span>py<span class="token punctuation">;</span><span class="token comment">//让x的根节点指向y的根节点</span>                <span class="token comment">//(d[x]+?)%3==d[y]%3 --&gt; (d[x]-d[y]+?)%3==0</span>                d<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>                    <span class="token keyword">else</span>         <span class="token punctuation">{</span>            <span class="token keyword">int</span> px<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>py<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">//x吃y，那么等价于1吃0,2吃1，0吃2。模3余数均差1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">==</span>py<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span><span class="token operator">||</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//同上，因为负数的存在，需要写为差的形式</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>px<span class="token operator">!=</span>py<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                p<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span>py<span class="token punctuation">;</span>                <span class="token comment">//(d[x]+?)%3==(d[y]+1)%3 --&gt; (d[x]+?-d[y]-1)%3==0</span>                d<span class="token punctuation">[</span>px<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">-</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】区间和</title>
      <link href="/posts/a9f15a81.html"/>
      <url>/posts/a9f15a81.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-区间和">题目: <a href="https://www.acwing.com/problem/content/804/">区间和</a></h4><h4 id="题意">题意:</h4><p>题意很简单不再赘述。</p><h4 id="思路">思路:</h4><ul><li>离散化看起来简单，实际上手写会发现如果思路不清晰很容出问题。</li><li>这道题首先将要添加的n个数和m个询问分别用pair存到vector中，然后<strong>将所有坐标存到vector中</strong>，去重后将待插入元素<strong>按照vector中映射的位置存到数组a中</strong>，并用s数组<strong>求前缀和</strong>。</li><li>那么怎么快速找到某个数在vector中映射的位置呢？答案是<strong>二分</strong></li><li>最关键的一点还是理解将所有坐标离散化的含义。</li><li><s>比着代码打一遍差不多就理解了hhh</s></li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">//尽管题目告诉我们数据范围是1e5,但是我们要离散化所有的坐标，最多会产生n+2m &lt;= 3e5的坐标</span><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">3e5</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//typedef是c++中的语法，在编译阶段生效，属于语句，需要在结尾处加分号。而define是c中的语法，在预处理阶段生效</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> PII<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a[i]是离散化后每个坐标对应的值，s[i]中存前缀和方便快速求出给定区间元素之和</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>alls<span class="token punctuation">;</span><span class="token comment">//将所有坐标离散化后存在vector中</span>vector<span class="token operator">&lt;</span>PII<span class="token operator">&gt;</span>add<span class="token punctuation">,</span>query<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//右边界是所有数离散化后的最大下标</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment">//找第一个大于等于x的元素离散化后的位置</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>l<span class="token operator">+</span>r<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>alls<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&gt;=</span>x<span class="token punctuation">)</span>r<span class="token operator">=</span>mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//为了前缀和方便，防止出现边界问题，离散化后从1开始</span>    <span class="token keyword">return</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span>c<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>c<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>l<span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        query<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{</span>l<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//去重操作，1.排序2.p.erase(unique(p.begin(),p.end())p.end())  </span>    <span class="token comment">//unique函数将给定数组中不重复元素放到前面，返回最后一个不重复元素后面的位置</span>    <span class="token comment">//p.erase将给定区间的元素删除</span>    <span class="token function">sort</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    alls<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>alls<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>alls<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//插入元素</span>    <span class="token comment">//for(int i=0;i&lt;n;++i)a[find(add[i].first)]+=add[i].second;我的写法</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span>add<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+=</span>item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">//求前缀和 将所有坐标映射到[1,alls.size()]，所以i要&lt;=alls.size()</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>alls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//a[x]+=c</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item<span class="token operator">:</span>query<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token function">find</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>s<span class="token punctuation">[</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//前缀和公式</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 离散化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】表达式求和</title>
      <link href="/posts/a2cd5ad9.html"/>
      <url>/posts/a2cd5ad9.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：表达式求和">题目：<a href="https://www.acwing.com/problem/content/3305/">表达式求和</a></h4><h4 id="题意">题意:</h4><p>题意很简单不再赘述。</p><h4 id="思路">思路:</h4><p>看完y总的视频后，我对y总做法的浅薄理解：</p><ul><li>“假设”我们有一颗二叉树，它的叶子结点是数，其它结点是运算符。这颗二叉树自根节点至叶子结点运算符的优先级逐级递增，也即根节点的优先级最低。所以我们只需要将左右子树结果计算出来后，再根据根节点计算最终结点即可。</li><li>人为去建立一颗这样的树很麻烦，我们可以<strong>用栈模拟这样一个过程</strong>。</li><li>我们发现，想要计算某个结点的运算符，必要条件是左右子树都已经计算完。比如：（1+1）×（2+2）,显然由于括号的存在，此处 ‘×’ 的优先级要低于两侧的 ‘+’ ，换句话说 ‘×’ 位于根节点，我们要计算 ‘×’ 需要先计算两边的 ‘+’。</li><li>那么就有一个问题：<strong>如何判断一个结点的左右子树已经遍历完？</strong></li><li>很显然，当我们向上走（换句话说就是当前运算符的优先级低于上一个运算符，因为我们假设存在的这棵树根节点的运算符优先级最低）时该结点的左右子树已经计算完。也就是这句话：<code>while(!op.empty()&amp;&amp;pr[x]&lt;=pr[op.top()])eval();</code> 。</li><li><strong>在入栈前将栈内优先级更高的运算符计算完再入栈。</strong></li><li>另外因为括号无视优先级，需要优先计算括号内的数，那么我们在遇到‘)’时可以直接将栈内的数从后向前计算出来（在入栈时已经保证了优先级自后向前升高），直到遇到 ‘(’ 停止。</li><li>这样，这棵树就完美的用栈模拟出来了。个人浅薄理解，不准确的地方欢迎指正。</li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>num<span class="token punctuation">;</span>stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span>op<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//栈的规则是先进先出，为了和原来的计算顺序保持一致，要让b等于顶部元素</span>    <span class="token keyword">int</span> b<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span>num<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>num<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'+'</span><span class="token punctuation">)</span>num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'-'</span><span class="token punctuation">)</span>num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'*'</span><span class="token punctuation">)</span>num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token char">'/'</span><span class="token punctuation">)</span>num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token operator">/</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>pr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token char">'+'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">'-'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">'*'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">'/'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    string str<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>str<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> x<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//说明是数字</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">isdigit</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                t<span class="token operator">=</span>t<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//很容易出错，注意是str[j++]-‘0’  1.容易将str[j]写为j  2.容易漏掉-‘0’  3.容易忘记j++</span>            i<span class="token operator">=</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//for(;;++i)</span>            num<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token char">'('</span><span class="token punctuation">)</span>op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token comment">//遇到右括号就要将栈内的数据自后向前计算出来，直到遇到左括号</span>        <span class="token comment">//为什么是自后向前？因为我们在入栈时保证了在入栈时的优先级是从小到大，所以可以保证后面的先计算</span>        <span class="token comment">//这其实相当于用栈模拟了一颗优先级自底至顶逐级升高的树</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>op<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>op<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">'('</span><span class="token punctuation">)</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自右向左进行计算</span>            op<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将‘(’弹出</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token comment">//说明x是一般运算符</span>        <span class="token punctuation">{</span>            <span class="token comment">//注意必须要先判断栈内是否为空，否则运行出错</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>op<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>pr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">&lt;=</span>pr<span class="token punctuation">[</span>op<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            op<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">//最后要统一处理栈内滞留的数据</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>op<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>num<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】平面分割</title>
      <link href="/posts/80542a5e.html"/>
      <url>/posts/80542a5e.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：平面分割">题目：<a href="http://oj.ecustacm.cn/problem.php?id=1512">平面分割</a></h4><h4 id="写在前面">写在前面:</h4><p>这个题比较难想，最好是结合画图来看。</p><h4 id="思路">思路:</h4><ul><li><p>n个圆可以将一个平面分割为多少部分:<br>除第一个圆外,每添加一个圆都会将平面额外分割2*(n-1)部分<br>f(1) = 2<br>f(2) = f(1) + 2 * (n - 1) = 4<br>f(3)= 8<br>f(n) = f(n - 1) + 2 * (n - 1)<br>f(n) = f(n - 2) + 2 * (n - 2) + 2 * (n - 1)<br>f(n) = 2 + 2 * 1 + 2 * 2 + … + 2 * (n - 1) = 2 + 2 * (1 + 2 + 3 + … + n - 1)<br>= 2 + 2 * ((1 + n - 1) * (n - 1)) / 2<br>= 2 + n * (n - 1);</p></li><li><p>m个直线可以将一个平面分割为几部分:<br>除第一条直线外,每额外添加一条直线都会将平面额外分割n部分<br>h(1) = 2<br>h(2) = 4<br>h(3) = 7<br>h(n) = 2 + 2 + 3 + 4 … + n<br>= 1 + (1 + n) * n / 2</p></li><li><p>n个圆和m个直线共可以将平面分为几个部分:<br>n个圆0条线:g(n,0)=f(n)= 2 + n * (n - 1);<br>n个圆1条线:这条直线可以分割它与所有圆交点个数个部分,每个圆可产生2个交点,也即增多2<em>n个部分<br>g(n,1)=2 + n * (n - 1)+2</em>n;<br>n个圆2条线:第二条线同样可以产生2<em>n个部分,除此之外还将与第一条直线相交分割一个部分<br>g(n,2)=g(n,1)+2</em>n+2</p></li><li><p>最终公式：</p><p>g(n,m)=2+n*(n-1)+2<em>n</em>m+(2+m)*(m-1)/2</p></li></ul><h4 id="代码">代码:</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span><span class="token comment">//使用to_string必须加该头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">itn</span> <span class="token expression"><span class="token keyword">int</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> array_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">+</span> n <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">*</span> m <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】判断子序列</title>
      <link href="/posts/5dbc.html"/>
      <url>/posts/5dbc.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>本题提供两种写法，第二种写法更为优雅简洁。</p></li><li><p>当然为了避免“不严谨”，法一也可以在进入 while 循环前判断 j 是否大于 m，但是毕竟 j 不会超过 b 数组的范围，实际上是 <strong>绝对安全</strong> 的，而且如果额外判断则有代码重复的累赘感，所以姑且这样写。</p></li></ul><h4 id="写法一">写法一</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1e5 + 10;int n, m;int a[N], b[N];int main(){    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i ++) cin &gt;&gt; a[i];    for (int i = 1; i &lt;= m; i ++) cin &gt;&gt; b[i];        // 为什么需要j++？因为a[i-1]与a[j-1]匹配成功后，随着i往后移动一位，j也应该向后移动一位    for (int i = 1, j = 1; i &lt;= n; i ++, j ++)    {    // 其实不够严谨，当for(;;)中的j自增后，j有可能超过m，虽然b数组开的范围比m要大10，可以避免越界，但仍然有不严谨的嫌疑        while (b[j] != a[i])         {            j ++ ;            if (j &gt; m)             {                cout &lt;&lt; "No";                return 0;            }        }    }    cout &lt;&lt; "Yes";    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写法二：">写法二：</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1e5 + 10;int n, m;int a[N], b[N];int main(){    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i ++) cin &gt;&gt; a[i];    for (int i = 1; i &lt;= m; i ++) cin &gt;&gt; b[i];        int i = 1, j = 1;    while (i &lt;= n &amp;&amp; j &lt;= m)    {        if (a[i] == b[j]) i ++;        j ++;    }        i == n + 1 ? cout &lt;&lt; "Yes" : cout &lt;&lt; "No";    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】最长连续不重复子序列</title>
      <link href="/posts/b4a0.html"/>
      <url>/posts/b4a0.html</url>
      
        <content type="html"><![CDATA[<h4 id="双指针">双指针</h4><ul><li><p>双指针其核心思想就是将 O(n^2) 的朴素算法优化到 O(n) 。</p></li><li><p>s[i] 表示 整数 i 在区间 [j,i] 中出现的次数。</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;const int N = 1e5 + 10;int n;int a[N], s[N];int slove(int l, int r){    int ans = 0;    //找i,j满足的某种单调性规律，使得两个指针对于每个元素均只遍历一次    for (int i = 1, j = 1; i &lt;= n; i ++)    {        //当i++后表示i指向的元素出现次数增加一次        s[a[i]] ++;        //j++表示j指向的元素出现次数减少一次        while (s[a[i]] &gt; 1) s[a[j]] --, j ++;        ans = max(ans, i - j + 1);    }    return ans;}int main(){    cin &gt;&gt;n;    for (int i = 1; i &lt;= n; i ++) cin &gt;&gt; a[i];        int ans = slove(1, n);    cout &lt;&lt; ans;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】牛客练习赛70-B拼凑</title>
      <link href="/posts/77351317.html"/>
      <url>/posts/77351317.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目-拼凑">题目: <a href="https://ac.nowcoder.com/acm/contest/30866/B">拼凑</a></h4><h4 id="题意">题意:</h4><p>题意很简单不再赘述.</p><h4 id="思路">思路</h4><ul><li>针对每一个’p’逐步dp更新模式串,其后所有出现模式串字符都会随前面的’p’而更新,所更新时记录的是最近一个以’p’起始模式串的位置.</li><li>所有dp[i] [j]都可以由dp[i-1] [j-1]得到:如果不属于模式串的字符,直接继承;如果属于,则看是否属于‘p’或者’i’如果是p就更新,如果是i则看是否是一直继承过来的.</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span><span class="token comment">//使用to_string必须加该头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token keyword">const</span> <span class="token keyword">int</span> array_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e5</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span>string s<span class="token punctuation">,</span> mould_s <span class="token operator">=</span> <span class="token string">"puleyaknoi"</span><span class="token punctuation">;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span>array_size<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//dp[i][j]表示在第i个字符处与模式串j字符匹配时的位置</span>map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">slove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//首先继承前一次dp的结果</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//如果不是模式串字符之子，跳过</span><span class="token keyword">int</span> k <span class="token operator">=</span> p<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//所匹配的字符是'p'则重置dp[i][j]的位置</span><span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//重点在于j-1上，继承模式串中该字符位置上一个字符在s串中出现的位置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//假如匹配到的字符是'k'并且模式串所有字符"依次"出现过</span><span class="token comment">//更新ans时要用dp[i][k]是因为dp[i][0]中存的是最近一次'p'出现的位置,而dp[i][9]中存的是最近一次完整模式串出现的位置</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans <span class="token operator">&lt;</span> <span class="token number">0x3f3f3f3f</span> <span class="token operator">?</span> ans <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>p<span class="token punctuation">[</span>mould_s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> s<span class="token punctuation">;</span>s <span class="token operator">=</span> <span class="token string">" "</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">slove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】差分</title>
      <link href="/posts/d672.html"/>
      <url>/posts/d672.html</url>
      
        <content type="html"><![CDATA[<h4 id="差分">差分</h4><ol><li>差分是前缀和的逆运算。前缀和中 <code>b[i]</code> 表示 <code>a[1]</code> 到 <code>a[i]</code> 元素之和，则差分中 <code>b[1]</code> 到 <code>b[i]</code> 元素之和表示 <code>a[i]</code> 。</li><li>由于 a 数组是 b 数组的前缀和，所以 <code>b[i]</code> 加 k ，则由 b 数组求出的 a 数组从 <code>a[i]</code> 之后所有元素均会加 k ，所以如果要将 a 数组 <code>[l, r]</code> 区间内每个元素加 k ，那么只需要将 <code>b[l] += k;</code> ，将 <code>b[r + 1] -= k;</code> 即可。</li></ol><h4 id="差分-c-165ms">差分 c++ 165ms</h4><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;unordered_map&gt;#include &lt;map&gt;using namespace std;typedef long long LL;typedef pair&lt;int, int&gt; PII;const int N = 1e5 + 5;int n, m;int a[N], b[N];void insert(int l, int r, int x){    b[l] += x; // a[l, n]均加x    b[r + 1] -= x; // a[r + 1, n]均减x}int main(){    cin &gt;&gt; n &gt;&gt; m;    for (int i = 1; i &lt;= n; i ++ )     {        scanf("%d", &amp;a[i]);        // 下面写法是从定义出发。也可以写作： insert(i, i, x);        b[i] = a[i] - a[i - 1];    }    while (m -- )    {        int l, r, x;        scanf("%d%d%d", &amp;l, &amp;r, &amp;x);        insert(l, r, x);    }    int ans = 0;    for (int i = 1; i &lt;= n; i ++ )     {        ans += b[i];        printf("%d ", ans);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】子矩阵的和</title>
      <link href="/posts/c56e.html"/>
      <url>/posts/c56e.html</url>
      
        <content type="html"><![CDATA[<p>二维前缀和公式： <code>s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j];</code><br>求给定子矩阵的值： 起点 x1、y1，终点x2、y2 的矩阵之和： <code>sum=s[x2][y2]-s[x1-1][y2]-s[x2][y1-1]+s[x1-1][y1-1];</code></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;const int N = 1010;int n, m, k;int a[N][N];int s[N][N];int main(){    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;        //计算前缀可边读边算    for (int i = 1; i &lt;= n; i ++)    {        for (int j = 1; j&lt;= m; j ++)        {            cin &gt;&gt; s[i][j];            s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];        }    }        //询问给定左上角坐标和右下角坐标的子矩阵之和    while (k --)    {        int x1, y1, x2, y2;        cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2;        cout &lt;&lt; s[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1] &lt;&lt; endl;     }        return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】高精度乘法</title>
      <link href="/posts/5344.html"/>
      <url>/posts/5344.html</url>
      
        <content type="html"><![CDATA[<h4 id="步骤">步骤</h4><ol><li>将b按位与A中每一位相乘，并将结果存在t中。</li><li>c是结果数组，每次b与A的某一位乘完加入到t中后，都将t的最后一位加入到c中。</li><li>b与A每一位乘完后，如果t还有剩余，将t从低位依次加入到c中。</li><li>去掉c中的前导零。</li></ol><h4 id="细节">细节</h4><ol><li><code>c.back()</code> ：返回vector数组最后一个元素的值。</li><li><code>c.pop_back()</code> ：将vector数组最后一个元素删除。</li></ol><h3 id="c">c++</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;map&gt;#include &lt;vector&gt;const int N = 1e5 + 10;using namespace std;typedef vector&lt;int&gt; VT;string a;int b;VT mul(VT A, int b){    int t = 0;    VT C;    for (int i = 0; i &lt; A.size(); ++ i)     {        t += A[i] * b;        C.push_back(t % 10);        t /= 10;    }    // 若t不为0，将t依次加入C中    while (t)     {        C.push_back(t % 10);        t /= 10;    }    // 去除前导0    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();    return C;}int main(){    cin &gt;&gt; a &gt;&gt; b;    VT A;    for (int i = a.size() - 1; i &gt;= 0; i -- ) A.push_back(a[i] - '0');    VT C = mul(A, b);    for (int i = C.size() - 1; i &gt;= 0; i -- ) cout &lt;&lt; C[i];    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】高精度减法</title>
      <link href="/posts/f369.html"/>
      <url>/posts/f369.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;map&gt;#include &lt;vector&gt;const int N = 1e5 + 10;using namespace std;typedef vector&lt;int&gt; VT;string a, b;bool check(VT A, VT B){    // A和B位数不同，且A的位数大于B时为真    if (A.size() != B.size()) return A.size() &gt; B.size();    // 此时说明两者位数相同。从高位开始比较    for (int i = A.size() - 1; i  &gt;= 0; i -- )        if (A[i] != B[i]) return A[i] &gt; B[i];    //此时说明A和B位数相同，且每一位的数字也相同    return true;}// A &gt;= BVT sub(VT A, VT B){    int t = 0;    VT C;    for (int i = 0; i &lt; A.size(); i ++)     {        // t = A[i] - B[i] - t; //t为1说明需要A的上一位需要借位        t = A[i] - t;        if (i &lt; B.size()) t = t - B[i];        // 如果t为负数则需要向上借位，保证t一定大于零        C.push_back((t + 10) % 10);        if (t &lt; 0) t = 1;        else t = 0;    }    // 如果C只有一位，表示结果A- B= 0，此时需要保留0    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();    return C;}int main(){    cin &gt;&gt; a &gt;&gt; b;        VT A, B;    for (int i = a.size() - 1; i &gt;= 0 ; -- i) A.push_back(a[i] - '0');    for (int i = b.size() - 1; i &gt;= 0 ; -- i) B.push_back(b[i] - '0');    VT C;    // 用大的减小的    if (check(A, B)) C = sub(A, B);    else C = sub(B, A), printf("-");        for (int i = C.size() - 1; i &gt;= 0; i -- ) cout &lt;&lt; C[i];    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】高精度加法</title>
      <link href="/posts/e64c.html"/>
      <url>/posts/e64c.html</url>
      
        <content type="html"><![CDATA[<h3 id="基础算法">基础算法</h3><h4 id="步骤">步骤</h4><ol><li>将字符串按位逆序存入数组。</li><li>将数组按位依次相加，存入数组c中。</li><li>如果 t 有剩余，加入 c 中。</li></ol><h4 id="细节">细节</h4><ol><li>高精度加法不需要排除前导零。</li><li>t 如果有剩余可以直接加到 c 数组中，因为相加最多只会多出一位。</li></ol><h3 id="c">c++</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;using namespace std;string a, b;vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B){    int t = 0;    vector&lt;int&gt; C;    for (int i = 0; i &lt; A.size() || i &lt; B.size(); i++)    {        if(i &lt; A.size()) t += A[i];        if(i &lt; B.size()) t += B[i];        C.push_back(t % 10);        t /= 10;    }    if(t) C.push_back(t);    return C;}int main(){    cin &gt;&gt; a &gt;&gt; b;        vector&lt;int&gt; A, B;    for (int i = a.size() - 1; i &gt;= 0; i--)         A.push_back(a[i] - '0');    for (int i = b.size() - 1; i &gt;= 0; i--)        B.push_back(b[i] - '0');        auto C = add(A, B);    for (int i = C.size() - 1; i &gt;= 0; i--)        cout &lt;&lt; C[i];    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 高精度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】汉诺塔</title>
      <link href="/posts/4aea3590.html"/>
      <url>/posts/4aea3590.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目汉诺塔">题目<a href="https://acm.sdtbu.edu.cn/vjudge/contest/view.action?cid=2474#problem/B">汉诺塔</a></h4><h4 id="题意：">题意：</h4><p>题意很简单不再赘述。</p><h4 id="思路：">思路：</h4><p>汉诺塔问题:</p><p>如果n==1，A-&gt;C</p><p>如果n&gt;1，分三步：</p><p>1.先将前n-1块石板，借助C从A移动到B，终点是B</p><p>2.将第n块石板从A移动到C</p><p>3.将刚才放到B上的n-1块石板借助A从B移动到C，终点是C</p><p>而在完成第三步时，显然又回到1，2两步</p><p>那么，问题的关键就在于，为什么形参要这样写，先a c b 后b a c ，依据是什么？</p><p>我们先看第一步，我们要借助C将n-1块石板从A移动到B，显然我们的终点是B，那么将起点A放到开始，将B放到尾部。</p><p>第二步，直接输出即可。</p><p>第三步，借助A从B移动到C，起点是B，终点是C，这样写也没有问题。</p><p>那么，依据是什么呢？很遗憾，无法给出递归之间一层层清晰的解释，但在翻看各种解释之后，我觉得有个博主说的很有道理：如何理解汉诺塔的递归？ - <a href="https://www.zhihu.com/question/24385418/answer/257751077">Fireman A的回答 - 知乎</a></p><blockquote><p>1.对递归的理解的要点主要在于放弃! 放弃你对于理解和跟踪递归全程的企图，只理解递归两层之间的交接，以及递归终结的条件。</p><p>2.放弃的基础在于信任，信任数学归纳法。</p></blockquote><h4 id="ps">ps:</h4><p>刚学习完循环开始接触递归时的我：“递归是魔法！”</p><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span><span class="token comment">//使用to_string必须加该头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">itn</span> <span class="token expression"><span class="token keyword">int</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> array_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">slove</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">char</span> a<span class="token punctuation">,</span><span class="token keyword">char</span> b<span class="token punctuation">,</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"Move disk "</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token string">" from "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" to "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token function">slove</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Move disk "</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" from "</span> <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" to "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">slove</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token function">slove</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token char">'A'</span><span class="token punctuation">,</span><span class="token char">'B'</span><span class="token punctuation">,</span><span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】归并排序</title>
      <link href="/posts/5121.html"/>
      <url>/posts/5121.html</url>
      
        <content type="html"><![CDATA[<h4 id="归并排序">归并排序</h4><ol><li>找分界点， <code>mid = l + r &gt;&gt; 1</code> 。</li><li>左右分别递归排序， <code>merge_sort(l, mid), merge_sort(mid + 1, r);</code>。</li><li>将排好序的左右两边合并在一起。</li></ol><h4 id="细节处理">细节处理</h4><ol><li>backup 数组只在过程中起辅助排序作用，每次都从 1 开始，包括 <strong>排序</strong> 与 <strong>合并</strong> 过程。</li><li>原数组要在对应的范围内（l, r）操作，包括 <strong>排序</strong> 与 <strong>合并</strong> 过程。</li></ol><h4 id="归并排序-c-82ms">归并排序 c++ 82ms</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#include &lt;cstdio&gt;#include &lt;cmath&gt;#include &lt;map&gt;using namespace std;typedef long long LL;const int N = 100000 + 5;int n;int num[N], backup[N];void merge_sort(int l, int r){    // 递归结束条件    if (l &gt;= r) return ;        int mid = l + r &gt;&gt; 1;    merge_sort(l, mid);    merge_sort(mid + 1, r);        // 备份数组只在过程中起辅助排序作用，每次都从1开始    int i = l, j = mid + 1, k = 1;    while (i &lt;= mid &amp;&amp; j &lt;= r)     {        if (num[i] &lt; num[j]) backup[k ++ ] = num[i ++ ];        else backup[k ++ ] = num[j ++ ];     }    while (i &lt;= mid) backup[k ++ ] = num[i ++ ];    while (j &lt;= r) backup[k ++ ] = num[j ++ ];        // 注意此处将备份的数组复制回原数组时，要复制到对应位置    for (i = l, j = 1; i &lt;= r; i ++, j ++ ) num[i] = backup[j];    return ;}int main(){    cin &gt;&gt; n;    for (int i = 1; i &lt;= n; i ++ ) scanf("%d", &amp;num[i]);    merge_sort(1, n);    for (int i = 1; i &lt;= n; i ++ ) printf("%d ", num[i]);    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 归并排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【模板】找素数&amp;找约数（唯一分解定理）</title>
      <link href="/posts/20f75cfe.html"/>
      <url>/posts/20f75cfe.html</url>
      
        <content type="html"><![CDATA[<h2 id="前排提示：唯一分解定理">前排提示：唯一分解定理</h2><h4 id="试除法，遍历。">试除法，遍历。</h4><p>简单好写，询问过多时易超时。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="朴素筛法，对每一个数不断将其倍数标记，最后剩下的自然是质数。">朴素筛法，对每一个数不断将其倍数标记，最后剩下的自然是质数。</h4><p>要建立数组在存每个数并标记，占内存写起来麻烦但是快。-&gt;1.628</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="埃氏筛法，只将每个质数的倍数不断标记，剩下的数就是质数。">埃氏筛法，只将每个质数的倍数不断标记，剩下的数就是质数。</h4><p>大幅减少循环次数，再次缩短时间。-&gt;0.400</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">+=</span>i<span class="token punctuation">)</span>    v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线性筛法，每个数只会被其最小质数标记一次。">线性筛法，每个数只会被其最小质数标记一次。</h4><p>当输入小于1e6时，与埃氏筛法差距不大，随输入增大时间优势越来越大。-&gt;0.135s</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1e7</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">prime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="求约数的个数">求约数的个数</h2><p>约数个数定理：一个合数,若其自身与其所有质因子幂次方的积大小相等,则约数个数等于所有幂次方加一后的积.</p><h4 id="基于线性筛法的约数个数定理的实现">基于线性筛法的约数个数定理的实现</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//基于线性筛法的约数个数定理的实现</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> array_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token number">1e5</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> prime<span class="token punctuation">[</span>array_size<span class="token punctuation">]</span><span class="token punctuation">,</span>vis<span class="token punctuation">[</span>array_size<span class="token punctuation">]</span><span class="token punctuation">,</span>approx<span class="token punctuation">[</span>array_size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">slove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            prime<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            approx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i <span class="token operator">&lt;</span> array_size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    num <span class="token operator">/=</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    sum<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">//显然,i*prime[j]相比i多乘了prime[j],则其约数为approx[i]*(x+1/x),x为最后一个质因子的幂次方</span>                approx<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> approx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//若x=i*j,则approx[x]=approx[i]*approx[j];</span>            <span class="token keyword">else</span> approx<span class="token punctuation">[</span>i <span class="token operator">*</span> prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> approx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> approx<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">slove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> approx<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="求给定数的约数个数">求给定数的约数个数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//求给定数的约数个数，依然是约数个数定理的应用。</span><span class="token comment">//原理1:任何一个数都可以转化为质数幂次方的和.原理2.若一个数等于质数幂次方的和,则它的约数个数等于所有幂次方均+1后的积.</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;queue&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span><span class="token comment">//使用to_string必须加该头文件</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">itn</span> <span class="token expression"><span class="token keyword">int</span></span></span><span class="token keyword">const</span> <span class="token keyword">int</span> array_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e6</span> <span class="token operator">+</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> INF <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span>array_size<span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span>array_size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">slove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array_size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>p<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> array_size <span class="token operator">/</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">slove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1200000</span><span class="token punctuation">,</span>cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>c<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> p<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k <span class="token operator">/=</span> p<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">;</span>f<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>cnt<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>ans <span class="token operator">*=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【题解】左孩子右孩子</title>
      <link href="/posts/7a6c2122.html"/>
      <url>/posts/7a6c2122.html</url>
      
        <content type="html"><![CDATA[<h4 id="题目：左孩子右兄弟">题目：<a href="http://oj.ecustacm.cn/problem.php?id=1560">左孩子右兄弟 </a></h4><h4 id="题意">题意:</h4><p>题意很简单，对于每个结点做这样的操作：</p><p>选任意顺序将所有子节点中任选作为左结点，将该结点的兄弟结点依次在右侧连接，最后形成一个二叉树。</p><p>要我们求出一颗给定树改为二叉树后最大的高度为多少。</p><h4 id="思路：">思路：</h4><ul><li>由于父节点不能改变，所以得到的二叉树根节点也还是1</li><li>假设以1为父节点的所有子节点中孩子结点最多的那个结点为x</li><li>显然我们需要将x结点放在他所有兄弟结点的最下面</li><li>设size[i]表示以i为父节点的结点数，length[x]表示以结点x为根节点的树的高度</li><li>此时高度就变为size[1]+length[x]</li><li>于是问题变为去寻找以x为根节点的二叉树的高度，而这显然与寻找1为根节点的树的高度相同，于是考虑递归dfs</li><li>vector中存放的是以i为父节点的所有结点，p[k] [i]是以k为父节点的第i个结点</li></ul><h4 id="代码：">代码：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> maxx<span class="token operator">+</span>p<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>        p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="PS：">PS：</h4><ul><li>链式前向星存图，好处在于图的起点终点清晰，很容易获得思路。劣处是无法直接获取该节点有多少子节点，需要提前处理，这里用b[i]表示i的子节点数量。总体而言能用vector简单做还是选择vector更好。</li><li>树是有向边，只需要add(x,y)一次就可以</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cmath&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ll</span> <span class="token expression"><span class="token keyword">long</span> <span class="token keyword">long</span></span></span><span class="token keyword">const</span> ll N <span class="token operator">=</span> <span class="token number">100005</span><span class="token punctuation">;</span><span class="token keyword">int</span> head<span class="token punctuation">[</span>N <span class="token punctuation">]</span><span class="token punctuation">,</span> to<span class="token punctuation">[</span>N <span class="token punctuation">]</span><span class="token punctuation">,</span>nex<span class="token punctuation">[</span>N <span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>to<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>nex<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>head<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> maxx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">=</span>nex<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">;</span>maxx <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxx<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>to<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> maxx<span class="token operator">+</span>b<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> n<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span><span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 题解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 图论 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言程序设计大作业</title>
      <link href="/posts/e3485d5d.html"/>
      <url>/posts/e3485d5d.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bd702c68138480f5cfb7ab87a3f922d91b671a5fb26b0abe491406cec558fb1b"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">前方高能，请勿靠近！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 期末实训 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Turbo C 2.0 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
